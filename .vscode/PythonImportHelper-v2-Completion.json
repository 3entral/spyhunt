[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "html",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "html",
        "description": "html",
        "detail": "html",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "urllib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib",
        "description": "urllib",
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "nmap3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "nmap3",
        "description": "nmap3",
        "detail": "nmap3",
        "documentation": {}
    },
    {
        "label": "ssl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ssl",
        "description": "ssl",
        "detail": "ssl",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "which",
        "importPath": "shutil",
        "description": "shutil",
        "isExtraImport": true,
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "dns.zone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dns.zone",
        "description": "dns.zone",
        "detail": "dns.zone",
        "documentation": {}
    },
    {
        "label": "dns.query",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dns.query",
        "description": "dns.query",
        "detail": "dns.query",
        "documentation": {}
    },
    {
        "label": "ipinfo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ipinfo",
        "description": "ipinfo",
        "detail": "ipinfo",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "ip_network",
        "importPath": "ipaddress",
        "description": "ipaddress",
        "isExtraImport": true,
        "detail": "ipaddress",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "as_completed",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Semaphore",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "cycle",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "ftplib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ftplib",
        "description": "ftplib",
        "detail": "ftplib",
        "documentation": {}
    },
    {
        "label": "socks",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socks",
        "description": "socks",
        "detail": "socks",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "mmh3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mmh3",
        "description": "mmh3",
        "detail": "mmh3",
        "documentation": {}
    },
    {
        "label": "urllib3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib3",
        "description": "urllib3",
        "detail": "urllib3",
        "documentation": {}
    },
    {
        "label": "whois",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "whois",
        "description": "whois",
        "detail": "whois",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "limits",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "sleep_and_retry",
        "importPath": "ratelimit",
        "description": "ratelimit",
        "isExtraImport": true,
        "detail": "ratelimit",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "alive_bar",
        "importPath": "alive_progress",
        "description": "alive_progress",
        "isExtraImport": true,
        "detail": "alive_progress",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "search",
        "importPath": "googlesearch",
        "description": "googlesearch",
        "isExtraImport": true,
        "detail": "googlesearch",
        "documentation": {}
    },
    {
        "label": "SMBConnection",
        "importPath": "impacket.smbconnection",
        "description": "impacket.smbconnection",
        "isExtraImport": true,
        "detail": "impacket.smbconnection",
        "documentation": {}
    },
    {
        "label": "SessionError",
        "importPath": "impacket.smbconnection",
        "description": "impacket.smbconnection",
        "isExtraImport": true,
        "detail": "impacket.smbconnection",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "load_json",
        "kind": 2,
        "importPath": "spyhunt.utils.dnsparser",
        "description": "spyhunt.utils.dnsparser",
        "peekOfCode": "def load_json(file_path):\n    try:\n        with open(file_path, \"r\") as file:\n            data = json.load(file)\n        return data\n    except FileNotFoundError:\n        print(f\"Error: The file {file_path} does not exist.\")\n    except json.JSONDecodeError as e:\n        print(f\"Error decoding JSON: {e}\")\n    return None",
        "detail": "spyhunt.utils.dnsparser",
        "documentation": {}
    },
    {
        "label": "extract_a_records",
        "kind": 2,
        "importPath": "spyhunt.utils.dnsparser",
        "description": "spyhunt.utils.dnsparser",
        "peekOfCode": "def extract_a_records(data):\n    return data.get(\"a\", [])\ndef extract_mx_records(data):\n    return data.get(\"mx\", [])\ndef extract_txt_records(data):\n    return data.get(\"txt\", [])\ndef extract_resolvers(data):\n    return data.get(\"resolver\", [])\ndef extract_soa_records(data):\n    return data.get(\"soa\", [])",
        "detail": "spyhunt.utils.dnsparser",
        "documentation": {}
    },
    {
        "label": "extract_mx_records",
        "kind": 2,
        "importPath": "spyhunt.utils.dnsparser",
        "description": "spyhunt.utils.dnsparser",
        "peekOfCode": "def extract_mx_records(data):\n    return data.get(\"mx\", [])\ndef extract_txt_records(data):\n    return data.get(\"txt\", [])\ndef extract_resolvers(data):\n    return data.get(\"resolver\", [])\ndef extract_soa_records(data):\n    return data.get(\"soa\", [])\ndef save_to_file(items, output_file, header=None):\n    try:",
        "detail": "spyhunt.utils.dnsparser",
        "documentation": {}
    },
    {
        "label": "extract_txt_records",
        "kind": 2,
        "importPath": "spyhunt.utils.dnsparser",
        "description": "spyhunt.utils.dnsparser",
        "peekOfCode": "def extract_txt_records(data):\n    return data.get(\"txt\", [])\ndef extract_resolvers(data):\n    return data.get(\"resolver\", [])\ndef extract_soa_records(data):\n    return data.get(\"soa\", [])\ndef save_to_file(items, output_file, header=None):\n    try:\n        with open(output_file, \"w\") as file:\n            if header:",
        "detail": "spyhunt.utils.dnsparser",
        "documentation": {}
    },
    {
        "label": "extract_resolvers",
        "kind": 2,
        "importPath": "spyhunt.utils.dnsparser",
        "description": "spyhunt.utils.dnsparser",
        "peekOfCode": "def extract_resolvers(data):\n    return data.get(\"resolver\", [])\ndef extract_soa_records(data):\n    return data.get(\"soa\", [])\ndef save_to_file(items, output_file, header=None):\n    try:\n        with open(output_file, \"w\") as file:\n            if header:\n                file.write(f\"{header}\\n\")\n            for item in items:",
        "detail": "spyhunt.utils.dnsparser",
        "documentation": {}
    },
    {
        "label": "extract_soa_records",
        "kind": 2,
        "importPath": "spyhunt.utils.dnsparser",
        "description": "spyhunt.utils.dnsparser",
        "peekOfCode": "def extract_soa_records(data):\n    return data.get(\"soa\", [])\ndef save_to_file(items, output_file, header=None):\n    try:\n        with open(output_file, \"w\") as file:\n            if header:\n                file.write(f\"{header}\\n\")\n            for item in items:\n                file.write(f\"{item}\\n\")\n        print(f\"Data saved to {output_file}\")",
        "detail": "spyhunt.utils.dnsparser",
        "documentation": {}
    },
    {
        "label": "save_to_file",
        "kind": 2,
        "importPath": "spyhunt.utils.dnsparser",
        "description": "spyhunt.utils.dnsparser",
        "peekOfCode": "def save_to_file(items, output_file, header=None):\n    try:\n        with open(output_file, \"w\") as file:\n            if header:\n                file.write(f\"{header}\\n\")\n            for item in items:\n                file.write(f\"{item}\\n\")\n        print(f\"Data saved to {output_file}\")\n    except IOError as e:\n        print(f\"Error writing to file {output_file}: {e}\")",
        "detail": "spyhunt.utils.dnsparser",
        "documentation": {}
    },
    {
        "label": "print_soa_records",
        "kind": 2,
        "importPath": "spyhunt.utils.dnsparser",
        "description": "spyhunt.utils.dnsparser",
        "peekOfCode": "def print_soa_records(soa_records):\n    print(\"SOA Records:\")\n    for i, soa in enumerate(soa_records, start=1):\n        print(f\"  SOA Record {i}:\")\n        print(f\"    Name: {soa.get('name', 'N/A')}\")\n        print(f\"    NS: {soa.get('ns', 'N/A')}\")\n        print(f\"    Mailbox: {soa.get('mailbox', 'N/A')}\")\n        print(f\"    Serial: {soa.get('serial', 'N/A')}\")\n        print(f\"    Refresh: {soa.get('refresh', 'N/A')}\")\n        print(f\"    Retry: {soa.get('retry', 'N/A')}\")",
        "detail": "spyhunt.utils.dnsparser",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "spyhunt.utils.dnsparser",
        "description": "spyhunt.utils.dnsparser",
        "peekOfCode": "def main():\n    # Load JSON data\n    json_data = load_json(\"dnsscan.json\")\n    if not json_data:\n        return\n    # Extract fields\n    host = json_data.get(\"host\", \"N/A\")\n    ttl = json_data.get(\"ttl\", \"N/A\")\n    status_code = json_data.get(\"status_code\", \"N/A\")\n    timestamp = json_data.get(\"timestamp\", \"N/A\")",
        "detail": "spyhunt.utils.dnsparser",
        "documentation": {}
    }
]