name: Build Package

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - run: |
          pytest tests.py --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing
      - if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: junit/test-results-*.xml
      - if: matrix.python-version == '3.12'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - run: |
          python -m pip install --upgrade pip build twine
      - run: python -m build
      - run: twine check dist/*
      - run: ls -lh dist/
      - uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/
          retention-days: 7

  publish-pypi:
    name: Publish to PyPI (Trusted Publishing)
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
      - run: |
          pip install --upgrade pip twine
          twine upload dist/*

  publish-pypi-token:
    name: Publish to PyPI (API Token)
    runs-on: ubuntu-latest
    needs: build
    if: true
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
      - run: |
          pip install --upgrade pip twine
          twine upload dist/*
