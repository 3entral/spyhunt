# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

name: Upload Python Package

on:
  release:
    types: [published]
  workflow_dispatch: # Manual trigger for testing

permissions:
  contents: read

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Run tests with pytest
        run: |
          pytest tests/ --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: junit/test-results-*.xml
      
      - name: Upload coverage reports
        if: matrix.python-version == '3.12'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  build:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install build twine
      
      - name: Build package
        run: |
          python -m build
      
      - name: Verify build
        run: |
          twine check dist/*
      
      - name: List build artifacts
        run: |
          ls -lh dist/
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/
          retention-days: 7

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    
    permissions:
      id-token: write # Required for trusted publishing
      contents: read
    
    environment:
      name: pypi
      url: https://pypi.org/p/spyhunt
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
      
      - name: List artifacts to publish
        run: |
          echo "Publishing the following artifacts:"
          ls -lh dist/
      
      - name: Publish to PyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true
          print-hash: true

  publish-pypi-token:
    name: Publish to PyPI (API Token)
    runs-on: ubuntu-latest
    needs: build
    if: false # Set to true to enable token-based publishing instead of trusted publishing
    
    environment:
      name: pypi-token
      url: https://pypi.org/p/spyhunt
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
      
      - name: List artifacts to publish
        run: |
          echo "Publishing the following artifacts:"
          ls -lh dist/
      
      - name: Publish to PyPI (API Token)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist/
          verbose: true
          print-hash: true
